generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id         String      @id @default(cuid())
  email      String      @unique
  name       String?
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  portfolios Portfolio[]
  watchlists Watchlist[]
}

model Watchlist {
  id        String   @id @default(cuid())
  name      String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  symbols   Symbol[] @relation("SymbolToWatchlist")
}

model Symbol {
  id         String      @id @default(cuid())
  symbol     String
  name       String?
  type       SymbolType
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  portfolios Portfolio[] @relation("PortfolioToSymbol")
  watchlists Watchlist[] @relation("SymbolToWatchlist")
}

model Portfolio {
  id        String   @id @default(cuid())
  name      String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  symbols   Symbol[] @relation("PortfolioToSymbol")
}

model MarketData {
  id                String   @id @default(cuid())
  symbol            String
  name              String
  price             Float
  change            Float
  volume            String
  market_cap        Float
  type              String
  timestamp         DateTime @default(now())
}

model apiLimit {
  id           String   @id @default(cuid())
  apiName      String   @unique
  dailyLimit   Int
  requestCount Int      @default(0)
  lastReset    DateTime @default(now())
}

model Article {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([createdAt])
}

model CryptoMarketMetadata {
  id               String   @id(map: "cryptoMarketMetadata_pkey")
  symbol           String   @unique(map: "cryptoMarketMetadata_symbol_key")
  logo_url         String?
  description      String?
  category         String?
  website_url      String?
  tech_doc_url     String?
  source_code_url  String?
  total_market_cap Float    @default(0)
  total_volume_24h Float    @default(0)
  btc_dominance    Float    @default(0)
  eth_dominance    Float    @default(0)
  active_cryptos   Int      @default(0)
  active_exchanges Int      @default(0)
  timestamp        DateTime @default(now())
  updated_at       DateTime

  @@index([symbol], map: "cryptoMarketMetadata_symbol_idx")
  @@index([timestamp], map: "cryptoMarketMetadata_timestamp_idx")
}

enum SymbolType {
  STOCK
  CRYPTO
  ETF
  FOREX
}

model Cache {
  key       String   @id
  data      String   @db.Text
  timestamp DateTime @default(now())

  @@index([timestamp])
}
