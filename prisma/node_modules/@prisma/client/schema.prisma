generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
  output          = "./node_modules/@prisma/client"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  schemas   = ["public"]
}

model User {
  id         String      @id @default(cuid())
  email      String      @unique
  name       String?
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  portfolios Portfolio[]
  watchlists Watchlist[]

  @@schema("public")
}

model Watchlist {
  id        String   @id @default(cuid())
  name      String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  symbols   Symbol[] @relation("SymbolToWatchlist")

  @@schema("public")
}

model Symbol {
  id         String      @id @default(cuid())
  symbol     String
  name       String?
  type       SymbolType
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  portfolios Portfolio[] @relation("PortfolioToSymbol")
  watchlists Watchlist[] @relation("SymbolToWatchlist")

  @@schema("public")
}

model Portfolio {
  id        String   @id @default(cuid())
  name      String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  symbols   Symbol[] @relation("PortfolioToSymbol")

  @@schema("public")
}

model MarketData {
  id         String   @id @default(cuid())
  symbol     String
  name       String?
  price      Float
  change     Float
  volume     String
  market_cap Float
  timestamp  DateTime @default(now())
  logo_url   String?

  @@index([symbol, timestamp])
  @@schema("public")
}

model apiLimit {
  id           String   @id @default(cuid())
  apiName      String   @unique
  dailyLimit   Int
  requestCount Int      @default(0)
  lastReset    DateTime @default(now())

  @@schema("public")
}

model Article {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([createdAt])
  @@schema("public")
}

model CryptoMarketMetadata {
  id               String   @id(map: "cryptoMarketMetadata_pkey")
  symbol           String   @unique(map: "cryptoMarketMetadata_symbol_key")
  logo_url         String?
  description      String?
  category         String?
  website_url      String?
  tech_doc_url     String?
  source_code_url  String?
  total_market_cap Float    @default(0)
  total_volume_24h Float    @default(0)
  btc_dominance    Float    @default(0)
  eth_dominance    Float    @default(0)
  active_cryptos   Int      @default(0)
  active_exchanges Int      @default(0)
  timestamp        DateTime @default(now())
  updated_at       DateTime

  @@index([symbol], map: "cryptoMarketMetadata_symbol_idx")
  @@index([timestamp], map: "cryptoMarketMetadata_timestamp_idx")
  @@schema("public")
}

model Cache {
  key       String   @id
  data      String
  timestamp DateTime @default(now())

  @@index([timestamp])
  @@schema("public")
}

model CryptoDetails {
  id         String   @id @default(cuid())
  symbol     String
  data       Json?
  timestamp  DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([symbol, timestamp])
  @@schema("public")
}

model ExchangeData {
  id        String   @id @default(cuid())
  symbol    String
  tickers   Json?
  timestamp DateTime @default(now())

  @@index([symbol, timestamp])
  @@schema("public")
}

model OnChainData {
  id         String   @id @default(cuid())
  symbol     String
  data       Json // Almacenará prices, market_caps, total_volumes
  timestamp  DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([symbol, timestamp])
  @@schema("public")
}

model MessariMetrics {
  id         String   @id @default(cuid())
  symbol     String
  data       Json // Almacenará volume_last_24h, roi_data, mining_stats, etc.
  timestamp  DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([symbol, timestamp])
  @@schema("public")
}

model DefiProtocolData {
  id         String   @id @default(cuid())
  symbol     String
  data       Json // Almacenará tvl, chainTvls, tokens, etc.
  timestamp  DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([symbol, timestamp])
  @@schema("public")
}

enum SymbolType {
  STOCK
  CRYPTO
  ETF
  FOREX

  @@schema("public")
}
