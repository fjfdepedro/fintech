
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Watchlist
 * 
 */
export type Watchlist = $Result.DefaultSelection<Prisma.$WatchlistPayload>
/**
 * Model Symbol
 * 
 */
export type Symbol = $Result.DefaultSelection<Prisma.$SymbolPayload>
/**
 * Model Portfolio
 * 
 */
export type Portfolio = $Result.DefaultSelection<Prisma.$PortfolioPayload>
/**
 * Model MarketData
 * 
 */
export type MarketData = $Result.DefaultSelection<Prisma.$MarketDataPayload>
/**
 * Model apiLimit
 * 
 */
export type apiLimit = $Result.DefaultSelection<Prisma.$apiLimitPayload>
/**
 * Model Article
 * 
 */
export type Article = $Result.DefaultSelection<Prisma.$ArticlePayload>
/**
 * Model CryptoMarketMetadata
 * 
 */
export type CryptoMarketMetadata = $Result.DefaultSelection<Prisma.$CryptoMarketMetadataPayload>
/**
 * Model Cache
 * 
 */
export type Cache = $Result.DefaultSelection<Prisma.$CachePayload>
/**
 * Model CryptoDetails
 * 
 */
export type CryptoDetails = $Result.DefaultSelection<Prisma.$CryptoDetailsPayload>
/**
 * Model ExchangeData
 * 
 */
export type ExchangeData = $Result.DefaultSelection<Prisma.$ExchangeDataPayload>
/**
 * Model OnChainData
 * 
 */
export type OnChainData = $Result.DefaultSelection<Prisma.$OnChainDataPayload>
/**
 * Model MessariMetrics
 * 
 */
export type MessariMetrics = $Result.DefaultSelection<Prisma.$MessariMetricsPayload>
/**
 * Model DefiProtocolData
 * 
 */
export type DefiProtocolData = $Result.DefaultSelection<Prisma.$DefiProtocolDataPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const SymbolType: {
  STOCK: 'STOCK',
  CRYPTO: 'CRYPTO',
  ETF: 'ETF',
  FOREX: 'FOREX'
};

export type SymbolType = (typeof SymbolType)[keyof typeof SymbolType]

}

export type SymbolType = $Enums.SymbolType

export const SymbolType: typeof $Enums.SymbolType

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.watchlist`: Exposes CRUD operations for the **Watchlist** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Watchlists
    * const watchlists = await prisma.watchlist.findMany()
    * ```
    */
  get watchlist(): Prisma.WatchlistDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.symbol`: Exposes CRUD operations for the **Symbol** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Symbols
    * const symbols = await prisma.symbol.findMany()
    * ```
    */
  get symbol(): Prisma.SymbolDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.portfolio`: Exposes CRUD operations for the **Portfolio** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Portfolios
    * const portfolios = await prisma.portfolio.findMany()
    * ```
    */
  get portfolio(): Prisma.PortfolioDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.marketData`: Exposes CRUD operations for the **MarketData** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MarketData
    * const marketData = await prisma.marketData.findMany()
    * ```
    */
  get marketData(): Prisma.MarketDataDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.apiLimit`: Exposes CRUD operations for the **apiLimit** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ApiLimits
    * const apiLimits = await prisma.apiLimit.findMany()
    * ```
    */
  get apiLimit(): Prisma.apiLimitDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.article`: Exposes CRUD operations for the **Article** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Articles
    * const articles = await prisma.article.findMany()
    * ```
    */
  get article(): Prisma.ArticleDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.cryptoMarketMetadata`: Exposes CRUD operations for the **CryptoMarketMetadata** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CryptoMarketMetadata
    * const cryptoMarketMetadata = await prisma.cryptoMarketMetadata.findMany()
    * ```
    */
  get cryptoMarketMetadata(): Prisma.CryptoMarketMetadataDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.cache`: Exposes CRUD operations for the **Cache** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Caches
    * const caches = await prisma.cache.findMany()
    * ```
    */
  get cache(): Prisma.CacheDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.cryptoDetails`: Exposes CRUD operations for the **CryptoDetails** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CryptoDetails
    * const cryptoDetails = await prisma.cryptoDetails.findMany()
    * ```
    */
  get cryptoDetails(): Prisma.CryptoDetailsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.exchangeData`: Exposes CRUD operations for the **ExchangeData** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ExchangeData
    * const exchangeData = await prisma.exchangeData.findMany()
    * ```
    */
  get exchangeData(): Prisma.ExchangeDataDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.onChainData`: Exposes CRUD operations for the **OnChainData** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more OnChainData
    * const onChainData = await prisma.onChainData.findMany()
    * ```
    */
  get onChainData(): Prisma.OnChainDataDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.messariMetrics`: Exposes CRUD operations for the **MessariMetrics** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MessariMetrics
    * const messariMetrics = await prisma.messariMetrics.findMany()
    * ```
    */
  get messariMetrics(): Prisma.MessariMetricsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.defiProtocolData`: Exposes CRUD operations for the **DefiProtocolData** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DefiProtocolData
    * const defiProtocolData = await prisma.defiProtocolData.findMany()
    * ```
    */
  get defiProtocolData(): Prisma.DefiProtocolDataDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.6.0
   * Query Engine version: f676762280b54cd07c770017ed3711ddde35f37a
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Watchlist: 'Watchlist',
    Symbol: 'Symbol',
    Portfolio: 'Portfolio',
    MarketData: 'MarketData',
    apiLimit: 'apiLimit',
    Article: 'Article',
    CryptoMarketMetadata: 'CryptoMarketMetadata',
    Cache: 'Cache',
    CryptoDetails: 'CryptoDetails',
    ExchangeData: 'ExchangeData',
    OnChainData: 'OnChainData',
    MessariMetrics: 'MessariMetrics',
    DefiProtocolData: 'DefiProtocolData'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "watchlist" | "symbol" | "portfolio" | "marketData" | "apiLimit" | "article" | "cryptoMarketMetadata" | "cache" | "cryptoDetails" | "exchangeData" | "onChainData" | "messariMetrics" | "defiProtocolData"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Watchlist: {
        payload: Prisma.$WatchlistPayload<ExtArgs>
        fields: Prisma.WatchlistFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WatchlistFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WatchlistPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WatchlistFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WatchlistPayload>
          }
          findFirst: {
            args: Prisma.WatchlistFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WatchlistPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WatchlistFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WatchlistPayload>
          }
          findMany: {
            args: Prisma.WatchlistFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WatchlistPayload>[]
          }
          create: {
            args: Prisma.WatchlistCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WatchlistPayload>
          }
          createMany: {
            args: Prisma.WatchlistCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.WatchlistCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WatchlistPayload>[]
          }
          delete: {
            args: Prisma.WatchlistDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WatchlistPayload>
          }
          update: {
            args: Prisma.WatchlistUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WatchlistPayload>
          }
          deleteMany: {
            args: Prisma.WatchlistDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.WatchlistUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.WatchlistUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WatchlistPayload>[]
          }
          upsert: {
            args: Prisma.WatchlistUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WatchlistPayload>
          }
          aggregate: {
            args: Prisma.WatchlistAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWatchlist>
          }
          groupBy: {
            args: Prisma.WatchlistGroupByArgs<ExtArgs>
            result: $Utils.Optional<WatchlistGroupByOutputType>[]
          }
          count: {
            args: Prisma.WatchlistCountArgs<ExtArgs>
            result: $Utils.Optional<WatchlistCountAggregateOutputType> | number
          }
        }
      }
      Symbol: {
        payload: Prisma.$SymbolPayload<ExtArgs>
        fields: Prisma.SymbolFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SymbolFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SymbolPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SymbolFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SymbolPayload>
          }
          findFirst: {
            args: Prisma.SymbolFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SymbolPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SymbolFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SymbolPayload>
          }
          findMany: {
            args: Prisma.SymbolFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SymbolPayload>[]
          }
          create: {
            args: Prisma.SymbolCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SymbolPayload>
          }
          createMany: {
            args: Prisma.SymbolCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SymbolCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SymbolPayload>[]
          }
          delete: {
            args: Prisma.SymbolDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SymbolPayload>
          }
          update: {
            args: Prisma.SymbolUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SymbolPayload>
          }
          deleteMany: {
            args: Prisma.SymbolDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SymbolUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SymbolUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SymbolPayload>[]
          }
          upsert: {
            args: Prisma.SymbolUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SymbolPayload>
          }
          aggregate: {
            args: Prisma.SymbolAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSymbol>
          }
          groupBy: {
            args: Prisma.SymbolGroupByArgs<ExtArgs>
            result: $Utils.Optional<SymbolGroupByOutputType>[]
          }
          count: {
            args: Prisma.SymbolCountArgs<ExtArgs>
            result: $Utils.Optional<SymbolCountAggregateOutputType> | number
          }
        }
      }
      Portfolio: {
        payload: Prisma.$PortfolioPayload<ExtArgs>
        fields: Prisma.PortfolioFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PortfolioFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PortfolioPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PortfolioFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PortfolioPayload>
          }
          findFirst: {
            args: Prisma.PortfolioFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PortfolioPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PortfolioFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PortfolioPayload>
          }
          findMany: {
            args: Prisma.PortfolioFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PortfolioPayload>[]
          }
          create: {
            args: Prisma.PortfolioCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PortfolioPayload>
          }
          createMany: {
            args: Prisma.PortfolioCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PortfolioCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PortfolioPayload>[]
          }
          delete: {
            args: Prisma.PortfolioDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PortfolioPayload>
          }
          update: {
            args: Prisma.PortfolioUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PortfolioPayload>
          }
          deleteMany: {
            args: Prisma.PortfolioDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PortfolioUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PortfolioUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PortfolioPayload>[]
          }
          upsert: {
            args: Prisma.PortfolioUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PortfolioPayload>
          }
          aggregate: {
            args: Prisma.PortfolioAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePortfolio>
          }
          groupBy: {
            args: Prisma.PortfolioGroupByArgs<ExtArgs>
            result: $Utils.Optional<PortfolioGroupByOutputType>[]
          }
          count: {
            args: Prisma.PortfolioCountArgs<ExtArgs>
            result: $Utils.Optional<PortfolioCountAggregateOutputType> | number
          }
        }
      }
      MarketData: {
        payload: Prisma.$MarketDataPayload<ExtArgs>
        fields: Prisma.MarketDataFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MarketDataFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MarketDataPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MarketDataFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MarketDataPayload>
          }
          findFirst: {
            args: Prisma.MarketDataFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MarketDataPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MarketDataFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MarketDataPayload>
          }
          findMany: {
            args: Prisma.MarketDataFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MarketDataPayload>[]
          }
          create: {
            args: Prisma.MarketDataCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MarketDataPayload>
          }
          createMany: {
            args: Prisma.MarketDataCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MarketDataCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MarketDataPayload>[]
          }
          delete: {
            args: Prisma.MarketDataDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MarketDataPayload>
          }
          update: {
            args: Prisma.MarketDataUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MarketDataPayload>
          }
          deleteMany: {
            args: Prisma.MarketDataDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MarketDataUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MarketDataUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MarketDataPayload>[]
          }
          upsert: {
            args: Prisma.MarketDataUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MarketDataPayload>
          }
          aggregate: {
            args: Prisma.MarketDataAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMarketData>
          }
          groupBy: {
            args: Prisma.MarketDataGroupByArgs<ExtArgs>
            result: $Utils.Optional<MarketDataGroupByOutputType>[]
          }
          count: {
            args: Prisma.MarketDataCountArgs<ExtArgs>
            result: $Utils.Optional<MarketDataCountAggregateOutputType> | number
          }
        }
      }
      apiLimit: {
        payload: Prisma.$apiLimitPayload<ExtArgs>
        fields: Prisma.apiLimitFieldRefs
        operations: {
          findUnique: {
            args: Prisma.apiLimitFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$apiLimitPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.apiLimitFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$apiLimitPayload>
          }
          findFirst: {
            args: Prisma.apiLimitFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$apiLimitPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.apiLimitFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$apiLimitPayload>
          }
          findMany: {
            args: Prisma.apiLimitFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$apiLimitPayload>[]
          }
          create: {
            args: Prisma.apiLimitCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$apiLimitPayload>
          }
          createMany: {
            args: Prisma.apiLimitCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.apiLimitCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$apiLimitPayload>[]
          }
          delete: {
            args: Prisma.apiLimitDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$apiLimitPayload>
          }
          update: {
            args: Prisma.apiLimitUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$apiLimitPayload>
          }
          deleteMany: {
            args: Prisma.apiLimitDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.apiLimitUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.apiLimitUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$apiLimitPayload>[]
          }
          upsert: {
            args: Prisma.apiLimitUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$apiLimitPayload>
          }
          aggregate: {
            args: Prisma.ApiLimitAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateApiLimit>
          }
          groupBy: {
            args: Prisma.apiLimitGroupByArgs<ExtArgs>
            result: $Utils.Optional<ApiLimitGroupByOutputType>[]
          }
          count: {
            args: Prisma.apiLimitCountArgs<ExtArgs>
            result: $Utils.Optional<ApiLimitCountAggregateOutputType> | number
          }
        }
      }
      Article: {
        payload: Prisma.$ArticlePayload<ExtArgs>
        fields: Prisma.ArticleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ArticleFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArticlePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ArticleFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArticlePayload>
          }
          findFirst: {
            args: Prisma.ArticleFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArticlePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ArticleFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArticlePayload>
          }
          findMany: {
            args: Prisma.ArticleFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArticlePayload>[]
          }
          create: {
            args: Prisma.ArticleCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArticlePayload>
          }
          createMany: {
            args: Prisma.ArticleCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ArticleCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArticlePayload>[]
          }
          delete: {
            args: Prisma.ArticleDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArticlePayload>
          }
          update: {
            args: Prisma.ArticleUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArticlePayload>
          }
          deleteMany: {
            args: Prisma.ArticleDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ArticleUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ArticleUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArticlePayload>[]
          }
          upsert: {
            args: Prisma.ArticleUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ArticlePayload>
          }
          aggregate: {
            args: Prisma.ArticleAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateArticle>
          }
          groupBy: {
            args: Prisma.ArticleGroupByArgs<ExtArgs>
            result: $Utils.Optional<ArticleGroupByOutputType>[]
          }
          count: {
            args: Prisma.ArticleCountArgs<ExtArgs>
            result: $Utils.Optional<ArticleCountAggregateOutputType> | number
          }
        }
      }
      CryptoMarketMetadata: {
        payload: Prisma.$CryptoMarketMetadataPayload<ExtArgs>
        fields: Prisma.CryptoMarketMetadataFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CryptoMarketMetadataFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CryptoMarketMetadataPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CryptoMarketMetadataFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CryptoMarketMetadataPayload>
          }
          findFirst: {
            args: Prisma.CryptoMarketMetadataFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CryptoMarketMetadataPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CryptoMarketMetadataFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CryptoMarketMetadataPayload>
          }
          findMany: {
            args: Prisma.CryptoMarketMetadataFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CryptoMarketMetadataPayload>[]
          }
          create: {
            args: Prisma.CryptoMarketMetadataCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CryptoMarketMetadataPayload>
          }
          createMany: {
            args: Prisma.CryptoMarketMetadataCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CryptoMarketMetadataCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CryptoMarketMetadataPayload>[]
          }
          delete: {
            args: Prisma.CryptoMarketMetadataDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CryptoMarketMetadataPayload>
          }
          update: {
            args: Prisma.CryptoMarketMetadataUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CryptoMarketMetadataPayload>
          }
          deleteMany: {
            args: Prisma.CryptoMarketMetadataDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CryptoMarketMetadataUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CryptoMarketMetadataUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CryptoMarketMetadataPayload>[]
          }
          upsert: {
            args: Prisma.CryptoMarketMetadataUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CryptoMarketMetadataPayload>
          }
          aggregate: {
            args: Prisma.CryptoMarketMetadataAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCryptoMarketMetadata>
          }
          groupBy: {
            args: Prisma.CryptoMarketMetadataGroupByArgs<ExtArgs>
            result: $Utils.Optional<CryptoMarketMetadataGroupByOutputType>[]
          }
          count: {
            args: Prisma.CryptoMarketMetadataCountArgs<ExtArgs>
            result: $Utils.Optional<CryptoMarketMetadataCountAggregateOutputType> | number
          }
        }
      }
      Cache: {
        payload: Prisma.$CachePayload<ExtArgs>
        fields: Prisma.CacheFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CacheFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CachePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CacheFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CachePayload>
          }
          findFirst: {
            args: Prisma.CacheFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CachePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CacheFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CachePayload>
          }
          findMany: {
            args: Prisma.CacheFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CachePayload>[]
          }
          create: {
            args: Prisma.CacheCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CachePayload>
          }
          createMany: {
            args: Prisma.CacheCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CacheCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CachePayload>[]
          }
          delete: {
            args: Prisma.CacheDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CachePayload>
          }
          update: {
            args: Prisma.CacheUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CachePayload>
          }
          deleteMany: {
            args: Prisma.CacheDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CacheUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CacheUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CachePayload>[]
          }
          upsert: {
            args: Prisma.CacheUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CachePayload>
          }
          aggregate: {
            args: Prisma.CacheAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCache>
          }
          groupBy: {
            args: Prisma.CacheGroupByArgs<ExtArgs>
            result: $Utils.Optional<CacheGroupByOutputType>[]
          }
          count: {
            args: Prisma.CacheCountArgs<ExtArgs>
            result: $Utils.Optional<CacheCountAggregateOutputType> | number
          }
        }
      }
      CryptoDetails: {
        payload: Prisma.$CryptoDetailsPayload<ExtArgs>
        fields: Prisma.CryptoDetailsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CryptoDetailsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CryptoDetailsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CryptoDetailsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CryptoDetailsPayload>
          }
          findFirst: {
            args: Prisma.CryptoDetailsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CryptoDetailsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CryptoDetailsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CryptoDetailsPayload>
          }
          findMany: {
            args: Prisma.CryptoDetailsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CryptoDetailsPayload>[]
          }
          create: {
            args: Prisma.CryptoDetailsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CryptoDetailsPayload>
          }
          createMany: {
            args: Prisma.CryptoDetailsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CryptoDetailsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CryptoDetailsPayload>[]
          }
          delete: {
            args: Prisma.CryptoDetailsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CryptoDetailsPayload>
          }
          update: {
            args: Prisma.CryptoDetailsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CryptoDetailsPayload>
          }
          deleteMany: {
            args: Prisma.CryptoDetailsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CryptoDetailsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CryptoDetailsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CryptoDetailsPayload>[]
          }
          upsert: {
            args: Prisma.CryptoDetailsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CryptoDetailsPayload>
          }
          aggregate: {
            args: Prisma.CryptoDetailsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCryptoDetails>
          }
          groupBy: {
            args: Prisma.CryptoDetailsGroupByArgs<ExtArgs>
            result: $Utils.Optional<CryptoDetailsGroupByOutputType>[]
          }
          count: {
            args: Prisma.CryptoDetailsCountArgs<ExtArgs>
            result: $Utils.Optional<CryptoDetailsCountAggregateOutputType> | number
          }
        }
      }
      ExchangeData: {
        payload: Prisma.$ExchangeDataPayload<ExtArgs>
        fields: Prisma.ExchangeDataFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ExchangeDataFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExchangeDataPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ExchangeDataFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExchangeDataPayload>
          }
          findFirst: {
            args: Prisma.ExchangeDataFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExchangeDataPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ExchangeDataFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExchangeDataPayload>
          }
          findMany: {
            args: Prisma.ExchangeDataFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExchangeDataPayload>[]
          }
          create: {
            args: Prisma.ExchangeDataCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExchangeDataPayload>
          }
          createMany: {
            args: Prisma.ExchangeDataCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ExchangeDataCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExchangeDataPayload>[]
          }
          delete: {
            args: Prisma.ExchangeDataDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExchangeDataPayload>
          }
          update: {
            args: Prisma.ExchangeDataUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExchangeDataPayload>
          }
          deleteMany: {
            args: Prisma.ExchangeDataDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ExchangeDataUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ExchangeDataUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExchangeDataPayload>[]
          }
          upsert: {
            args: Prisma.ExchangeDataUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExchangeDataPayload>
          }
          aggregate: {
            args: Prisma.ExchangeDataAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateExchangeData>
          }
          groupBy: {
            args: Prisma.ExchangeDataGroupByArgs<ExtArgs>
            result: $Utils.Optional<ExchangeDataGroupByOutputType>[]
          }
          count: {
            args: Prisma.ExchangeDataCountArgs<ExtArgs>
            result: $Utils.Optional<ExchangeDataCountAggregateOutputType> | number
          }
        }
      }
      OnChainData: {
        payload: Prisma.$OnChainDataPayload<ExtArgs>
        fields: Prisma.OnChainDataFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OnChainDataFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OnChainDataPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OnChainDataFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OnChainDataPayload>
          }
          findFirst: {
            args: Prisma.OnChainDataFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OnChainDataPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OnChainDataFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OnChainDataPayload>
          }
          findMany: {
            args: Prisma.OnChainDataFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OnChainDataPayload>[]
          }
          create: {
            args: Prisma.OnChainDataCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OnChainDataPayload>
          }
          createMany: {
            args: Prisma.OnChainDataCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.OnChainDataCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OnChainDataPayload>[]
          }
          delete: {
            args: Prisma.OnChainDataDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OnChainDataPayload>
          }
          update: {
            args: Prisma.OnChainDataUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OnChainDataPayload>
          }
          deleteMany: {
            args: Prisma.OnChainDataDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.OnChainDataUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.OnChainDataUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OnChainDataPayload>[]
          }
          upsert: {
            args: Prisma.OnChainDataUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OnChainDataPayload>
          }
          aggregate: {
            args: Prisma.OnChainDataAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOnChainData>
          }
          groupBy: {
            args: Prisma.OnChainDataGroupByArgs<ExtArgs>
            result: $Utils.Optional<OnChainDataGroupByOutputType>[]
          }
          count: {
            args: Prisma.OnChainDataCountArgs<ExtArgs>
            result: $Utils.Optional<OnChainDataCountAggregateOutputType> | number
          }
        }
      }
      MessariMetrics: {
        payload: Prisma.$MessariMetricsPayload<ExtArgs>
        fields: Prisma.MessariMetricsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MessariMetricsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessariMetricsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MessariMetricsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessariMetricsPayload>
          }
          findFirst: {
            args: Prisma.MessariMetricsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessariMetricsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MessariMetricsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessariMetricsPayload>
          }
          findMany: {
            args: Prisma.MessariMetricsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessariMetricsPayload>[]
          }
          create: {
            args: Prisma.MessariMetricsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessariMetricsPayload>
          }
          createMany: {
            args: Prisma.MessariMetricsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MessariMetricsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessariMetricsPayload>[]
          }
          delete: {
            args: Prisma.MessariMetricsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessariMetricsPayload>
          }
          update: {
            args: Prisma.MessariMetricsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessariMetricsPayload>
          }
          deleteMany: {
            args: Prisma.MessariMetricsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MessariMetricsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MessariMetricsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessariMetricsPayload>[]
          }
          upsert: {
            args: Prisma.MessariMetricsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessariMetricsPayload>
          }
          aggregate: {
            args: Prisma.MessariMetricsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMessariMetrics>
          }
          groupBy: {
            args: Prisma.MessariMetricsGroupByArgs<ExtArgs>
            result: $Utils.Optional<MessariMetricsGroupByOutputType>[]
          }
          count: {
            args: Prisma.MessariMetricsCountArgs<ExtArgs>
            result: $Utils.Optional<MessariMetricsCountAggregateOutputType> | number
          }
        }
      }
      DefiProtocolData: {
        payload: Prisma.$DefiProtocolDataPayload<ExtArgs>
        fields: Prisma.DefiProtocolDataFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DefiProtocolDataFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DefiProtocolDataPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DefiProtocolDataFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DefiProtocolDataPayload>
          }
          findFirst: {
            args: Prisma.DefiProtocolDataFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DefiProtocolDataPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DefiProtocolDataFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DefiProtocolDataPayload>
          }
          findMany: {
            args: Prisma.DefiProtocolDataFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DefiProtocolDataPayload>[]
          }
          create: {
            args: Prisma.DefiProtocolDataCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DefiProtocolDataPayload>
          }
          createMany: {
            args: Prisma.DefiProtocolDataCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DefiProtocolDataCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DefiProtocolDataPayload>[]
          }
          delete: {
            args: Prisma.DefiProtocolDataDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DefiProtocolDataPayload>
          }
          update: {
            args: Prisma.DefiProtocolDataUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DefiProtocolDataPayload>
          }
          deleteMany: {
            args: Prisma.DefiProtocolDataDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DefiProtocolDataUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.DefiProtocolDataUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DefiProtocolDataPayload>[]
          }
          upsert: {
            args: Prisma.DefiProtocolDataUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DefiProtocolDataPayload>
          }
          aggregate: {
            args: Prisma.DefiProtocolDataAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDefiProtocolData>
          }
          groupBy: {
            args: Prisma.DefiProtocolDataGroupByArgs<ExtArgs>
            result: $Utils.Optional<DefiProtocolDataGroupByOutputType>[]
          }
          count: {
            args: Prisma.DefiProtocolDataCountArgs<ExtArgs>
            result: $Utils.Optional<DefiProtocolDataCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    watchlist?: WatchlistOmit
    symbol?: SymbolOmit
    portfolio?: PortfolioOmit
    marketData?: MarketDataOmit
    apiLimit?: apiLimitOmit
    article?: ArticleOmit
    cryptoMarketMetadata?: CryptoMarketMetadataOmit
    cache?: CacheOmit
    cryptoDetails?: CryptoDetailsOmit
    exchangeData?: ExchangeDataOmit
    onChainData?: OnChainDataOmit
    messariMetrics?: MessariMetricsOmit
    defiProtocolData?: DefiProtocolDataOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    portfolios: number
    watchlists: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    portfolios?: boolean | UserCountOutputTypeCountPortfoliosArgs
    watchlists?: boolean | UserCountOutputTypeCountWatchlistsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountPortfoliosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PortfolioWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountWatchlistsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WatchlistWhereInput
  }


  /**
   * Count Type WatchlistCountOutputType
   */

  export type WatchlistCountOutputType = {
    symbols: number
  }

  export type WatchlistCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    symbols?: boolean | WatchlistCountOutputTypeCountSymbolsArgs
  }

  // Custom InputTypes
  /**
   * WatchlistCountOutputType without action
   */
  export type WatchlistCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WatchlistCountOutputType
     */
    select?: WatchlistCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * WatchlistCountOutputType without action
   */
  export type WatchlistCountOutputTypeCountSymbolsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SymbolWhereInput
  }


  /**
   * Count Type SymbolCountOutputType
   */

  export type SymbolCountOutputType = {
    portfolios: number
    watchlists: number
  }

  export type SymbolCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    portfolios?: boolean | SymbolCountOutputTypeCountPortfoliosArgs
    watchlists?: boolean | SymbolCountOutputTypeCountWatchlistsArgs
  }

  // Custom InputTypes
  /**
   * SymbolCountOutputType without action
   */
  export type SymbolCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SymbolCountOutputType
     */
    select?: SymbolCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SymbolCountOutputType without action
   */
  export type SymbolCountOutputTypeCountPortfoliosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PortfolioWhereInput
  }

  /**
   * SymbolCountOutputType without action
   */
  export type SymbolCountOutputTypeCountWatchlistsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WatchlistWhereInput
  }


  /**
   * Count Type PortfolioCountOutputType
   */

  export type PortfolioCountOutputType = {
    symbols: number
  }

  export type PortfolioCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    symbols?: boolean | PortfolioCountOutputTypeCountSymbolsArgs
  }

  // Custom InputTypes
  /**
   * PortfolioCountOutputType without action
   */
  export type PortfolioCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PortfolioCountOutputType
     */
    select?: PortfolioCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PortfolioCountOutputType without action
   */
  export type PortfolioCountOutputTypeCountSymbolsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SymbolWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    name: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    name?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    name?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    name?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    email: string
    name: string | null
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    portfolios?: boolean | User$portfoliosArgs<ExtArgs>
    watchlists?: boolean | User$watchlistsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "email" | "name" | "createdAt" | "updatedAt", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    portfolios?: boolean | User$portfoliosArgs<ExtArgs>
    watchlists?: boolean | User$watchlistsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      portfolios: Prisma.$PortfolioPayload<ExtArgs>[]
      watchlists: Prisma.$WatchlistPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      name: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    portfolios<T extends User$portfoliosArgs<ExtArgs> = {}>(args?: Subset<T, User$portfoliosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PortfolioPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    watchlists<T extends User$watchlistsArgs<ExtArgs> = {}>(args?: Subset<T, User$watchlistsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WatchlistPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.portfolios
   */
  export type User$portfoliosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Portfolio
     */
    select?: PortfolioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Portfolio
     */
    omit?: PortfolioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PortfolioInclude<ExtArgs> | null
    where?: PortfolioWhereInput
    orderBy?: PortfolioOrderByWithRelationInput | PortfolioOrderByWithRelationInput[]
    cursor?: PortfolioWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PortfolioScalarFieldEnum | PortfolioScalarFieldEnum[]
  }

  /**
   * User.watchlists
   */
  export type User$watchlistsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Watchlist
     */
    select?: WatchlistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Watchlist
     */
    omit?: WatchlistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WatchlistInclude<ExtArgs> | null
    where?: WatchlistWhereInput
    orderBy?: WatchlistOrderByWithRelationInput | WatchlistOrderByWithRelationInput[]
    cursor?: WatchlistWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WatchlistScalarFieldEnum | WatchlistScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Watchlist
   */

  export type AggregateWatchlist = {
    _count: WatchlistCountAggregateOutputType | null
    _min: WatchlistMinAggregateOutputType | null
    _max: WatchlistMaxAggregateOutputType | null
  }

  export type WatchlistMinAggregateOutputType = {
    id: string | null
    name: string | null
    userId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type WatchlistMaxAggregateOutputType = {
    id: string | null
    name: string | null
    userId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type WatchlistCountAggregateOutputType = {
    id: number
    name: number
    userId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type WatchlistMinAggregateInputType = {
    id?: true
    name?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type WatchlistMaxAggregateInputType = {
    id?: true
    name?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type WatchlistCountAggregateInputType = {
    id?: true
    name?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type WatchlistAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Watchlist to aggregate.
     */
    where?: WatchlistWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Watchlists to fetch.
     */
    orderBy?: WatchlistOrderByWithRelationInput | WatchlistOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WatchlistWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Watchlists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Watchlists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Watchlists
    **/
    _count?: true | WatchlistCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WatchlistMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WatchlistMaxAggregateInputType
  }

  export type GetWatchlistAggregateType<T extends WatchlistAggregateArgs> = {
        [P in keyof T & keyof AggregateWatchlist]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWatchlist[P]>
      : GetScalarType<T[P], AggregateWatchlist[P]>
  }




  export type WatchlistGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WatchlistWhereInput
    orderBy?: WatchlistOrderByWithAggregationInput | WatchlistOrderByWithAggregationInput[]
    by: WatchlistScalarFieldEnum[] | WatchlistScalarFieldEnum
    having?: WatchlistScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WatchlistCountAggregateInputType | true
    _min?: WatchlistMinAggregateInputType
    _max?: WatchlistMaxAggregateInputType
  }

  export type WatchlistGroupByOutputType = {
    id: string
    name: string
    userId: string
    createdAt: Date
    updatedAt: Date
    _count: WatchlistCountAggregateOutputType | null
    _min: WatchlistMinAggregateOutputType | null
    _max: WatchlistMaxAggregateOutputType | null
  }

  type GetWatchlistGroupByPayload<T extends WatchlistGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WatchlistGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WatchlistGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WatchlistGroupByOutputType[P]>
            : GetScalarType<T[P], WatchlistGroupByOutputType[P]>
        }
      >
    >


  export type WatchlistSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    symbols?: boolean | Watchlist$symbolsArgs<ExtArgs>
    _count?: boolean | WatchlistCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["watchlist"]>

  export type WatchlistSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["watchlist"]>

  export type WatchlistSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["watchlist"]>

  export type WatchlistSelectScalar = {
    id?: boolean
    name?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type WatchlistOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "userId" | "createdAt" | "updatedAt", ExtArgs["result"]["watchlist"]>
  export type WatchlistInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    symbols?: boolean | Watchlist$symbolsArgs<ExtArgs>
    _count?: boolean | WatchlistCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type WatchlistIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type WatchlistIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $WatchlistPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Watchlist"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      symbols: Prisma.$SymbolPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      userId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["watchlist"]>
    composites: {}
  }

  type WatchlistGetPayload<S extends boolean | null | undefined | WatchlistDefaultArgs> = $Result.GetResult<Prisma.$WatchlistPayload, S>

  type WatchlistCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<WatchlistFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: WatchlistCountAggregateInputType | true
    }

  export interface WatchlistDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Watchlist'], meta: { name: 'Watchlist' } }
    /**
     * Find zero or one Watchlist that matches the filter.
     * @param {WatchlistFindUniqueArgs} args - Arguments to find a Watchlist
     * @example
     * // Get one Watchlist
     * const watchlist = await prisma.watchlist.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends WatchlistFindUniqueArgs>(args: SelectSubset<T, WatchlistFindUniqueArgs<ExtArgs>>): Prisma__WatchlistClient<$Result.GetResult<Prisma.$WatchlistPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Watchlist that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {WatchlistFindUniqueOrThrowArgs} args - Arguments to find a Watchlist
     * @example
     * // Get one Watchlist
     * const watchlist = await prisma.watchlist.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends WatchlistFindUniqueOrThrowArgs>(args: SelectSubset<T, WatchlistFindUniqueOrThrowArgs<ExtArgs>>): Prisma__WatchlistClient<$Result.GetResult<Prisma.$WatchlistPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Watchlist that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WatchlistFindFirstArgs} args - Arguments to find a Watchlist
     * @example
     * // Get one Watchlist
     * const watchlist = await prisma.watchlist.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends WatchlistFindFirstArgs>(args?: SelectSubset<T, WatchlistFindFirstArgs<ExtArgs>>): Prisma__WatchlistClient<$Result.GetResult<Prisma.$WatchlistPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Watchlist that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WatchlistFindFirstOrThrowArgs} args - Arguments to find a Watchlist
     * @example
     * // Get one Watchlist
     * const watchlist = await prisma.watchlist.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends WatchlistFindFirstOrThrowArgs>(args?: SelectSubset<T, WatchlistFindFirstOrThrowArgs<ExtArgs>>): Prisma__WatchlistClient<$Result.GetResult<Prisma.$WatchlistPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Watchlists that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WatchlistFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Watchlists
     * const watchlists = await prisma.watchlist.findMany()
     * 
     * // Get first 10 Watchlists
     * const watchlists = await prisma.watchlist.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const watchlistWithIdOnly = await prisma.watchlist.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends WatchlistFindManyArgs>(args?: SelectSubset<T, WatchlistFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WatchlistPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Watchlist.
     * @param {WatchlistCreateArgs} args - Arguments to create a Watchlist.
     * @example
     * // Create one Watchlist
     * const Watchlist = await prisma.watchlist.create({
     *   data: {
     *     // ... data to create a Watchlist
     *   }
     * })
     * 
     */
    create<T extends WatchlistCreateArgs>(args: SelectSubset<T, WatchlistCreateArgs<ExtArgs>>): Prisma__WatchlistClient<$Result.GetResult<Prisma.$WatchlistPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Watchlists.
     * @param {WatchlistCreateManyArgs} args - Arguments to create many Watchlists.
     * @example
     * // Create many Watchlists
     * const watchlist = await prisma.watchlist.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends WatchlistCreateManyArgs>(args?: SelectSubset<T, WatchlistCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Watchlists and returns the data saved in the database.
     * @param {WatchlistCreateManyAndReturnArgs} args - Arguments to create many Watchlists.
     * @example
     * // Create many Watchlists
     * const watchlist = await prisma.watchlist.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Watchlists and only return the `id`
     * const watchlistWithIdOnly = await prisma.watchlist.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends WatchlistCreateManyAndReturnArgs>(args?: SelectSubset<T, WatchlistCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WatchlistPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Watchlist.
     * @param {WatchlistDeleteArgs} args - Arguments to delete one Watchlist.
     * @example
     * // Delete one Watchlist
     * const Watchlist = await prisma.watchlist.delete({
     *   where: {
     *     // ... filter to delete one Watchlist
     *   }
     * })
     * 
     */
    delete<T extends WatchlistDeleteArgs>(args: SelectSubset<T, WatchlistDeleteArgs<ExtArgs>>): Prisma__WatchlistClient<$Result.GetResult<Prisma.$WatchlistPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Watchlist.
     * @param {WatchlistUpdateArgs} args - Arguments to update one Watchlist.
     * @example
     * // Update one Watchlist
     * const watchlist = await prisma.watchlist.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends WatchlistUpdateArgs>(args: SelectSubset<T, WatchlistUpdateArgs<ExtArgs>>): Prisma__WatchlistClient<$Result.GetResult<Prisma.$WatchlistPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Watchlists.
     * @param {WatchlistDeleteManyArgs} args - Arguments to filter Watchlists to delete.
     * @example
     * // Delete a few Watchlists
     * const { count } = await prisma.watchlist.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends WatchlistDeleteManyArgs>(args?: SelectSubset<T, WatchlistDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Watchlists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WatchlistUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Watchlists
     * const watchlist = await prisma.watchlist.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends WatchlistUpdateManyArgs>(args: SelectSubset<T, WatchlistUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Watchlists and returns the data updated in the database.
     * @param {WatchlistUpdateManyAndReturnArgs} args - Arguments to update many Watchlists.
     * @example
     * // Update many Watchlists
     * const watchlist = await prisma.watchlist.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Watchlists and only return the `id`
     * const watchlistWithIdOnly = await prisma.watchlist.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends WatchlistUpdateManyAndReturnArgs>(args: SelectSubset<T, WatchlistUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WatchlistPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Watchlist.
     * @param {WatchlistUpsertArgs} args - Arguments to update or create a Watchlist.
     * @example
     * // Update or create a Watchlist
     * const watchlist = await prisma.watchlist.upsert({
     *   create: {
     *     // ... data to create a Watchlist
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Watchlist we want to update
     *   }
     * })
     */
    upsert<T extends WatchlistUpsertArgs>(args: SelectSubset<T, WatchlistUpsertArgs<ExtArgs>>): Prisma__WatchlistClient<$Result.GetResult<Prisma.$WatchlistPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Watchlists.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WatchlistCountArgs} args - Arguments to filter Watchlists to count.
     * @example
     * // Count the number of Watchlists
     * const count = await prisma.watchlist.count({
     *   where: {
     *     // ... the filter for the Watchlists we want to count
     *   }
     * })
    **/
    count<T extends WatchlistCountArgs>(
      args?: Subset<T, WatchlistCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WatchlistCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Watchlist.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WatchlistAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WatchlistAggregateArgs>(args: Subset<T, WatchlistAggregateArgs>): Prisma.PrismaPromise<GetWatchlistAggregateType<T>>

    /**
     * Group by Watchlist.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WatchlistGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WatchlistGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WatchlistGroupByArgs['orderBy'] }
        : { orderBy?: WatchlistGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WatchlistGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWatchlistGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Watchlist model
   */
  readonly fields: WatchlistFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Watchlist.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WatchlistClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    symbols<T extends Watchlist$symbolsArgs<ExtArgs> = {}>(args?: Subset<T, Watchlist$symbolsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SymbolPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Watchlist model
   */
  interface WatchlistFieldRefs {
    readonly id: FieldRef<"Watchlist", 'String'>
    readonly name: FieldRef<"Watchlist", 'String'>
    readonly userId: FieldRef<"Watchlist", 'String'>
    readonly createdAt: FieldRef<"Watchlist", 'DateTime'>
    readonly updatedAt: FieldRef<"Watchlist", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Watchlist findUnique
   */
  export type WatchlistFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Watchlist
     */
    select?: WatchlistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Watchlist
     */
    omit?: WatchlistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WatchlistInclude<ExtArgs> | null
    /**
     * Filter, which Watchlist to fetch.
     */
    where: WatchlistWhereUniqueInput
  }

  /**
   * Watchlist findUniqueOrThrow
   */
  export type WatchlistFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Watchlist
     */
    select?: WatchlistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Watchlist
     */
    omit?: WatchlistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WatchlistInclude<ExtArgs> | null
    /**
     * Filter, which Watchlist to fetch.
     */
    where: WatchlistWhereUniqueInput
  }

  /**
   * Watchlist findFirst
   */
  export type WatchlistFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Watchlist
     */
    select?: WatchlistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Watchlist
     */
    omit?: WatchlistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WatchlistInclude<ExtArgs> | null
    /**
     * Filter, which Watchlist to fetch.
     */
    where?: WatchlistWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Watchlists to fetch.
     */
    orderBy?: WatchlistOrderByWithRelationInput | WatchlistOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Watchlists.
     */
    cursor?: WatchlistWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Watchlists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Watchlists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Watchlists.
     */
    distinct?: WatchlistScalarFieldEnum | WatchlistScalarFieldEnum[]
  }

  /**
   * Watchlist findFirstOrThrow
   */
  export type WatchlistFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Watchlist
     */
    select?: WatchlistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Watchlist
     */
    omit?: WatchlistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WatchlistInclude<ExtArgs> | null
    /**
     * Filter, which Watchlist to fetch.
     */
    where?: WatchlistWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Watchlists to fetch.
     */
    orderBy?: WatchlistOrderByWithRelationInput | WatchlistOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Watchlists.
     */
    cursor?: WatchlistWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Watchlists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Watchlists.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Watchlists.
     */
    distinct?: WatchlistScalarFieldEnum | WatchlistScalarFieldEnum[]
  }

  /**
   * Watchlist findMany
   */
  export type WatchlistFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Watchlist
     */
    select?: WatchlistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Watchlist
     */
    omit?: WatchlistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WatchlistInclude<ExtArgs> | null
    /**
     * Filter, which Watchlists to fetch.
     */
    where?: WatchlistWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Watchlists to fetch.
     */
    orderBy?: WatchlistOrderByWithRelationInput | WatchlistOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Watchlists.
     */
    cursor?: WatchlistWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Watchlists from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Watchlists.
     */
    skip?: number
    distinct?: WatchlistScalarFieldEnum | WatchlistScalarFieldEnum[]
  }

  /**
   * Watchlist create
   */
  export type WatchlistCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Watchlist
     */
    select?: WatchlistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Watchlist
     */
    omit?: WatchlistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WatchlistInclude<ExtArgs> | null
    /**
     * The data needed to create a Watchlist.
     */
    data: XOR<WatchlistCreateInput, WatchlistUncheckedCreateInput>
  }

  /**
   * Watchlist createMany
   */
  export type WatchlistCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Watchlists.
     */
    data: WatchlistCreateManyInput | WatchlistCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Watchlist createManyAndReturn
   */
  export type WatchlistCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Watchlist
     */
    select?: WatchlistSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Watchlist
     */
    omit?: WatchlistOmit<ExtArgs> | null
    /**
     * The data used to create many Watchlists.
     */
    data: WatchlistCreateManyInput | WatchlistCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WatchlistIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Watchlist update
   */
  export type WatchlistUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Watchlist
     */
    select?: WatchlistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Watchlist
     */
    omit?: WatchlistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WatchlistInclude<ExtArgs> | null
    /**
     * The data needed to update a Watchlist.
     */
    data: XOR<WatchlistUpdateInput, WatchlistUncheckedUpdateInput>
    /**
     * Choose, which Watchlist to update.
     */
    where: WatchlistWhereUniqueInput
  }

  /**
   * Watchlist updateMany
   */
  export type WatchlistUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Watchlists.
     */
    data: XOR<WatchlistUpdateManyMutationInput, WatchlistUncheckedUpdateManyInput>
    /**
     * Filter which Watchlists to update
     */
    where?: WatchlistWhereInput
    /**
     * Limit how many Watchlists to update.
     */
    limit?: number
  }

  /**
   * Watchlist updateManyAndReturn
   */
  export type WatchlistUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Watchlist
     */
    select?: WatchlistSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Watchlist
     */
    omit?: WatchlistOmit<ExtArgs> | null
    /**
     * The data used to update Watchlists.
     */
    data: XOR<WatchlistUpdateManyMutationInput, WatchlistUncheckedUpdateManyInput>
    /**
     * Filter which Watchlists to update
     */
    where?: WatchlistWhereInput
    /**
     * Limit how many Watchlists to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WatchlistIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Watchlist upsert
   */
  export type WatchlistUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Watchlist
     */
    select?: WatchlistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Watchlist
     */
    omit?: WatchlistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WatchlistInclude<ExtArgs> | null
    /**
     * The filter to search for the Watchlist to update in case it exists.
     */
    where: WatchlistWhereUniqueInput
    /**
     * In case the Watchlist found by the `where` argument doesn't exist, create a new Watchlist with this data.
     */
    create: XOR<WatchlistCreateInput, WatchlistUncheckedCreateInput>
    /**
     * In case the Watchlist was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WatchlistUpdateInput, WatchlistUncheckedUpdateInput>
  }

  /**
   * Watchlist delete
   */
  export type WatchlistDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Watchlist
     */
    select?: WatchlistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Watchlist
     */
    omit?: WatchlistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WatchlistInclude<ExtArgs> | null
    /**
     * Filter which Watchlist to delete.
     */
    where: WatchlistWhereUniqueInput
  }

  /**
   * Watchlist deleteMany
   */
  export type WatchlistDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Watchlists to delete
     */
    where?: WatchlistWhereInput
    /**
     * Limit how many Watchlists to delete.
     */
    limit?: number
  }

  /**
   * Watchlist.symbols
   */
  export type Watchlist$symbolsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Symbol
     */
    select?: SymbolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Symbol
     */
    omit?: SymbolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SymbolInclude<ExtArgs> | null
    where?: SymbolWhereInput
    orderBy?: SymbolOrderByWithRelationInput | SymbolOrderByWithRelationInput[]
    cursor?: SymbolWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SymbolScalarFieldEnum | SymbolScalarFieldEnum[]
  }

  /**
   * Watchlist without action
   */
  export type WatchlistDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Watchlist
     */
    select?: WatchlistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Watchlist
     */
    omit?: WatchlistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WatchlistInclude<ExtArgs> | null
  }


  /**
   * Model Symbol
   */

  export type AggregateSymbol = {
    _count: SymbolCountAggregateOutputType | null
    _min: SymbolMinAggregateOutputType | null
    _max: SymbolMaxAggregateOutputType | null
  }

  export type SymbolMinAggregateOutputType = {
    id: string | null
    symbol: string | null
    name: string | null
    type: $Enums.SymbolType | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SymbolMaxAggregateOutputType = {
    id: string | null
    symbol: string | null
    name: string | null
    type: $Enums.SymbolType | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SymbolCountAggregateOutputType = {
    id: number
    symbol: number
    name: number
    type: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type SymbolMinAggregateInputType = {
    id?: true
    symbol?: true
    name?: true
    type?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SymbolMaxAggregateInputType = {
    id?: true
    symbol?: true
    name?: true
    type?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SymbolCountAggregateInputType = {
    id?: true
    symbol?: true
    name?: true
    type?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type SymbolAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Symbol to aggregate.
     */
    where?: SymbolWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Symbols to fetch.
     */
    orderBy?: SymbolOrderByWithRelationInput | SymbolOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SymbolWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Symbols from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Symbols.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Symbols
    **/
    _count?: true | SymbolCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SymbolMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SymbolMaxAggregateInputType
  }

  export type GetSymbolAggregateType<T extends SymbolAggregateArgs> = {
        [P in keyof T & keyof AggregateSymbol]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSymbol[P]>
      : GetScalarType<T[P], AggregateSymbol[P]>
  }




  export type SymbolGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SymbolWhereInput
    orderBy?: SymbolOrderByWithAggregationInput | SymbolOrderByWithAggregationInput[]
    by: SymbolScalarFieldEnum[] | SymbolScalarFieldEnum
    having?: SymbolScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SymbolCountAggregateInputType | true
    _min?: SymbolMinAggregateInputType
    _max?: SymbolMaxAggregateInputType
  }

  export type SymbolGroupByOutputType = {
    id: string
    symbol: string
    name: string | null
    type: $Enums.SymbolType
    createdAt: Date
    updatedAt: Date
    _count: SymbolCountAggregateOutputType | null
    _min: SymbolMinAggregateOutputType | null
    _max: SymbolMaxAggregateOutputType | null
  }

  type GetSymbolGroupByPayload<T extends SymbolGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SymbolGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SymbolGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SymbolGroupByOutputType[P]>
            : GetScalarType<T[P], SymbolGroupByOutputType[P]>
        }
      >
    >


  export type SymbolSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    symbol?: boolean
    name?: boolean
    type?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    portfolios?: boolean | Symbol$portfoliosArgs<ExtArgs>
    watchlists?: boolean | Symbol$watchlistsArgs<ExtArgs>
    _count?: boolean | SymbolCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["symbol"]>

  export type SymbolSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    symbol?: boolean
    name?: boolean
    type?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["symbol"]>

  export type SymbolSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    symbol?: boolean
    name?: boolean
    type?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["symbol"]>

  export type SymbolSelectScalar = {
    id?: boolean
    symbol?: boolean
    name?: boolean
    type?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type SymbolOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "symbol" | "name" | "type" | "createdAt" | "updatedAt", ExtArgs["result"]["symbol"]>
  export type SymbolInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    portfolios?: boolean | Symbol$portfoliosArgs<ExtArgs>
    watchlists?: boolean | Symbol$watchlistsArgs<ExtArgs>
    _count?: boolean | SymbolCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type SymbolIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type SymbolIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $SymbolPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Symbol"
    objects: {
      portfolios: Prisma.$PortfolioPayload<ExtArgs>[]
      watchlists: Prisma.$WatchlistPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      symbol: string
      name: string | null
      type: $Enums.SymbolType
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["symbol"]>
    composites: {}
  }

  type SymbolGetPayload<S extends boolean | null | undefined | SymbolDefaultArgs> = $Result.GetResult<Prisma.$SymbolPayload, S>

  type SymbolCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SymbolFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SymbolCountAggregateInputType | true
    }

  export interface SymbolDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Symbol'], meta: { name: 'Symbol' } }
    /**
     * Find zero or one Symbol that matches the filter.
     * @param {SymbolFindUniqueArgs} args - Arguments to find a Symbol
     * @example
     * // Get one Symbol
     * const symbol = await prisma.symbol.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SymbolFindUniqueArgs>(args: SelectSubset<T, SymbolFindUniqueArgs<ExtArgs>>): Prisma__SymbolClient<$Result.GetResult<Prisma.$SymbolPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Symbol that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SymbolFindUniqueOrThrowArgs} args - Arguments to find a Symbol
     * @example
     * // Get one Symbol
     * const symbol = await prisma.symbol.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SymbolFindUniqueOrThrowArgs>(args: SelectSubset<T, SymbolFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SymbolClient<$Result.GetResult<Prisma.$SymbolPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Symbol that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SymbolFindFirstArgs} args - Arguments to find a Symbol
     * @example
     * // Get one Symbol
     * const symbol = await prisma.symbol.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SymbolFindFirstArgs>(args?: SelectSubset<T, SymbolFindFirstArgs<ExtArgs>>): Prisma__SymbolClient<$Result.GetResult<Prisma.$SymbolPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Symbol that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SymbolFindFirstOrThrowArgs} args - Arguments to find a Symbol
     * @example
     * // Get one Symbol
     * const symbol = await prisma.symbol.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SymbolFindFirstOrThrowArgs>(args?: SelectSubset<T, SymbolFindFirstOrThrowArgs<ExtArgs>>): Prisma__SymbolClient<$Result.GetResult<Prisma.$SymbolPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Symbols that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SymbolFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Symbols
     * const symbols = await prisma.symbol.findMany()
     * 
     * // Get first 10 Symbols
     * const symbols = await prisma.symbol.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const symbolWithIdOnly = await prisma.symbol.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SymbolFindManyArgs>(args?: SelectSubset<T, SymbolFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SymbolPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Symbol.
     * @param {SymbolCreateArgs} args - Arguments to create a Symbol.
     * @example
     * // Create one Symbol
     * const Symbol = await prisma.symbol.create({
     *   data: {
     *     // ... data to create a Symbol
     *   }
     * })
     * 
     */
    create<T extends SymbolCreateArgs>(args: SelectSubset<T, SymbolCreateArgs<ExtArgs>>): Prisma__SymbolClient<$Result.GetResult<Prisma.$SymbolPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Symbols.
     * @param {SymbolCreateManyArgs} args - Arguments to create many Symbols.
     * @example
     * // Create many Symbols
     * const symbol = await prisma.symbol.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SymbolCreateManyArgs>(args?: SelectSubset<T, SymbolCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Symbols and returns the data saved in the database.
     * @param {SymbolCreateManyAndReturnArgs} args - Arguments to create many Symbols.
     * @example
     * // Create many Symbols
     * const symbol = await prisma.symbol.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Symbols and only return the `id`
     * const symbolWithIdOnly = await prisma.symbol.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SymbolCreateManyAndReturnArgs>(args?: SelectSubset<T, SymbolCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SymbolPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Symbol.
     * @param {SymbolDeleteArgs} args - Arguments to delete one Symbol.
     * @example
     * // Delete one Symbol
     * const Symbol = await prisma.symbol.delete({
     *   where: {
     *     // ... filter to delete one Symbol
     *   }
     * })
     * 
     */
    delete<T extends SymbolDeleteArgs>(args: SelectSubset<T, SymbolDeleteArgs<ExtArgs>>): Prisma__SymbolClient<$Result.GetResult<Prisma.$SymbolPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Symbol.
     * @param {SymbolUpdateArgs} args - Arguments to update one Symbol.
     * @example
     * // Update one Symbol
     * const symbol = await prisma.symbol.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SymbolUpdateArgs>(args: SelectSubset<T, SymbolUpdateArgs<ExtArgs>>): Prisma__SymbolClient<$Result.GetResult<Prisma.$SymbolPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Symbols.
     * @param {SymbolDeleteManyArgs} args - Arguments to filter Symbols to delete.
     * @example
     * // Delete a few Symbols
     * const { count } = await prisma.symbol.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SymbolDeleteManyArgs>(args?: SelectSubset<T, SymbolDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Symbols.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SymbolUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Symbols
     * const symbol = await prisma.symbol.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SymbolUpdateManyArgs>(args: SelectSubset<T, SymbolUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Symbols and returns the data updated in the database.
     * @param {SymbolUpdateManyAndReturnArgs} args - Arguments to update many Symbols.
     * @example
     * // Update many Symbols
     * const symbol = await prisma.symbol.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Symbols and only return the `id`
     * const symbolWithIdOnly = await prisma.symbol.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SymbolUpdateManyAndReturnArgs>(args: SelectSubset<T, SymbolUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SymbolPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Symbol.
     * @param {SymbolUpsertArgs} args - Arguments to update or create a Symbol.
     * @example
     * // Update or create a Symbol
     * const symbol = await prisma.symbol.upsert({
     *   create: {
     *     // ... data to create a Symbol
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Symbol we want to update
     *   }
     * })
     */
    upsert<T extends SymbolUpsertArgs>(args: SelectSubset<T, SymbolUpsertArgs<ExtArgs>>): Prisma__SymbolClient<$Result.GetResult<Prisma.$SymbolPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Symbols.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SymbolCountArgs} args - Arguments to filter Symbols to count.
     * @example
     * // Count the number of Symbols
     * const count = await prisma.symbol.count({
     *   where: {
     *     // ... the filter for the Symbols we want to count
     *   }
     * })
    **/
    count<T extends SymbolCountArgs>(
      args?: Subset<T, SymbolCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SymbolCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Symbol.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SymbolAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SymbolAggregateArgs>(args: Subset<T, SymbolAggregateArgs>): Prisma.PrismaPromise<GetSymbolAggregateType<T>>

    /**
     * Group by Symbol.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SymbolGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SymbolGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SymbolGroupByArgs['orderBy'] }
        : { orderBy?: SymbolGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SymbolGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSymbolGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Symbol model
   */
  readonly fields: SymbolFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Symbol.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SymbolClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    portfolios<T extends Symbol$portfoliosArgs<ExtArgs> = {}>(args?: Subset<T, Symbol$portfoliosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PortfolioPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    watchlists<T extends Symbol$watchlistsArgs<ExtArgs> = {}>(args?: Subset<T, Symbol$watchlistsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WatchlistPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Symbol model
   */
  interface SymbolFieldRefs {
    readonly id: FieldRef<"Symbol", 'String'>
    readonly symbol: FieldRef<"Symbol", 'String'>
    readonly name: FieldRef<"Symbol", 'String'>
    readonly type: FieldRef<"Symbol", 'SymbolType'>
    readonly createdAt: FieldRef<"Symbol", 'DateTime'>
    readonly updatedAt: FieldRef<"Symbol", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Symbol findUnique
   */
  export type SymbolFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Symbol
     */
    select?: SymbolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Symbol
     */
    omit?: SymbolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SymbolInclude<ExtArgs> | null
    /**
     * Filter, which Symbol to fetch.
     */
    where: SymbolWhereUniqueInput
  }

  /**
   * Symbol findUniqueOrThrow
   */
  export type SymbolFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Symbol
     */
    select?: SymbolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Symbol
     */
    omit?: SymbolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SymbolInclude<ExtArgs> | null
    /**
     * Filter, which Symbol to fetch.
     */
    where: SymbolWhereUniqueInput
  }

  /**
   * Symbol findFirst
   */
  export type SymbolFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Symbol
     */
    select?: SymbolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Symbol
     */
    omit?: SymbolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SymbolInclude<ExtArgs> | null
    /**
     * Filter, which Symbol to fetch.
     */
    where?: SymbolWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Symbols to fetch.
     */
    orderBy?: SymbolOrderByWithRelationInput | SymbolOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Symbols.
     */
    cursor?: SymbolWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Symbols from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Symbols.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Symbols.
     */
    distinct?: SymbolScalarFieldEnum | SymbolScalarFieldEnum[]
  }

  /**
   * Symbol findFirstOrThrow
   */
  export type SymbolFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Symbol
     */
    select?: SymbolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Symbol
     */
    omit?: SymbolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SymbolInclude<ExtArgs> | null
    /**
     * Filter, which Symbol to fetch.
     */
    where?: SymbolWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Symbols to fetch.
     */
    orderBy?: SymbolOrderByWithRelationInput | SymbolOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Symbols.
     */
    cursor?: SymbolWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Symbols from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Symbols.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Symbols.
     */
    distinct?: SymbolScalarFieldEnum | SymbolScalarFieldEnum[]
  }

  /**
   * Symbol findMany
   */
  export type SymbolFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Symbol
     */
    select?: SymbolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Symbol
     */
    omit?: SymbolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SymbolInclude<ExtArgs> | null
    /**
     * Filter, which Symbols to fetch.
     */
    where?: SymbolWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Symbols to fetch.
     */
    orderBy?: SymbolOrderByWithRelationInput | SymbolOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Symbols.
     */
    cursor?: SymbolWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Symbols from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Symbols.
     */
    skip?: number
    distinct?: SymbolScalarFieldEnum | SymbolScalarFieldEnum[]
  }

  /**
   * Symbol create
   */
  export type SymbolCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Symbol
     */
    select?: SymbolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Symbol
     */
    omit?: SymbolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SymbolInclude<ExtArgs> | null
    /**
     * The data needed to create a Symbol.
     */
    data: XOR<SymbolCreateInput, SymbolUncheckedCreateInput>
  }

  /**
   * Symbol createMany
   */
  export type SymbolCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Symbols.
     */
    data: SymbolCreateManyInput | SymbolCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Symbol createManyAndReturn
   */
  export type SymbolCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Symbol
     */
    select?: SymbolSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Symbol
     */
    omit?: SymbolOmit<ExtArgs> | null
    /**
     * The data used to create many Symbols.
     */
    data: SymbolCreateManyInput | SymbolCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Symbol update
   */
  export type SymbolUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Symbol
     */
    select?: SymbolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Symbol
     */
    omit?: SymbolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SymbolInclude<ExtArgs> | null
    /**
     * The data needed to update a Symbol.
     */
    data: XOR<SymbolUpdateInput, SymbolUncheckedUpdateInput>
    /**
     * Choose, which Symbol to update.
     */
    where: SymbolWhereUniqueInput
  }

  /**
   * Symbol updateMany
   */
  export type SymbolUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Symbols.
     */
    data: XOR<SymbolUpdateManyMutationInput, SymbolUncheckedUpdateManyInput>
    /**
     * Filter which Symbols to update
     */
    where?: SymbolWhereInput
    /**
     * Limit how many Symbols to update.
     */
    limit?: number
  }

  /**
   * Symbol updateManyAndReturn
   */
  export type SymbolUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Symbol
     */
    select?: SymbolSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Symbol
     */
    omit?: SymbolOmit<ExtArgs> | null
    /**
     * The data used to update Symbols.
     */
    data: XOR<SymbolUpdateManyMutationInput, SymbolUncheckedUpdateManyInput>
    /**
     * Filter which Symbols to update
     */
    where?: SymbolWhereInput
    /**
     * Limit how many Symbols to update.
     */
    limit?: number
  }

  /**
   * Symbol upsert
   */
  export type SymbolUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Symbol
     */
    select?: SymbolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Symbol
     */
    omit?: SymbolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SymbolInclude<ExtArgs> | null
    /**
     * The filter to search for the Symbol to update in case it exists.
     */
    where: SymbolWhereUniqueInput
    /**
     * In case the Symbol found by the `where` argument doesn't exist, create a new Symbol with this data.
     */
    create: XOR<SymbolCreateInput, SymbolUncheckedCreateInput>
    /**
     * In case the Symbol was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SymbolUpdateInput, SymbolUncheckedUpdateInput>
  }

  /**
   * Symbol delete
   */
  export type SymbolDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Symbol
     */
    select?: SymbolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Symbol
     */
    omit?: SymbolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SymbolInclude<ExtArgs> | null
    /**
     * Filter which Symbol to delete.
     */
    where: SymbolWhereUniqueInput
  }

  /**
   * Symbol deleteMany
   */
  export type SymbolDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Symbols to delete
     */
    where?: SymbolWhereInput
    /**
     * Limit how many Symbols to delete.
     */
    limit?: number
  }

  /**
   * Symbol.portfolios
   */
  export type Symbol$portfoliosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Portfolio
     */
    select?: PortfolioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Portfolio
     */
    omit?: PortfolioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PortfolioInclude<ExtArgs> | null
    where?: PortfolioWhereInput
    orderBy?: PortfolioOrderByWithRelationInput | PortfolioOrderByWithRelationInput[]
    cursor?: PortfolioWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PortfolioScalarFieldEnum | PortfolioScalarFieldEnum[]
  }

  /**
   * Symbol.watchlists
   */
  export type Symbol$watchlistsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Watchlist
     */
    select?: WatchlistSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Watchlist
     */
    omit?: WatchlistOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WatchlistInclude<ExtArgs> | null
    where?: WatchlistWhereInput
    orderBy?: WatchlistOrderByWithRelationInput | WatchlistOrderByWithRelationInput[]
    cursor?: WatchlistWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WatchlistScalarFieldEnum | WatchlistScalarFieldEnum[]
  }

  /**
   * Symbol without action
   */
  export type SymbolDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Symbol
     */
    select?: SymbolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Symbol
     */
    omit?: SymbolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SymbolInclude<ExtArgs> | null
  }


  /**
   * Model Portfolio
   */

  export type AggregatePortfolio = {
    _count: PortfolioCountAggregateOutputType | null
    _min: PortfolioMinAggregateOutputType | null
    _max: PortfolioMaxAggregateOutputType | null
  }

  export type PortfolioMinAggregateOutputType = {
    id: string | null
    name: string | null
    userId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PortfolioMaxAggregateOutputType = {
    id: string | null
    name: string | null
    userId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PortfolioCountAggregateOutputType = {
    id: number
    name: number
    userId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type PortfolioMinAggregateInputType = {
    id?: true
    name?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PortfolioMaxAggregateInputType = {
    id?: true
    name?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PortfolioCountAggregateInputType = {
    id?: true
    name?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PortfolioAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Portfolio to aggregate.
     */
    where?: PortfolioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Portfolios to fetch.
     */
    orderBy?: PortfolioOrderByWithRelationInput | PortfolioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PortfolioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Portfolios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Portfolios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Portfolios
    **/
    _count?: true | PortfolioCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PortfolioMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PortfolioMaxAggregateInputType
  }

  export type GetPortfolioAggregateType<T extends PortfolioAggregateArgs> = {
        [P in keyof T & keyof AggregatePortfolio]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePortfolio[P]>
      : GetScalarType<T[P], AggregatePortfolio[P]>
  }




  export type PortfolioGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PortfolioWhereInput
    orderBy?: PortfolioOrderByWithAggregationInput | PortfolioOrderByWithAggregationInput[]
    by: PortfolioScalarFieldEnum[] | PortfolioScalarFieldEnum
    having?: PortfolioScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PortfolioCountAggregateInputType | true
    _min?: PortfolioMinAggregateInputType
    _max?: PortfolioMaxAggregateInputType
  }

  export type PortfolioGroupByOutputType = {
    id: string
    name: string
    userId: string
    createdAt: Date
    updatedAt: Date
    _count: PortfolioCountAggregateOutputType | null
    _min: PortfolioMinAggregateOutputType | null
    _max: PortfolioMaxAggregateOutputType | null
  }

  type GetPortfolioGroupByPayload<T extends PortfolioGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PortfolioGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PortfolioGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PortfolioGroupByOutputType[P]>
            : GetScalarType<T[P], PortfolioGroupByOutputType[P]>
        }
      >
    >


  export type PortfolioSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    symbols?: boolean | Portfolio$symbolsArgs<ExtArgs>
    _count?: boolean | PortfolioCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["portfolio"]>

  export type PortfolioSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["portfolio"]>

  export type PortfolioSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["portfolio"]>

  export type PortfolioSelectScalar = {
    id?: boolean
    name?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type PortfolioOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "userId" | "createdAt" | "updatedAt", ExtArgs["result"]["portfolio"]>
  export type PortfolioInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    symbols?: boolean | Portfolio$symbolsArgs<ExtArgs>
    _count?: boolean | PortfolioCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PortfolioIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type PortfolioIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $PortfolioPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Portfolio"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      symbols: Prisma.$SymbolPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      userId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["portfolio"]>
    composites: {}
  }

  type PortfolioGetPayload<S extends boolean | null | undefined | PortfolioDefaultArgs> = $Result.GetResult<Prisma.$PortfolioPayload, S>

  type PortfolioCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PortfolioFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PortfolioCountAggregateInputType | true
    }

  export interface PortfolioDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Portfolio'], meta: { name: 'Portfolio' } }
    /**
     * Find zero or one Portfolio that matches the filter.
     * @param {PortfolioFindUniqueArgs} args - Arguments to find a Portfolio
     * @example
     * // Get one Portfolio
     * const portfolio = await prisma.portfolio.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PortfolioFindUniqueArgs>(args: SelectSubset<T, PortfolioFindUniqueArgs<ExtArgs>>): Prisma__PortfolioClient<$Result.GetResult<Prisma.$PortfolioPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Portfolio that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PortfolioFindUniqueOrThrowArgs} args - Arguments to find a Portfolio
     * @example
     * // Get one Portfolio
     * const portfolio = await prisma.portfolio.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PortfolioFindUniqueOrThrowArgs>(args: SelectSubset<T, PortfolioFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PortfolioClient<$Result.GetResult<Prisma.$PortfolioPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Portfolio that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PortfolioFindFirstArgs} args - Arguments to find a Portfolio
     * @example
     * // Get one Portfolio
     * const portfolio = await prisma.portfolio.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PortfolioFindFirstArgs>(args?: SelectSubset<T, PortfolioFindFirstArgs<ExtArgs>>): Prisma__PortfolioClient<$Result.GetResult<Prisma.$PortfolioPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Portfolio that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PortfolioFindFirstOrThrowArgs} args - Arguments to find a Portfolio
     * @example
     * // Get one Portfolio
     * const portfolio = await prisma.portfolio.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PortfolioFindFirstOrThrowArgs>(args?: SelectSubset<T, PortfolioFindFirstOrThrowArgs<ExtArgs>>): Prisma__PortfolioClient<$Result.GetResult<Prisma.$PortfolioPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Portfolios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PortfolioFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Portfolios
     * const portfolios = await prisma.portfolio.findMany()
     * 
     * // Get first 10 Portfolios
     * const portfolios = await prisma.portfolio.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const portfolioWithIdOnly = await prisma.portfolio.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PortfolioFindManyArgs>(args?: SelectSubset<T, PortfolioFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PortfolioPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Portfolio.
     * @param {PortfolioCreateArgs} args - Arguments to create a Portfolio.
     * @example
     * // Create one Portfolio
     * const Portfolio = await prisma.portfolio.create({
     *   data: {
     *     // ... data to create a Portfolio
     *   }
     * })
     * 
     */
    create<T extends PortfolioCreateArgs>(args: SelectSubset<T, PortfolioCreateArgs<ExtArgs>>): Prisma__PortfolioClient<$Result.GetResult<Prisma.$PortfolioPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Portfolios.
     * @param {PortfolioCreateManyArgs} args - Arguments to create many Portfolios.
     * @example
     * // Create many Portfolios
     * const portfolio = await prisma.portfolio.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PortfolioCreateManyArgs>(args?: SelectSubset<T, PortfolioCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Portfolios and returns the data saved in the database.
     * @param {PortfolioCreateManyAndReturnArgs} args - Arguments to create many Portfolios.
     * @example
     * // Create many Portfolios
     * const portfolio = await prisma.portfolio.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Portfolios and only return the `id`
     * const portfolioWithIdOnly = await prisma.portfolio.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PortfolioCreateManyAndReturnArgs>(args?: SelectSubset<T, PortfolioCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PortfolioPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Portfolio.
     * @param {PortfolioDeleteArgs} args - Arguments to delete one Portfolio.
     * @example
     * // Delete one Portfolio
     * const Portfolio = await prisma.portfolio.delete({
     *   where: {
     *     // ... filter to delete one Portfolio
     *   }
     * })
     * 
     */
    delete<T extends PortfolioDeleteArgs>(args: SelectSubset<T, PortfolioDeleteArgs<ExtArgs>>): Prisma__PortfolioClient<$Result.GetResult<Prisma.$PortfolioPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Portfolio.
     * @param {PortfolioUpdateArgs} args - Arguments to update one Portfolio.
     * @example
     * // Update one Portfolio
     * const portfolio = await prisma.portfolio.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PortfolioUpdateArgs>(args: SelectSubset<T, PortfolioUpdateArgs<ExtArgs>>): Prisma__PortfolioClient<$Result.GetResult<Prisma.$PortfolioPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Portfolios.
     * @param {PortfolioDeleteManyArgs} args - Arguments to filter Portfolios to delete.
     * @example
     * // Delete a few Portfolios
     * const { count } = await prisma.portfolio.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PortfolioDeleteManyArgs>(args?: SelectSubset<T, PortfolioDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Portfolios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PortfolioUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Portfolios
     * const portfolio = await prisma.portfolio.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PortfolioUpdateManyArgs>(args: SelectSubset<T, PortfolioUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Portfolios and returns the data updated in the database.
     * @param {PortfolioUpdateManyAndReturnArgs} args - Arguments to update many Portfolios.
     * @example
     * // Update many Portfolios
     * const portfolio = await prisma.portfolio.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Portfolios and only return the `id`
     * const portfolioWithIdOnly = await prisma.portfolio.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PortfolioUpdateManyAndReturnArgs>(args: SelectSubset<T, PortfolioUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PortfolioPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Portfolio.
     * @param {PortfolioUpsertArgs} args - Arguments to update or create a Portfolio.
     * @example
     * // Update or create a Portfolio
     * const portfolio = await prisma.portfolio.upsert({
     *   create: {
     *     // ... data to create a Portfolio
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Portfolio we want to update
     *   }
     * })
     */
    upsert<T extends PortfolioUpsertArgs>(args: SelectSubset<T, PortfolioUpsertArgs<ExtArgs>>): Prisma__PortfolioClient<$Result.GetResult<Prisma.$PortfolioPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Portfolios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PortfolioCountArgs} args - Arguments to filter Portfolios to count.
     * @example
     * // Count the number of Portfolios
     * const count = await prisma.portfolio.count({
     *   where: {
     *     // ... the filter for the Portfolios we want to count
     *   }
     * })
    **/
    count<T extends PortfolioCountArgs>(
      args?: Subset<T, PortfolioCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PortfolioCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Portfolio.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PortfolioAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PortfolioAggregateArgs>(args: Subset<T, PortfolioAggregateArgs>): Prisma.PrismaPromise<GetPortfolioAggregateType<T>>

    /**
     * Group by Portfolio.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PortfolioGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PortfolioGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PortfolioGroupByArgs['orderBy'] }
        : { orderBy?: PortfolioGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PortfolioGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPortfolioGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Portfolio model
   */
  readonly fields: PortfolioFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Portfolio.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PortfolioClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    symbols<T extends Portfolio$symbolsArgs<ExtArgs> = {}>(args?: Subset<T, Portfolio$symbolsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SymbolPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Portfolio model
   */
  interface PortfolioFieldRefs {
    readonly id: FieldRef<"Portfolio", 'String'>
    readonly name: FieldRef<"Portfolio", 'String'>
    readonly userId: FieldRef<"Portfolio", 'String'>
    readonly createdAt: FieldRef<"Portfolio", 'DateTime'>
    readonly updatedAt: FieldRef<"Portfolio", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Portfolio findUnique
   */
  export type PortfolioFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Portfolio
     */
    select?: PortfolioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Portfolio
     */
    omit?: PortfolioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PortfolioInclude<ExtArgs> | null
    /**
     * Filter, which Portfolio to fetch.
     */
    where: PortfolioWhereUniqueInput
  }

  /**
   * Portfolio findUniqueOrThrow
   */
  export type PortfolioFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Portfolio
     */
    select?: PortfolioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Portfolio
     */
    omit?: PortfolioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PortfolioInclude<ExtArgs> | null
    /**
     * Filter, which Portfolio to fetch.
     */
    where: PortfolioWhereUniqueInput
  }

  /**
   * Portfolio findFirst
   */
  export type PortfolioFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Portfolio
     */
    select?: PortfolioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Portfolio
     */
    omit?: PortfolioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PortfolioInclude<ExtArgs> | null
    /**
     * Filter, which Portfolio to fetch.
     */
    where?: PortfolioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Portfolios to fetch.
     */
    orderBy?: PortfolioOrderByWithRelationInput | PortfolioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Portfolios.
     */
    cursor?: PortfolioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Portfolios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Portfolios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Portfolios.
     */
    distinct?: PortfolioScalarFieldEnum | PortfolioScalarFieldEnum[]
  }

  /**
   * Portfolio findFirstOrThrow
   */
  export type PortfolioFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Portfolio
     */
    select?: PortfolioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Portfolio
     */
    omit?: PortfolioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PortfolioInclude<ExtArgs> | null
    /**
     * Filter, which Portfolio to fetch.
     */
    where?: PortfolioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Portfolios to fetch.
     */
    orderBy?: PortfolioOrderByWithRelationInput | PortfolioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Portfolios.
     */
    cursor?: PortfolioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Portfolios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Portfolios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Portfolios.
     */
    distinct?: PortfolioScalarFieldEnum | PortfolioScalarFieldEnum[]
  }

  /**
   * Portfolio findMany
   */
  export type PortfolioFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Portfolio
     */
    select?: PortfolioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Portfolio
     */
    omit?: PortfolioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PortfolioInclude<ExtArgs> | null
    /**
     * Filter, which Portfolios to fetch.
     */
    where?: PortfolioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Portfolios to fetch.
     */
    orderBy?: PortfolioOrderByWithRelationInput | PortfolioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Portfolios.
     */
    cursor?: PortfolioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Portfolios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Portfolios.
     */
    skip?: number
    distinct?: PortfolioScalarFieldEnum | PortfolioScalarFieldEnum[]
  }

  /**
   * Portfolio create
   */
  export type PortfolioCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Portfolio
     */
    select?: PortfolioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Portfolio
     */
    omit?: PortfolioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PortfolioInclude<ExtArgs> | null
    /**
     * The data needed to create a Portfolio.
     */
    data: XOR<PortfolioCreateInput, PortfolioUncheckedCreateInput>
  }

  /**
   * Portfolio createMany
   */
  export type PortfolioCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Portfolios.
     */
    data: PortfolioCreateManyInput | PortfolioCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Portfolio createManyAndReturn
   */
  export type PortfolioCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Portfolio
     */
    select?: PortfolioSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Portfolio
     */
    omit?: PortfolioOmit<ExtArgs> | null
    /**
     * The data used to create many Portfolios.
     */
    data: PortfolioCreateManyInput | PortfolioCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PortfolioIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Portfolio update
   */
  export type PortfolioUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Portfolio
     */
    select?: PortfolioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Portfolio
     */
    omit?: PortfolioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PortfolioInclude<ExtArgs> | null
    /**
     * The data needed to update a Portfolio.
     */
    data: XOR<PortfolioUpdateInput, PortfolioUncheckedUpdateInput>
    /**
     * Choose, which Portfolio to update.
     */
    where: PortfolioWhereUniqueInput
  }

  /**
   * Portfolio updateMany
   */
  export type PortfolioUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Portfolios.
     */
    data: XOR<PortfolioUpdateManyMutationInput, PortfolioUncheckedUpdateManyInput>
    /**
     * Filter which Portfolios to update
     */
    where?: PortfolioWhereInput
    /**
     * Limit how many Portfolios to update.
     */
    limit?: number
  }

  /**
   * Portfolio updateManyAndReturn
   */
  export type PortfolioUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Portfolio
     */
    select?: PortfolioSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Portfolio
     */
    omit?: PortfolioOmit<ExtArgs> | null
    /**
     * The data used to update Portfolios.
     */
    data: XOR<PortfolioUpdateManyMutationInput, PortfolioUncheckedUpdateManyInput>
    /**
     * Filter which Portfolios to update
     */
    where?: PortfolioWhereInput
    /**
     * Limit how many Portfolios to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PortfolioIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Portfolio upsert
   */
  export type PortfolioUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Portfolio
     */
    select?: PortfolioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Portfolio
     */
    omit?: PortfolioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PortfolioInclude<ExtArgs> | null
    /**
     * The filter to search for the Portfolio to update in case it exists.
     */
    where: PortfolioWhereUniqueInput
    /**
     * In case the Portfolio found by the `where` argument doesn't exist, create a new Portfolio with this data.
     */
    create: XOR<PortfolioCreateInput, PortfolioUncheckedCreateInput>
    /**
     * In case the Portfolio was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PortfolioUpdateInput, PortfolioUncheckedUpdateInput>
  }

  /**
   * Portfolio delete
   */
  export type PortfolioDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Portfolio
     */
    select?: PortfolioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Portfolio
     */
    omit?: PortfolioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PortfolioInclude<ExtArgs> | null
    /**
     * Filter which Portfolio to delete.
     */
    where: PortfolioWhereUniqueInput
  }

  /**
   * Portfolio deleteMany
   */
  export type PortfolioDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Portfolios to delete
     */
    where?: PortfolioWhereInput
    /**
     * Limit how many Portfolios to delete.
     */
    limit?: number
  }

  /**
   * Portfolio.symbols
   */
  export type Portfolio$symbolsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Symbol
     */
    select?: SymbolSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Symbol
     */
    omit?: SymbolOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SymbolInclude<ExtArgs> | null
    where?: SymbolWhereInput
    orderBy?: SymbolOrderByWithRelationInput | SymbolOrderByWithRelationInput[]
    cursor?: SymbolWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SymbolScalarFieldEnum | SymbolScalarFieldEnum[]
  }

  /**
   * Portfolio without action
   */
  export type PortfolioDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Portfolio
     */
    select?: PortfolioSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Portfolio
     */
    omit?: PortfolioOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PortfolioInclude<ExtArgs> | null
  }


  /**
   * Model MarketData
   */

  export type AggregateMarketData = {
    _count: MarketDataCountAggregateOutputType | null
    _avg: MarketDataAvgAggregateOutputType | null
    _sum: MarketDataSumAggregateOutputType | null
    _min: MarketDataMinAggregateOutputType | null
    _max: MarketDataMaxAggregateOutputType | null
  }

  export type MarketDataAvgAggregateOutputType = {
    price: number | null
    change: number | null
    market_cap: number | null
  }

  export type MarketDataSumAggregateOutputType = {
    price: number | null
    change: number | null
    market_cap: number | null
  }

  export type MarketDataMinAggregateOutputType = {
    id: string | null
    symbol: string | null
    name: string | null
    price: number | null
    change: number | null
    volume: string | null
    market_cap: number | null
    timestamp: Date | null
    logo_url: string | null
  }

  export type MarketDataMaxAggregateOutputType = {
    id: string | null
    symbol: string | null
    name: string | null
    price: number | null
    change: number | null
    volume: string | null
    market_cap: number | null
    timestamp: Date | null
    logo_url: string | null
  }

  export type MarketDataCountAggregateOutputType = {
    id: number
    symbol: number
    name: number
    price: number
    change: number
    volume: number
    market_cap: number
    timestamp: number
    logo_url: number
    _all: number
  }


  export type MarketDataAvgAggregateInputType = {
    price?: true
    change?: true
    market_cap?: true
  }

  export type MarketDataSumAggregateInputType = {
    price?: true
    change?: true
    market_cap?: true
  }

  export type MarketDataMinAggregateInputType = {
    id?: true
    symbol?: true
    name?: true
    price?: true
    change?: true
    volume?: true
    market_cap?: true
    timestamp?: true
    logo_url?: true
  }

  export type MarketDataMaxAggregateInputType = {
    id?: true
    symbol?: true
    name?: true
    price?: true
    change?: true
    volume?: true
    market_cap?: true
    timestamp?: true
    logo_url?: true
  }

  export type MarketDataCountAggregateInputType = {
    id?: true
    symbol?: true
    name?: true
    price?: true
    change?: true
    volume?: true
    market_cap?: true
    timestamp?: true
    logo_url?: true
    _all?: true
  }

  export type MarketDataAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MarketData to aggregate.
     */
    where?: MarketDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MarketData to fetch.
     */
    orderBy?: MarketDataOrderByWithRelationInput | MarketDataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MarketDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MarketData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MarketData.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MarketData
    **/
    _count?: true | MarketDataCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MarketDataAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MarketDataSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MarketDataMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MarketDataMaxAggregateInputType
  }

  export type GetMarketDataAggregateType<T extends MarketDataAggregateArgs> = {
        [P in keyof T & keyof AggregateMarketData]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMarketData[P]>
      : GetScalarType<T[P], AggregateMarketData[P]>
  }




  export type MarketDataGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MarketDataWhereInput
    orderBy?: MarketDataOrderByWithAggregationInput | MarketDataOrderByWithAggregationInput[]
    by: MarketDataScalarFieldEnum[] | MarketDataScalarFieldEnum
    having?: MarketDataScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MarketDataCountAggregateInputType | true
    _avg?: MarketDataAvgAggregateInputType
    _sum?: MarketDataSumAggregateInputType
    _min?: MarketDataMinAggregateInputType
    _max?: MarketDataMaxAggregateInputType
  }

  export type MarketDataGroupByOutputType = {
    id: string
    symbol: string
    name: string | null
    price: number
    change: number
    volume: string
    market_cap: number
    timestamp: Date
    logo_url: string | null
    _count: MarketDataCountAggregateOutputType | null
    _avg: MarketDataAvgAggregateOutputType | null
    _sum: MarketDataSumAggregateOutputType | null
    _min: MarketDataMinAggregateOutputType | null
    _max: MarketDataMaxAggregateOutputType | null
  }

  type GetMarketDataGroupByPayload<T extends MarketDataGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MarketDataGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MarketDataGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MarketDataGroupByOutputType[P]>
            : GetScalarType<T[P], MarketDataGroupByOutputType[P]>
        }
      >
    >


  export type MarketDataSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    symbol?: boolean
    name?: boolean
    price?: boolean
    change?: boolean
    volume?: boolean
    market_cap?: boolean
    timestamp?: boolean
    logo_url?: boolean
  }, ExtArgs["result"]["marketData"]>

  export type MarketDataSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    symbol?: boolean
    name?: boolean
    price?: boolean
    change?: boolean
    volume?: boolean
    market_cap?: boolean
    timestamp?: boolean
    logo_url?: boolean
  }, ExtArgs["result"]["marketData"]>

  export type MarketDataSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    symbol?: boolean
    name?: boolean
    price?: boolean
    change?: boolean
    volume?: boolean
    market_cap?: boolean
    timestamp?: boolean
    logo_url?: boolean
  }, ExtArgs["result"]["marketData"]>

  export type MarketDataSelectScalar = {
    id?: boolean
    symbol?: boolean
    name?: boolean
    price?: boolean
    change?: boolean
    volume?: boolean
    market_cap?: boolean
    timestamp?: boolean
    logo_url?: boolean
  }

  export type MarketDataOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "symbol" | "name" | "price" | "change" | "volume" | "market_cap" | "timestamp" | "logo_url", ExtArgs["result"]["marketData"]>

  export type $MarketDataPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MarketData"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      symbol: string
      name: string | null
      price: number
      change: number
      volume: string
      market_cap: number
      timestamp: Date
      logo_url: string | null
    }, ExtArgs["result"]["marketData"]>
    composites: {}
  }

  type MarketDataGetPayload<S extends boolean | null | undefined | MarketDataDefaultArgs> = $Result.GetResult<Prisma.$MarketDataPayload, S>

  type MarketDataCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MarketDataFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MarketDataCountAggregateInputType | true
    }

  export interface MarketDataDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MarketData'], meta: { name: 'MarketData' } }
    /**
     * Find zero or one MarketData that matches the filter.
     * @param {MarketDataFindUniqueArgs} args - Arguments to find a MarketData
     * @example
     * // Get one MarketData
     * const marketData = await prisma.marketData.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MarketDataFindUniqueArgs>(args: SelectSubset<T, MarketDataFindUniqueArgs<ExtArgs>>): Prisma__MarketDataClient<$Result.GetResult<Prisma.$MarketDataPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one MarketData that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MarketDataFindUniqueOrThrowArgs} args - Arguments to find a MarketData
     * @example
     * // Get one MarketData
     * const marketData = await prisma.marketData.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MarketDataFindUniqueOrThrowArgs>(args: SelectSubset<T, MarketDataFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MarketDataClient<$Result.GetResult<Prisma.$MarketDataPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MarketData that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MarketDataFindFirstArgs} args - Arguments to find a MarketData
     * @example
     * // Get one MarketData
     * const marketData = await prisma.marketData.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MarketDataFindFirstArgs>(args?: SelectSubset<T, MarketDataFindFirstArgs<ExtArgs>>): Prisma__MarketDataClient<$Result.GetResult<Prisma.$MarketDataPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MarketData that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MarketDataFindFirstOrThrowArgs} args - Arguments to find a MarketData
     * @example
     * // Get one MarketData
     * const marketData = await prisma.marketData.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MarketDataFindFirstOrThrowArgs>(args?: SelectSubset<T, MarketDataFindFirstOrThrowArgs<ExtArgs>>): Prisma__MarketDataClient<$Result.GetResult<Prisma.$MarketDataPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more MarketData that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MarketDataFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MarketData
     * const marketData = await prisma.marketData.findMany()
     * 
     * // Get first 10 MarketData
     * const marketData = await prisma.marketData.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const marketDataWithIdOnly = await prisma.marketData.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MarketDataFindManyArgs>(args?: SelectSubset<T, MarketDataFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MarketDataPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a MarketData.
     * @param {MarketDataCreateArgs} args - Arguments to create a MarketData.
     * @example
     * // Create one MarketData
     * const MarketData = await prisma.marketData.create({
     *   data: {
     *     // ... data to create a MarketData
     *   }
     * })
     * 
     */
    create<T extends MarketDataCreateArgs>(args: SelectSubset<T, MarketDataCreateArgs<ExtArgs>>): Prisma__MarketDataClient<$Result.GetResult<Prisma.$MarketDataPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many MarketData.
     * @param {MarketDataCreateManyArgs} args - Arguments to create many MarketData.
     * @example
     * // Create many MarketData
     * const marketData = await prisma.marketData.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MarketDataCreateManyArgs>(args?: SelectSubset<T, MarketDataCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many MarketData and returns the data saved in the database.
     * @param {MarketDataCreateManyAndReturnArgs} args - Arguments to create many MarketData.
     * @example
     * // Create many MarketData
     * const marketData = await prisma.marketData.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many MarketData and only return the `id`
     * const marketDataWithIdOnly = await prisma.marketData.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MarketDataCreateManyAndReturnArgs>(args?: SelectSubset<T, MarketDataCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MarketDataPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a MarketData.
     * @param {MarketDataDeleteArgs} args - Arguments to delete one MarketData.
     * @example
     * // Delete one MarketData
     * const MarketData = await prisma.marketData.delete({
     *   where: {
     *     // ... filter to delete one MarketData
     *   }
     * })
     * 
     */
    delete<T extends MarketDataDeleteArgs>(args: SelectSubset<T, MarketDataDeleteArgs<ExtArgs>>): Prisma__MarketDataClient<$Result.GetResult<Prisma.$MarketDataPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one MarketData.
     * @param {MarketDataUpdateArgs} args - Arguments to update one MarketData.
     * @example
     * // Update one MarketData
     * const marketData = await prisma.marketData.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MarketDataUpdateArgs>(args: SelectSubset<T, MarketDataUpdateArgs<ExtArgs>>): Prisma__MarketDataClient<$Result.GetResult<Prisma.$MarketDataPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more MarketData.
     * @param {MarketDataDeleteManyArgs} args - Arguments to filter MarketData to delete.
     * @example
     * // Delete a few MarketData
     * const { count } = await prisma.marketData.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MarketDataDeleteManyArgs>(args?: SelectSubset<T, MarketDataDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MarketData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MarketDataUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MarketData
     * const marketData = await prisma.marketData.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MarketDataUpdateManyArgs>(args: SelectSubset<T, MarketDataUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MarketData and returns the data updated in the database.
     * @param {MarketDataUpdateManyAndReturnArgs} args - Arguments to update many MarketData.
     * @example
     * // Update many MarketData
     * const marketData = await prisma.marketData.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more MarketData and only return the `id`
     * const marketDataWithIdOnly = await prisma.marketData.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MarketDataUpdateManyAndReturnArgs>(args: SelectSubset<T, MarketDataUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MarketDataPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one MarketData.
     * @param {MarketDataUpsertArgs} args - Arguments to update or create a MarketData.
     * @example
     * // Update or create a MarketData
     * const marketData = await prisma.marketData.upsert({
     *   create: {
     *     // ... data to create a MarketData
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MarketData we want to update
     *   }
     * })
     */
    upsert<T extends MarketDataUpsertArgs>(args: SelectSubset<T, MarketDataUpsertArgs<ExtArgs>>): Prisma__MarketDataClient<$Result.GetResult<Prisma.$MarketDataPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of MarketData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MarketDataCountArgs} args - Arguments to filter MarketData to count.
     * @example
     * // Count the number of MarketData
     * const count = await prisma.marketData.count({
     *   where: {
     *     // ... the filter for the MarketData we want to count
     *   }
     * })
    **/
    count<T extends MarketDataCountArgs>(
      args?: Subset<T, MarketDataCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MarketDataCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MarketData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MarketDataAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MarketDataAggregateArgs>(args: Subset<T, MarketDataAggregateArgs>): Prisma.PrismaPromise<GetMarketDataAggregateType<T>>

    /**
     * Group by MarketData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MarketDataGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MarketDataGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MarketDataGroupByArgs['orderBy'] }
        : { orderBy?: MarketDataGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MarketDataGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMarketDataGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MarketData model
   */
  readonly fields: MarketDataFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MarketData.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MarketDataClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MarketData model
   */
  interface MarketDataFieldRefs {
    readonly id: FieldRef<"MarketData", 'String'>
    readonly symbol: FieldRef<"MarketData", 'String'>
    readonly name: FieldRef<"MarketData", 'String'>
    readonly price: FieldRef<"MarketData", 'Float'>
    readonly change: FieldRef<"MarketData", 'Float'>
    readonly volume: FieldRef<"MarketData", 'String'>
    readonly market_cap: FieldRef<"MarketData", 'Float'>
    readonly timestamp: FieldRef<"MarketData", 'DateTime'>
    readonly logo_url: FieldRef<"MarketData", 'String'>
  }
    

  // Custom InputTypes
  /**
   * MarketData findUnique
   */
  export type MarketDataFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MarketData
     */
    select?: MarketDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MarketData
     */
    omit?: MarketDataOmit<ExtArgs> | null
    /**
     * Filter, which MarketData to fetch.
     */
    where: MarketDataWhereUniqueInput
  }

  /**
   * MarketData findUniqueOrThrow
   */
  export type MarketDataFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MarketData
     */
    select?: MarketDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MarketData
     */
    omit?: MarketDataOmit<ExtArgs> | null
    /**
     * Filter, which MarketData to fetch.
     */
    where: MarketDataWhereUniqueInput
  }

  /**
   * MarketData findFirst
   */
  export type MarketDataFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MarketData
     */
    select?: MarketDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MarketData
     */
    omit?: MarketDataOmit<ExtArgs> | null
    /**
     * Filter, which MarketData to fetch.
     */
    where?: MarketDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MarketData to fetch.
     */
    orderBy?: MarketDataOrderByWithRelationInput | MarketDataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MarketData.
     */
    cursor?: MarketDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MarketData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MarketData.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MarketData.
     */
    distinct?: MarketDataScalarFieldEnum | MarketDataScalarFieldEnum[]
  }

  /**
   * MarketData findFirstOrThrow
   */
  export type MarketDataFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MarketData
     */
    select?: MarketDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MarketData
     */
    omit?: MarketDataOmit<ExtArgs> | null
    /**
     * Filter, which MarketData to fetch.
     */
    where?: MarketDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MarketData to fetch.
     */
    orderBy?: MarketDataOrderByWithRelationInput | MarketDataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MarketData.
     */
    cursor?: MarketDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MarketData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MarketData.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MarketData.
     */
    distinct?: MarketDataScalarFieldEnum | MarketDataScalarFieldEnum[]
  }

  /**
   * MarketData findMany
   */
  export type MarketDataFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MarketData
     */
    select?: MarketDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MarketData
     */
    omit?: MarketDataOmit<ExtArgs> | null
    /**
     * Filter, which MarketData to fetch.
     */
    where?: MarketDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MarketData to fetch.
     */
    orderBy?: MarketDataOrderByWithRelationInput | MarketDataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MarketData.
     */
    cursor?: MarketDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MarketData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MarketData.
     */
    skip?: number
    distinct?: MarketDataScalarFieldEnum | MarketDataScalarFieldEnum[]
  }

  /**
   * MarketData create
   */
  export type MarketDataCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MarketData
     */
    select?: MarketDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MarketData
     */
    omit?: MarketDataOmit<ExtArgs> | null
    /**
     * The data needed to create a MarketData.
     */
    data: XOR<MarketDataCreateInput, MarketDataUncheckedCreateInput>
  }

  /**
   * MarketData createMany
   */
  export type MarketDataCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MarketData.
     */
    data: MarketDataCreateManyInput | MarketDataCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MarketData createManyAndReturn
   */
  export type MarketDataCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MarketData
     */
    select?: MarketDataSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MarketData
     */
    omit?: MarketDataOmit<ExtArgs> | null
    /**
     * The data used to create many MarketData.
     */
    data: MarketDataCreateManyInput | MarketDataCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MarketData update
   */
  export type MarketDataUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MarketData
     */
    select?: MarketDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MarketData
     */
    omit?: MarketDataOmit<ExtArgs> | null
    /**
     * The data needed to update a MarketData.
     */
    data: XOR<MarketDataUpdateInput, MarketDataUncheckedUpdateInput>
    /**
     * Choose, which MarketData to update.
     */
    where: MarketDataWhereUniqueInput
  }

  /**
   * MarketData updateMany
   */
  export type MarketDataUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MarketData.
     */
    data: XOR<MarketDataUpdateManyMutationInput, MarketDataUncheckedUpdateManyInput>
    /**
     * Filter which MarketData to update
     */
    where?: MarketDataWhereInput
    /**
     * Limit how many MarketData to update.
     */
    limit?: number
  }

  /**
   * MarketData updateManyAndReturn
   */
  export type MarketDataUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MarketData
     */
    select?: MarketDataSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MarketData
     */
    omit?: MarketDataOmit<ExtArgs> | null
    /**
     * The data used to update MarketData.
     */
    data: XOR<MarketDataUpdateManyMutationInput, MarketDataUncheckedUpdateManyInput>
    /**
     * Filter which MarketData to update
     */
    where?: MarketDataWhereInput
    /**
     * Limit how many MarketData to update.
     */
    limit?: number
  }

  /**
   * MarketData upsert
   */
  export type MarketDataUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MarketData
     */
    select?: MarketDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MarketData
     */
    omit?: MarketDataOmit<ExtArgs> | null
    /**
     * The filter to search for the MarketData to update in case it exists.
     */
    where: MarketDataWhereUniqueInput
    /**
     * In case the MarketData found by the `where` argument doesn't exist, create a new MarketData with this data.
     */
    create: XOR<MarketDataCreateInput, MarketDataUncheckedCreateInput>
    /**
     * In case the MarketData was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MarketDataUpdateInput, MarketDataUncheckedUpdateInput>
  }

  /**
   * MarketData delete
   */
  export type MarketDataDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MarketData
     */
    select?: MarketDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MarketData
     */
    omit?: MarketDataOmit<ExtArgs> | null
    /**
     * Filter which MarketData to delete.
     */
    where: MarketDataWhereUniqueInput
  }

  /**
   * MarketData deleteMany
   */
  export type MarketDataDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MarketData to delete
     */
    where?: MarketDataWhereInput
    /**
     * Limit how many MarketData to delete.
     */
    limit?: number
  }

  /**
   * MarketData without action
   */
  export type MarketDataDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MarketData
     */
    select?: MarketDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MarketData
     */
    omit?: MarketDataOmit<ExtArgs> | null
  }


  /**
   * Model apiLimit
   */

  export type AggregateApiLimit = {
    _count: ApiLimitCountAggregateOutputType | null
    _avg: ApiLimitAvgAggregateOutputType | null
    _sum: ApiLimitSumAggregateOutputType | null
    _min: ApiLimitMinAggregateOutputType | null
    _max: ApiLimitMaxAggregateOutputType | null
  }

  export type ApiLimitAvgAggregateOutputType = {
    dailyLimit: number | null
    requestCount: number | null
  }

  export type ApiLimitSumAggregateOutputType = {
    dailyLimit: number | null
    requestCount: number | null
  }

  export type ApiLimitMinAggregateOutputType = {
    id: string | null
    apiName: string | null
    dailyLimit: number | null
    requestCount: number | null
    lastReset: Date | null
  }

  export type ApiLimitMaxAggregateOutputType = {
    id: string | null
    apiName: string | null
    dailyLimit: number | null
    requestCount: number | null
    lastReset: Date | null
  }

  export type ApiLimitCountAggregateOutputType = {
    id: number
    apiName: number
    dailyLimit: number
    requestCount: number
    lastReset: number
    _all: number
  }


  export type ApiLimitAvgAggregateInputType = {
    dailyLimit?: true
    requestCount?: true
  }

  export type ApiLimitSumAggregateInputType = {
    dailyLimit?: true
    requestCount?: true
  }

  export type ApiLimitMinAggregateInputType = {
    id?: true
    apiName?: true
    dailyLimit?: true
    requestCount?: true
    lastReset?: true
  }

  export type ApiLimitMaxAggregateInputType = {
    id?: true
    apiName?: true
    dailyLimit?: true
    requestCount?: true
    lastReset?: true
  }

  export type ApiLimitCountAggregateInputType = {
    id?: true
    apiName?: true
    dailyLimit?: true
    requestCount?: true
    lastReset?: true
    _all?: true
  }

  export type ApiLimitAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which apiLimit to aggregate.
     */
    where?: apiLimitWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of apiLimits to fetch.
     */
    orderBy?: apiLimitOrderByWithRelationInput | apiLimitOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: apiLimitWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` apiLimits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` apiLimits.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned apiLimits
    **/
    _count?: true | ApiLimitCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ApiLimitAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ApiLimitSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ApiLimitMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ApiLimitMaxAggregateInputType
  }

  export type GetApiLimitAggregateType<T extends ApiLimitAggregateArgs> = {
        [P in keyof T & keyof AggregateApiLimit]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateApiLimit[P]>
      : GetScalarType<T[P], AggregateApiLimit[P]>
  }




  export type apiLimitGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: apiLimitWhereInput
    orderBy?: apiLimitOrderByWithAggregationInput | apiLimitOrderByWithAggregationInput[]
    by: ApiLimitScalarFieldEnum[] | ApiLimitScalarFieldEnum
    having?: apiLimitScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ApiLimitCountAggregateInputType | true
    _avg?: ApiLimitAvgAggregateInputType
    _sum?: ApiLimitSumAggregateInputType
    _min?: ApiLimitMinAggregateInputType
    _max?: ApiLimitMaxAggregateInputType
  }

  export type ApiLimitGroupByOutputType = {
    id: string
    apiName: string
    dailyLimit: number
    requestCount: number
    lastReset: Date
    _count: ApiLimitCountAggregateOutputType | null
    _avg: ApiLimitAvgAggregateOutputType | null
    _sum: ApiLimitSumAggregateOutputType | null
    _min: ApiLimitMinAggregateOutputType | null
    _max: ApiLimitMaxAggregateOutputType | null
  }

  type GetApiLimitGroupByPayload<T extends apiLimitGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ApiLimitGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ApiLimitGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ApiLimitGroupByOutputType[P]>
            : GetScalarType<T[P], ApiLimitGroupByOutputType[P]>
        }
      >
    >


  export type apiLimitSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    apiName?: boolean
    dailyLimit?: boolean
    requestCount?: boolean
    lastReset?: boolean
  }, ExtArgs["result"]["apiLimit"]>

  export type apiLimitSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    apiName?: boolean
    dailyLimit?: boolean
    requestCount?: boolean
    lastReset?: boolean
  }, ExtArgs["result"]["apiLimit"]>

  export type apiLimitSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    apiName?: boolean
    dailyLimit?: boolean
    requestCount?: boolean
    lastReset?: boolean
  }, ExtArgs["result"]["apiLimit"]>

  export type apiLimitSelectScalar = {
    id?: boolean
    apiName?: boolean
    dailyLimit?: boolean
    requestCount?: boolean
    lastReset?: boolean
  }

  export type apiLimitOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "apiName" | "dailyLimit" | "requestCount" | "lastReset", ExtArgs["result"]["apiLimit"]>

  export type $apiLimitPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "apiLimit"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      apiName: string
      dailyLimit: number
      requestCount: number
      lastReset: Date
    }, ExtArgs["result"]["apiLimit"]>
    composites: {}
  }

  type apiLimitGetPayload<S extends boolean | null | undefined | apiLimitDefaultArgs> = $Result.GetResult<Prisma.$apiLimitPayload, S>

  type apiLimitCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<apiLimitFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ApiLimitCountAggregateInputType | true
    }

  export interface apiLimitDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['apiLimit'], meta: { name: 'apiLimit' } }
    /**
     * Find zero or one ApiLimit that matches the filter.
     * @param {apiLimitFindUniqueArgs} args - Arguments to find a ApiLimit
     * @example
     * // Get one ApiLimit
     * const apiLimit = await prisma.apiLimit.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends apiLimitFindUniqueArgs>(args: SelectSubset<T, apiLimitFindUniqueArgs<ExtArgs>>): Prisma__apiLimitClient<$Result.GetResult<Prisma.$apiLimitPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ApiLimit that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {apiLimitFindUniqueOrThrowArgs} args - Arguments to find a ApiLimit
     * @example
     * // Get one ApiLimit
     * const apiLimit = await prisma.apiLimit.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends apiLimitFindUniqueOrThrowArgs>(args: SelectSubset<T, apiLimitFindUniqueOrThrowArgs<ExtArgs>>): Prisma__apiLimitClient<$Result.GetResult<Prisma.$apiLimitPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ApiLimit that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {apiLimitFindFirstArgs} args - Arguments to find a ApiLimit
     * @example
     * // Get one ApiLimit
     * const apiLimit = await prisma.apiLimit.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends apiLimitFindFirstArgs>(args?: SelectSubset<T, apiLimitFindFirstArgs<ExtArgs>>): Prisma__apiLimitClient<$Result.GetResult<Prisma.$apiLimitPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ApiLimit that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {apiLimitFindFirstOrThrowArgs} args - Arguments to find a ApiLimit
     * @example
     * // Get one ApiLimit
     * const apiLimit = await prisma.apiLimit.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends apiLimitFindFirstOrThrowArgs>(args?: SelectSubset<T, apiLimitFindFirstOrThrowArgs<ExtArgs>>): Prisma__apiLimitClient<$Result.GetResult<Prisma.$apiLimitPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ApiLimits that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {apiLimitFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ApiLimits
     * const apiLimits = await prisma.apiLimit.findMany()
     * 
     * // Get first 10 ApiLimits
     * const apiLimits = await prisma.apiLimit.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const apiLimitWithIdOnly = await prisma.apiLimit.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends apiLimitFindManyArgs>(args?: SelectSubset<T, apiLimitFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$apiLimitPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ApiLimit.
     * @param {apiLimitCreateArgs} args - Arguments to create a ApiLimit.
     * @example
     * // Create one ApiLimit
     * const ApiLimit = await prisma.apiLimit.create({
     *   data: {
     *     // ... data to create a ApiLimit
     *   }
     * })
     * 
     */
    create<T extends apiLimitCreateArgs>(args: SelectSubset<T, apiLimitCreateArgs<ExtArgs>>): Prisma__apiLimitClient<$Result.GetResult<Prisma.$apiLimitPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ApiLimits.
     * @param {apiLimitCreateManyArgs} args - Arguments to create many ApiLimits.
     * @example
     * // Create many ApiLimits
     * const apiLimit = await prisma.apiLimit.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends apiLimitCreateManyArgs>(args?: SelectSubset<T, apiLimitCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ApiLimits and returns the data saved in the database.
     * @param {apiLimitCreateManyAndReturnArgs} args - Arguments to create many ApiLimits.
     * @example
     * // Create many ApiLimits
     * const apiLimit = await prisma.apiLimit.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ApiLimits and only return the `id`
     * const apiLimitWithIdOnly = await prisma.apiLimit.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends apiLimitCreateManyAndReturnArgs>(args?: SelectSubset<T, apiLimitCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$apiLimitPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ApiLimit.
     * @param {apiLimitDeleteArgs} args - Arguments to delete one ApiLimit.
     * @example
     * // Delete one ApiLimit
     * const ApiLimit = await prisma.apiLimit.delete({
     *   where: {
     *     // ... filter to delete one ApiLimit
     *   }
     * })
     * 
     */
    delete<T extends apiLimitDeleteArgs>(args: SelectSubset<T, apiLimitDeleteArgs<ExtArgs>>): Prisma__apiLimitClient<$Result.GetResult<Prisma.$apiLimitPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ApiLimit.
     * @param {apiLimitUpdateArgs} args - Arguments to update one ApiLimit.
     * @example
     * // Update one ApiLimit
     * const apiLimit = await prisma.apiLimit.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends apiLimitUpdateArgs>(args: SelectSubset<T, apiLimitUpdateArgs<ExtArgs>>): Prisma__apiLimitClient<$Result.GetResult<Prisma.$apiLimitPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ApiLimits.
     * @param {apiLimitDeleteManyArgs} args - Arguments to filter ApiLimits to delete.
     * @example
     * // Delete a few ApiLimits
     * const { count } = await prisma.apiLimit.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends apiLimitDeleteManyArgs>(args?: SelectSubset<T, apiLimitDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ApiLimits.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {apiLimitUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ApiLimits
     * const apiLimit = await prisma.apiLimit.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends apiLimitUpdateManyArgs>(args: SelectSubset<T, apiLimitUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ApiLimits and returns the data updated in the database.
     * @param {apiLimitUpdateManyAndReturnArgs} args - Arguments to update many ApiLimits.
     * @example
     * // Update many ApiLimits
     * const apiLimit = await prisma.apiLimit.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ApiLimits and only return the `id`
     * const apiLimitWithIdOnly = await prisma.apiLimit.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends apiLimitUpdateManyAndReturnArgs>(args: SelectSubset<T, apiLimitUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$apiLimitPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ApiLimit.
     * @param {apiLimitUpsertArgs} args - Arguments to update or create a ApiLimit.
     * @example
     * // Update or create a ApiLimit
     * const apiLimit = await prisma.apiLimit.upsert({
     *   create: {
     *     // ... data to create a ApiLimit
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ApiLimit we want to update
     *   }
     * })
     */
    upsert<T extends apiLimitUpsertArgs>(args: SelectSubset<T, apiLimitUpsertArgs<ExtArgs>>): Prisma__apiLimitClient<$Result.GetResult<Prisma.$apiLimitPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ApiLimits.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {apiLimitCountArgs} args - Arguments to filter ApiLimits to count.
     * @example
     * // Count the number of ApiLimits
     * const count = await prisma.apiLimit.count({
     *   where: {
     *     // ... the filter for the ApiLimits we want to count
     *   }
     * })
    **/
    count<T extends apiLimitCountArgs>(
      args?: Subset<T, apiLimitCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ApiLimitCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ApiLimit.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApiLimitAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ApiLimitAggregateArgs>(args: Subset<T, ApiLimitAggregateArgs>): Prisma.PrismaPromise<GetApiLimitAggregateType<T>>

    /**
     * Group by ApiLimit.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {apiLimitGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends apiLimitGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: apiLimitGroupByArgs['orderBy'] }
        : { orderBy?: apiLimitGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, apiLimitGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetApiLimitGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the apiLimit model
   */
  readonly fields: apiLimitFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for apiLimit.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__apiLimitClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the apiLimit model
   */
  interface apiLimitFieldRefs {
    readonly id: FieldRef<"apiLimit", 'String'>
    readonly apiName: FieldRef<"apiLimit", 'String'>
    readonly dailyLimit: FieldRef<"apiLimit", 'Int'>
    readonly requestCount: FieldRef<"apiLimit", 'Int'>
    readonly lastReset: FieldRef<"apiLimit", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * apiLimit findUnique
   */
  export type apiLimitFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the apiLimit
     */
    select?: apiLimitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the apiLimit
     */
    omit?: apiLimitOmit<ExtArgs> | null
    /**
     * Filter, which apiLimit to fetch.
     */
    where: apiLimitWhereUniqueInput
  }

  /**
   * apiLimit findUniqueOrThrow
   */
  export type apiLimitFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the apiLimit
     */
    select?: apiLimitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the apiLimit
     */
    omit?: apiLimitOmit<ExtArgs> | null
    /**
     * Filter, which apiLimit to fetch.
     */
    where: apiLimitWhereUniqueInput
  }

  /**
   * apiLimit findFirst
   */
  export type apiLimitFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the apiLimit
     */
    select?: apiLimitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the apiLimit
     */
    omit?: apiLimitOmit<ExtArgs> | null
    /**
     * Filter, which apiLimit to fetch.
     */
    where?: apiLimitWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of apiLimits to fetch.
     */
    orderBy?: apiLimitOrderByWithRelationInput | apiLimitOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for apiLimits.
     */
    cursor?: apiLimitWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` apiLimits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` apiLimits.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of apiLimits.
     */
    distinct?: ApiLimitScalarFieldEnum | ApiLimitScalarFieldEnum[]
  }

  /**
   * apiLimit findFirstOrThrow
   */
  export type apiLimitFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the apiLimit
     */
    select?: apiLimitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the apiLimit
     */
    omit?: apiLimitOmit<ExtArgs> | null
    /**
     * Filter, which apiLimit to fetch.
     */
    where?: apiLimitWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of apiLimits to fetch.
     */
    orderBy?: apiLimitOrderByWithRelationInput | apiLimitOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for apiLimits.
     */
    cursor?: apiLimitWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` apiLimits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` apiLimits.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of apiLimits.
     */
    distinct?: ApiLimitScalarFieldEnum | ApiLimitScalarFieldEnum[]
  }

  /**
   * apiLimit findMany
   */
  export type apiLimitFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the apiLimit
     */
    select?: apiLimitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the apiLimit
     */
    omit?: apiLimitOmit<ExtArgs> | null
    /**
     * Filter, which apiLimits to fetch.
     */
    where?: apiLimitWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of apiLimits to fetch.
     */
    orderBy?: apiLimitOrderByWithRelationInput | apiLimitOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing apiLimits.
     */
    cursor?: apiLimitWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` apiLimits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` apiLimits.
     */
    skip?: number
    distinct?: ApiLimitScalarFieldEnum | ApiLimitScalarFieldEnum[]
  }

  /**
   * apiLimit create
   */
  export type apiLimitCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the apiLimit
     */
    select?: apiLimitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the apiLimit
     */
    omit?: apiLimitOmit<ExtArgs> | null
    /**
     * The data needed to create a apiLimit.
     */
    data: XOR<apiLimitCreateInput, apiLimitUncheckedCreateInput>
  }

  /**
   * apiLimit createMany
   */
  export type apiLimitCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many apiLimits.
     */
    data: apiLimitCreateManyInput | apiLimitCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * apiLimit createManyAndReturn
   */
  export type apiLimitCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the apiLimit
     */
    select?: apiLimitSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the apiLimit
     */
    omit?: apiLimitOmit<ExtArgs> | null
    /**
     * The data used to create many apiLimits.
     */
    data: apiLimitCreateManyInput | apiLimitCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * apiLimit update
   */
  export type apiLimitUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the apiLimit
     */
    select?: apiLimitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the apiLimit
     */
    omit?: apiLimitOmit<ExtArgs> | null
    /**
     * The data needed to update a apiLimit.
     */
    data: XOR<apiLimitUpdateInput, apiLimitUncheckedUpdateInput>
    /**
     * Choose, which apiLimit to update.
     */
    where: apiLimitWhereUniqueInput
  }

  /**
   * apiLimit updateMany
   */
  export type apiLimitUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update apiLimits.
     */
    data: XOR<apiLimitUpdateManyMutationInput, apiLimitUncheckedUpdateManyInput>
    /**
     * Filter which apiLimits to update
     */
    where?: apiLimitWhereInput
    /**
     * Limit how many apiLimits to update.
     */
    limit?: number
  }

  /**
   * apiLimit updateManyAndReturn
   */
  export type apiLimitUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the apiLimit
     */
    select?: apiLimitSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the apiLimit
     */
    omit?: apiLimitOmit<ExtArgs> | null
    /**
     * The data used to update apiLimits.
     */
    data: XOR<apiLimitUpdateManyMutationInput, apiLimitUncheckedUpdateManyInput>
    /**
     * Filter which apiLimits to update
     */
    where?: apiLimitWhereInput
    /**
     * Limit how many apiLimits to update.
     */
    limit?: number
  }

  /**
   * apiLimit upsert
   */
  export type apiLimitUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the apiLimit
     */
    select?: apiLimitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the apiLimit
     */
    omit?: apiLimitOmit<ExtArgs> | null
    /**
     * The filter to search for the apiLimit to update in case it exists.
     */
    where: apiLimitWhereUniqueInput
    /**
     * In case the apiLimit found by the `where` argument doesn't exist, create a new apiLimit with this data.
     */
    create: XOR<apiLimitCreateInput, apiLimitUncheckedCreateInput>
    /**
     * In case the apiLimit was found with the provided `where` argument, update it with this data.
     */
    update: XOR<apiLimitUpdateInput, apiLimitUncheckedUpdateInput>
  }

  /**
   * apiLimit delete
   */
  export type apiLimitDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the apiLimit
     */
    select?: apiLimitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the apiLimit
     */
    omit?: apiLimitOmit<ExtArgs> | null
    /**
     * Filter which apiLimit to delete.
     */
    where: apiLimitWhereUniqueInput
  }

  /**
   * apiLimit deleteMany
   */
  export type apiLimitDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which apiLimits to delete
     */
    where?: apiLimitWhereInput
    /**
     * Limit how many apiLimits to delete.
     */
    limit?: number
  }

  /**
   * apiLimit without action
   */
  export type apiLimitDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the apiLimit
     */
    select?: apiLimitSelect<ExtArgs> | null
    /**
     * Omit specific fields from the apiLimit
     */
    omit?: apiLimitOmit<ExtArgs> | null
  }


  /**
   * Model Article
   */

  export type AggregateArticle = {
    _count: ArticleCountAggregateOutputType | null
    _min: ArticleMinAggregateOutputType | null
    _max: ArticleMaxAggregateOutputType | null
  }

  export type ArticleMinAggregateOutputType = {
    id: string | null
    content: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ArticleMaxAggregateOutputType = {
    id: string | null
    content: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ArticleCountAggregateOutputType = {
    id: number
    content: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ArticleMinAggregateInputType = {
    id?: true
    content?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ArticleMaxAggregateInputType = {
    id?: true
    content?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ArticleCountAggregateInputType = {
    id?: true
    content?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ArticleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Article to aggregate.
     */
    where?: ArticleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Articles to fetch.
     */
    orderBy?: ArticleOrderByWithRelationInput | ArticleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ArticleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Articles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Articles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Articles
    **/
    _count?: true | ArticleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ArticleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ArticleMaxAggregateInputType
  }

  export type GetArticleAggregateType<T extends ArticleAggregateArgs> = {
        [P in keyof T & keyof AggregateArticle]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateArticle[P]>
      : GetScalarType<T[P], AggregateArticle[P]>
  }




  export type ArticleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ArticleWhereInput
    orderBy?: ArticleOrderByWithAggregationInput | ArticleOrderByWithAggregationInput[]
    by: ArticleScalarFieldEnum[] | ArticleScalarFieldEnum
    having?: ArticleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ArticleCountAggregateInputType | true
    _min?: ArticleMinAggregateInputType
    _max?: ArticleMaxAggregateInputType
  }

  export type ArticleGroupByOutputType = {
    id: string
    content: string
    createdAt: Date
    updatedAt: Date
    _count: ArticleCountAggregateOutputType | null
    _min: ArticleMinAggregateOutputType | null
    _max: ArticleMaxAggregateOutputType | null
  }

  type GetArticleGroupByPayload<T extends ArticleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ArticleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ArticleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ArticleGroupByOutputType[P]>
            : GetScalarType<T[P], ArticleGroupByOutputType[P]>
        }
      >
    >


  export type ArticleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    content?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["article"]>

  export type ArticleSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    content?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["article"]>

  export type ArticleSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    content?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["article"]>

  export type ArticleSelectScalar = {
    id?: boolean
    content?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ArticleOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "content" | "createdAt" | "updatedAt", ExtArgs["result"]["article"]>

  export type $ArticlePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Article"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      content: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["article"]>
    composites: {}
  }

  type ArticleGetPayload<S extends boolean | null | undefined | ArticleDefaultArgs> = $Result.GetResult<Prisma.$ArticlePayload, S>

  type ArticleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ArticleFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ArticleCountAggregateInputType | true
    }

  export interface ArticleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Article'], meta: { name: 'Article' } }
    /**
     * Find zero or one Article that matches the filter.
     * @param {ArticleFindUniqueArgs} args - Arguments to find a Article
     * @example
     * // Get one Article
     * const article = await prisma.article.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ArticleFindUniqueArgs>(args: SelectSubset<T, ArticleFindUniqueArgs<ExtArgs>>): Prisma__ArticleClient<$Result.GetResult<Prisma.$ArticlePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Article that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ArticleFindUniqueOrThrowArgs} args - Arguments to find a Article
     * @example
     * // Get one Article
     * const article = await prisma.article.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ArticleFindUniqueOrThrowArgs>(args: SelectSubset<T, ArticleFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ArticleClient<$Result.GetResult<Prisma.$ArticlePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Article that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArticleFindFirstArgs} args - Arguments to find a Article
     * @example
     * // Get one Article
     * const article = await prisma.article.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ArticleFindFirstArgs>(args?: SelectSubset<T, ArticleFindFirstArgs<ExtArgs>>): Prisma__ArticleClient<$Result.GetResult<Prisma.$ArticlePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Article that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArticleFindFirstOrThrowArgs} args - Arguments to find a Article
     * @example
     * // Get one Article
     * const article = await prisma.article.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ArticleFindFirstOrThrowArgs>(args?: SelectSubset<T, ArticleFindFirstOrThrowArgs<ExtArgs>>): Prisma__ArticleClient<$Result.GetResult<Prisma.$ArticlePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Articles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArticleFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Articles
     * const articles = await prisma.article.findMany()
     * 
     * // Get first 10 Articles
     * const articles = await prisma.article.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const articleWithIdOnly = await prisma.article.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ArticleFindManyArgs>(args?: SelectSubset<T, ArticleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ArticlePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Article.
     * @param {ArticleCreateArgs} args - Arguments to create a Article.
     * @example
     * // Create one Article
     * const Article = await prisma.article.create({
     *   data: {
     *     // ... data to create a Article
     *   }
     * })
     * 
     */
    create<T extends ArticleCreateArgs>(args: SelectSubset<T, ArticleCreateArgs<ExtArgs>>): Prisma__ArticleClient<$Result.GetResult<Prisma.$ArticlePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Articles.
     * @param {ArticleCreateManyArgs} args - Arguments to create many Articles.
     * @example
     * // Create many Articles
     * const article = await prisma.article.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ArticleCreateManyArgs>(args?: SelectSubset<T, ArticleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Articles and returns the data saved in the database.
     * @param {ArticleCreateManyAndReturnArgs} args - Arguments to create many Articles.
     * @example
     * // Create many Articles
     * const article = await prisma.article.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Articles and only return the `id`
     * const articleWithIdOnly = await prisma.article.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ArticleCreateManyAndReturnArgs>(args?: SelectSubset<T, ArticleCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ArticlePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Article.
     * @param {ArticleDeleteArgs} args - Arguments to delete one Article.
     * @example
     * // Delete one Article
     * const Article = await prisma.article.delete({
     *   where: {
     *     // ... filter to delete one Article
     *   }
     * })
     * 
     */
    delete<T extends ArticleDeleteArgs>(args: SelectSubset<T, ArticleDeleteArgs<ExtArgs>>): Prisma__ArticleClient<$Result.GetResult<Prisma.$ArticlePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Article.
     * @param {ArticleUpdateArgs} args - Arguments to update one Article.
     * @example
     * // Update one Article
     * const article = await prisma.article.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ArticleUpdateArgs>(args: SelectSubset<T, ArticleUpdateArgs<ExtArgs>>): Prisma__ArticleClient<$Result.GetResult<Prisma.$ArticlePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Articles.
     * @param {ArticleDeleteManyArgs} args - Arguments to filter Articles to delete.
     * @example
     * // Delete a few Articles
     * const { count } = await prisma.article.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ArticleDeleteManyArgs>(args?: SelectSubset<T, ArticleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Articles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArticleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Articles
     * const article = await prisma.article.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ArticleUpdateManyArgs>(args: SelectSubset<T, ArticleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Articles and returns the data updated in the database.
     * @param {ArticleUpdateManyAndReturnArgs} args - Arguments to update many Articles.
     * @example
     * // Update many Articles
     * const article = await prisma.article.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Articles and only return the `id`
     * const articleWithIdOnly = await prisma.article.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ArticleUpdateManyAndReturnArgs>(args: SelectSubset<T, ArticleUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ArticlePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Article.
     * @param {ArticleUpsertArgs} args - Arguments to update or create a Article.
     * @example
     * // Update or create a Article
     * const article = await prisma.article.upsert({
     *   create: {
     *     // ... data to create a Article
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Article we want to update
     *   }
     * })
     */
    upsert<T extends ArticleUpsertArgs>(args: SelectSubset<T, ArticleUpsertArgs<ExtArgs>>): Prisma__ArticleClient<$Result.GetResult<Prisma.$ArticlePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Articles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArticleCountArgs} args - Arguments to filter Articles to count.
     * @example
     * // Count the number of Articles
     * const count = await prisma.article.count({
     *   where: {
     *     // ... the filter for the Articles we want to count
     *   }
     * })
    **/
    count<T extends ArticleCountArgs>(
      args?: Subset<T, ArticleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ArticleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Article.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArticleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ArticleAggregateArgs>(args: Subset<T, ArticleAggregateArgs>): Prisma.PrismaPromise<GetArticleAggregateType<T>>

    /**
     * Group by Article.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ArticleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ArticleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ArticleGroupByArgs['orderBy'] }
        : { orderBy?: ArticleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ArticleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetArticleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Article model
   */
  readonly fields: ArticleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Article.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ArticleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Article model
   */
  interface ArticleFieldRefs {
    readonly id: FieldRef<"Article", 'String'>
    readonly content: FieldRef<"Article", 'String'>
    readonly createdAt: FieldRef<"Article", 'DateTime'>
    readonly updatedAt: FieldRef<"Article", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Article findUnique
   */
  export type ArticleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Article
     */
    select?: ArticleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Article
     */
    omit?: ArticleOmit<ExtArgs> | null
    /**
     * Filter, which Article to fetch.
     */
    where: ArticleWhereUniqueInput
  }

  /**
   * Article findUniqueOrThrow
   */
  export type ArticleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Article
     */
    select?: ArticleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Article
     */
    omit?: ArticleOmit<ExtArgs> | null
    /**
     * Filter, which Article to fetch.
     */
    where: ArticleWhereUniqueInput
  }

  /**
   * Article findFirst
   */
  export type ArticleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Article
     */
    select?: ArticleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Article
     */
    omit?: ArticleOmit<ExtArgs> | null
    /**
     * Filter, which Article to fetch.
     */
    where?: ArticleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Articles to fetch.
     */
    orderBy?: ArticleOrderByWithRelationInput | ArticleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Articles.
     */
    cursor?: ArticleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Articles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Articles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Articles.
     */
    distinct?: ArticleScalarFieldEnum | ArticleScalarFieldEnum[]
  }

  /**
   * Article findFirstOrThrow
   */
  export type ArticleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Article
     */
    select?: ArticleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Article
     */
    omit?: ArticleOmit<ExtArgs> | null
    /**
     * Filter, which Article to fetch.
     */
    where?: ArticleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Articles to fetch.
     */
    orderBy?: ArticleOrderByWithRelationInput | ArticleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Articles.
     */
    cursor?: ArticleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Articles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Articles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Articles.
     */
    distinct?: ArticleScalarFieldEnum | ArticleScalarFieldEnum[]
  }

  /**
   * Article findMany
   */
  export type ArticleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Article
     */
    select?: ArticleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Article
     */
    omit?: ArticleOmit<ExtArgs> | null
    /**
     * Filter, which Articles to fetch.
     */
    where?: ArticleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Articles to fetch.
     */
    orderBy?: ArticleOrderByWithRelationInput | ArticleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Articles.
     */
    cursor?: ArticleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Articles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Articles.
     */
    skip?: number
    distinct?: ArticleScalarFieldEnum | ArticleScalarFieldEnum[]
  }

  /**
   * Article create
   */
  export type ArticleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Article
     */
    select?: ArticleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Article
     */
    omit?: ArticleOmit<ExtArgs> | null
    /**
     * The data needed to create a Article.
     */
    data: XOR<ArticleCreateInput, ArticleUncheckedCreateInput>
  }

  /**
   * Article createMany
   */
  export type ArticleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Articles.
     */
    data: ArticleCreateManyInput | ArticleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Article createManyAndReturn
   */
  export type ArticleCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Article
     */
    select?: ArticleSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Article
     */
    omit?: ArticleOmit<ExtArgs> | null
    /**
     * The data used to create many Articles.
     */
    data: ArticleCreateManyInput | ArticleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Article update
   */
  export type ArticleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Article
     */
    select?: ArticleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Article
     */
    omit?: ArticleOmit<ExtArgs> | null
    /**
     * The data needed to update a Article.
     */
    data: XOR<ArticleUpdateInput, ArticleUncheckedUpdateInput>
    /**
     * Choose, which Article to update.
     */
    where: ArticleWhereUniqueInput
  }

  /**
   * Article updateMany
   */
  export type ArticleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Articles.
     */
    data: XOR<ArticleUpdateManyMutationInput, ArticleUncheckedUpdateManyInput>
    /**
     * Filter which Articles to update
     */
    where?: ArticleWhereInput
    /**
     * Limit how many Articles to update.
     */
    limit?: number
  }

  /**
   * Article updateManyAndReturn
   */
  export type ArticleUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Article
     */
    select?: ArticleSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Article
     */
    omit?: ArticleOmit<ExtArgs> | null
    /**
     * The data used to update Articles.
     */
    data: XOR<ArticleUpdateManyMutationInput, ArticleUncheckedUpdateManyInput>
    /**
     * Filter which Articles to update
     */
    where?: ArticleWhereInput
    /**
     * Limit how many Articles to update.
     */
    limit?: number
  }

  /**
   * Article upsert
   */
  export type ArticleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Article
     */
    select?: ArticleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Article
     */
    omit?: ArticleOmit<ExtArgs> | null
    /**
     * The filter to search for the Article to update in case it exists.
     */
    where: ArticleWhereUniqueInput
    /**
     * In case the Article found by the `where` argument doesn't exist, create a new Article with this data.
     */
    create: XOR<ArticleCreateInput, ArticleUncheckedCreateInput>
    /**
     * In case the Article was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ArticleUpdateInput, ArticleUncheckedUpdateInput>
  }

  /**
   * Article delete
   */
  export type ArticleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Article
     */
    select?: ArticleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Article
     */
    omit?: ArticleOmit<ExtArgs> | null
    /**
     * Filter which Article to delete.
     */
    where: ArticleWhereUniqueInput
  }

  /**
   * Article deleteMany
   */
  export type ArticleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Articles to delete
     */
    where?: ArticleWhereInput
    /**
     * Limit how many Articles to delete.
     */
    limit?: number
  }

  /**
   * Article without action
   */
  export type ArticleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Article
     */
    select?: ArticleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Article
     */
    omit?: ArticleOmit<ExtArgs> | null
  }


  /**
   * Model CryptoMarketMetadata
   */

  export type AggregateCryptoMarketMetadata = {
    _count: CryptoMarketMetadataCountAggregateOutputType | null
    _avg: CryptoMarketMetadataAvgAggregateOutputType | null
    _sum: CryptoMarketMetadataSumAggregateOutputType | null
    _min: CryptoMarketMetadataMinAggregateOutputType | null
    _max: CryptoMarketMetadataMaxAggregateOutputType | null
  }

  export type CryptoMarketMetadataAvgAggregateOutputType = {
    total_market_cap: number | null
    total_volume_24h: number | null
    btc_dominance: number | null
    eth_dominance: number | null
    active_cryptos: number | null
    active_exchanges: number | null
  }

  export type CryptoMarketMetadataSumAggregateOutputType = {
    total_market_cap: number | null
    total_volume_24h: number | null
    btc_dominance: number | null
    eth_dominance: number | null
    active_cryptos: number | null
    active_exchanges: number | null
  }

  export type CryptoMarketMetadataMinAggregateOutputType = {
    id: string | null
    symbol: string | null
    logo_url: string | null
    description: string | null
    category: string | null
    website_url: string | null
    tech_doc_url: string | null
    source_code_url: string | null
    total_market_cap: number | null
    total_volume_24h: number | null
    btc_dominance: number | null
    eth_dominance: number | null
    active_cryptos: number | null
    active_exchanges: number | null
    timestamp: Date | null
    updated_at: Date | null
  }

  export type CryptoMarketMetadataMaxAggregateOutputType = {
    id: string | null
    symbol: string | null
    logo_url: string | null
    description: string | null
    category: string | null
    website_url: string | null
    tech_doc_url: string | null
    source_code_url: string | null
    total_market_cap: number | null
    total_volume_24h: number | null
    btc_dominance: number | null
    eth_dominance: number | null
    active_cryptos: number | null
    active_exchanges: number | null
    timestamp: Date | null
    updated_at: Date | null
  }

  export type CryptoMarketMetadataCountAggregateOutputType = {
    id: number
    symbol: number
    logo_url: number
    description: number
    category: number
    website_url: number
    tech_doc_url: number
    source_code_url: number
    total_market_cap: number
    total_volume_24h: number
    btc_dominance: number
    eth_dominance: number
    active_cryptos: number
    active_exchanges: number
    timestamp: number
    updated_at: number
    _all: number
  }


  export type CryptoMarketMetadataAvgAggregateInputType = {
    total_market_cap?: true
    total_volume_24h?: true
    btc_dominance?: true
    eth_dominance?: true
    active_cryptos?: true
    active_exchanges?: true
  }

  export type CryptoMarketMetadataSumAggregateInputType = {
    total_market_cap?: true
    total_volume_24h?: true
    btc_dominance?: true
    eth_dominance?: true
    active_cryptos?: true
    active_exchanges?: true
  }

  export type CryptoMarketMetadataMinAggregateInputType = {
    id?: true
    symbol?: true
    logo_url?: true
    description?: true
    category?: true
    website_url?: true
    tech_doc_url?: true
    source_code_url?: true
    total_market_cap?: true
    total_volume_24h?: true
    btc_dominance?: true
    eth_dominance?: true
    active_cryptos?: true
    active_exchanges?: true
    timestamp?: true
    updated_at?: true
  }

  export type CryptoMarketMetadataMaxAggregateInputType = {
    id?: true
    symbol?: true
    logo_url?: true
    description?: true
    category?: true
    website_url?: true
    tech_doc_url?: true
    source_code_url?: true
    total_market_cap?: true
    total_volume_24h?: true
    btc_dominance?: true
    eth_dominance?: true
    active_cryptos?: true
    active_exchanges?: true
    timestamp?: true
    updated_at?: true
  }

  export type CryptoMarketMetadataCountAggregateInputType = {
    id?: true
    symbol?: true
    logo_url?: true
    description?: true
    category?: true
    website_url?: true
    tech_doc_url?: true
    source_code_url?: true
    total_market_cap?: true
    total_volume_24h?: true
    btc_dominance?: true
    eth_dominance?: true
    active_cryptos?: true
    active_exchanges?: true
    timestamp?: true
    updated_at?: true
    _all?: true
  }

  export type CryptoMarketMetadataAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CryptoMarketMetadata to aggregate.
     */
    where?: CryptoMarketMetadataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CryptoMarketMetadata to fetch.
     */
    orderBy?: CryptoMarketMetadataOrderByWithRelationInput | CryptoMarketMetadataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CryptoMarketMetadataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CryptoMarketMetadata from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CryptoMarketMetadata.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CryptoMarketMetadata
    **/
    _count?: true | CryptoMarketMetadataCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CryptoMarketMetadataAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CryptoMarketMetadataSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CryptoMarketMetadataMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CryptoMarketMetadataMaxAggregateInputType
  }

  export type GetCryptoMarketMetadataAggregateType<T extends CryptoMarketMetadataAggregateArgs> = {
        [P in keyof T & keyof AggregateCryptoMarketMetadata]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCryptoMarketMetadata[P]>
      : GetScalarType<T[P], AggregateCryptoMarketMetadata[P]>
  }




  export type CryptoMarketMetadataGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CryptoMarketMetadataWhereInput
    orderBy?: CryptoMarketMetadataOrderByWithAggregationInput | CryptoMarketMetadataOrderByWithAggregationInput[]
    by: CryptoMarketMetadataScalarFieldEnum[] | CryptoMarketMetadataScalarFieldEnum
    having?: CryptoMarketMetadataScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CryptoMarketMetadataCountAggregateInputType | true
    _avg?: CryptoMarketMetadataAvgAggregateInputType
    _sum?: CryptoMarketMetadataSumAggregateInputType
    _min?: CryptoMarketMetadataMinAggregateInputType
    _max?: CryptoMarketMetadataMaxAggregateInputType
  }

  export type CryptoMarketMetadataGroupByOutputType = {
    id: string
    symbol: string
    logo_url: string | null
    description: string | null
    category: string | null
    website_url: string | null
    tech_doc_url: string | null
    source_code_url: string | null
    total_market_cap: number
    total_volume_24h: number
    btc_dominance: number
    eth_dominance: number
    active_cryptos: number
    active_exchanges: number
    timestamp: Date
    updated_at: Date
    _count: CryptoMarketMetadataCountAggregateOutputType | null
    _avg: CryptoMarketMetadataAvgAggregateOutputType | null
    _sum: CryptoMarketMetadataSumAggregateOutputType | null
    _min: CryptoMarketMetadataMinAggregateOutputType | null
    _max: CryptoMarketMetadataMaxAggregateOutputType | null
  }

  type GetCryptoMarketMetadataGroupByPayload<T extends CryptoMarketMetadataGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CryptoMarketMetadataGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CryptoMarketMetadataGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CryptoMarketMetadataGroupByOutputType[P]>
            : GetScalarType<T[P], CryptoMarketMetadataGroupByOutputType[P]>
        }
      >
    >


  export type CryptoMarketMetadataSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    symbol?: boolean
    logo_url?: boolean
    description?: boolean
    category?: boolean
    website_url?: boolean
    tech_doc_url?: boolean
    source_code_url?: boolean
    total_market_cap?: boolean
    total_volume_24h?: boolean
    btc_dominance?: boolean
    eth_dominance?: boolean
    active_cryptos?: boolean
    active_exchanges?: boolean
    timestamp?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["cryptoMarketMetadata"]>

  export type CryptoMarketMetadataSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    symbol?: boolean
    logo_url?: boolean
    description?: boolean
    category?: boolean
    website_url?: boolean
    tech_doc_url?: boolean
    source_code_url?: boolean
    total_market_cap?: boolean
    total_volume_24h?: boolean
    btc_dominance?: boolean
    eth_dominance?: boolean
    active_cryptos?: boolean
    active_exchanges?: boolean
    timestamp?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["cryptoMarketMetadata"]>

  export type CryptoMarketMetadataSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    symbol?: boolean
    logo_url?: boolean
    description?: boolean
    category?: boolean
    website_url?: boolean
    tech_doc_url?: boolean
    source_code_url?: boolean
    total_market_cap?: boolean
    total_volume_24h?: boolean
    btc_dominance?: boolean
    eth_dominance?: boolean
    active_cryptos?: boolean
    active_exchanges?: boolean
    timestamp?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["cryptoMarketMetadata"]>

  export type CryptoMarketMetadataSelectScalar = {
    id?: boolean
    symbol?: boolean
    logo_url?: boolean
    description?: boolean
    category?: boolean
    website_url?: boolean
    tech_doc_url?: boolean
    source_code_url?: boolean
    total_market_cap?: boolean
    total_volume_24h?: boolean
    btc_dominance?: boolean
    eth_dominance?: boolean
    active_cryptos?: boolean
    active_exchanges?: boolean
    timestamp?: boolean
    updated_at?: boolean
  }

  export type CryptoMarketMetadataOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "symbol" | "logo_url" | "description" | "category" | "website_url" | "tech_doc_url" | "source_code_url" | "total_market_cap" | "total_volume_24h" | "btc_dominance" | "eth_dominance" | "active_cryptos" | "active_exchanges" | "timestamp" | "updated_at", ExtArgs["result"]["cryptoMarketMetadata"]>

  export type $CryptoMarketMetadataPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CryptoMarketMetadata"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      symbol: string
      logo_url: string | null
      description: string | null
      category: string | null
      website_url: string | null
      tech_doc_url: string | null
      source_code_url: string | null
      total_market_cap: number
      total_volume_24h: number
      btc_dominance: number
      eth_dominance: number
      active_cryptos: number
      active_exchanges: number
      timestamp: Date
      updated_at: Date
    }, ExtArgs["result"]["cryptoMarketMetadata"]>
    composites: {}
  }

  type CryptoMarketMetadataGetPayload<S extends boolean | null | undefined | CryptoMarketMetadataDefaultArgs> = $Result.GetResult<Prisma.$CryptoMarketMetadataPayload, S>

  type CryptoMarketMetadataCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CryptoMarketMetadataFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CryptoMarketMetadataCountAggregateInputType | true
    }

  export interface CryptoMarketMetadataDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CryptoMarketMetadata'], meta: { name: 'CryptoMarketMetadata' } }
    /**
     * Find zero or one CryptoMarketMetadata that matches the filter.
     * @param {CryptoMarketMetadataFindUniqueArgs} args - Arguments to find a CryptoMarketMetadata
     * @example
     * // Get one CryptoMarketMetadata
     * const cryptoMarketMetadata = await prisma.cryptoMarketMetadata.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CryptoMarketMetadataFindUniqueArgs>(args: SelectSubset<T, CryptoMarketMetadataFindUniqueArgs<ExtArgs>>): Prisma__CryptoMarketMetadataClient<$Result.GetResult<Prisma.$CryptoMarketMetadataPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one CryptoMarketMetadata that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CryptoMarketMetadataFindUniqueOrThrowArgs} args - Arguments to find a CryptoMarketMetadata
     * @example
     * // Get one CryptoMarketMetadata
     * const cryptoMarketMetadata = await prisma.cryptoMarketMetadata.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CryptoMarketMetadataFindUniqueOrThrowArgs>(args: SelectSubset<T, CryptoMarketMetadataFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CryptoMarketMetadataClient<$Result.GetResult<Prisma.$CryptoMarketMetadataPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CryptoMarketMetadata that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CryptoMarketMetadataFindFirstArgs} args - Arguments to find a CryptoMarketMetadata
     * @example
     * // Get one CryptoMarketMetadata
     * const cryptoMarketMetadata = await prisma.cryptoMarketMetadata.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CryptoMarketMetadataFindFirstArgs>(args?: SelectSubset<T, CryptoMarketMetadataFindFirstArgs<ExtArgs>>): Prisma__CryptoMarketMetadataClient<$Result.GetResult<Prisma.$CryptoMarketMetadataPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CryptoMarketMetadata that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CryptoMarketMetadataFindFirstOrThrowArgs} args - Arguments to find a CryptoMarketMetadata
     * @example
     * // Get one CryptoMarketMetadata
     * const cryptoMarketMetadata = await prisma.cryptoMarketMetadata.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CryptoMarketMetadataFindFirstOrThrowArgs>(args?: SelectSubset<T, CryptoMarketMetadataFindFirstOrThrowArgs<ExtArgs>>): Prisma__CryptoMarketMetadataClient<$Result.GetResult<Prisma.$CryptoMarketMetadataPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more CryptoMarketMetadata that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CryptoMarketMetadataFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CryptoMarketMetadata
     * const cryptoMarketMetadata = await prisma.cryptoMarketMetadata.findMany()
     * 
     * // Get first 10 CryptoMarketMetadata
     * const cryptoMarketMetadata = await prisma.cryptoMarketMetadata.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const cryptoMarketMetadataWithIdOnly = await prisma.cryptoMarketMetadata.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CryptoMarketMetadataFindManyArgs>(args?: SelectSubset<T, CryptoMarketMetadataFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CryptoMarketMetadataPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a CryptoMarketMetadata.
     * @param {CryptoMarketMetadataCreateArgs} args - Arguments to create a CryptoMarketMetadata.
     * @example
     * // Create one CryptoMarketMetadata
     * const CryptoMarketMetadata = await prisma.cryptoMarketMetadata.create({
     *   data: {
     *     // ... data to create a CryptoMarketMetadata
     *   }
     * })
     * 
     */
    create<T extends CryptoMarketMetadataCreateArgs>(args: SelectSubset<T, CryptoMarketMetadataCreateArgs<ExtArgs>>): Prisma__CryptoMarketMetadataClient<$Result.GetResult<Prisma.$CryptoMarketMetadataPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many CryptoMarketMetadata.
     * @param {CryptoMarketMetadataCreateManyArgs} args - Arguments to create many CryptoMarketMetadata.
     * @example
     * // Create many CryptoMarketMetadata
     * const cryptoMarketMetadata = await prisma.cryptoMarketMetadata.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CryptoMarketMetadataCreateManyArgs>(args?: SelectSubset<T, CryptoMarketMetadataCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CryptoMarketMetadata and returns the data saved in the database.
     * @param {CryptoMarketMetadataCreateManyAndReturnArgs} args - Arguments to create many CryptoMarketMetadata.
     * @example
     * // Create many CryptoMarketMetadata
     * const cryptoMarketMetadata = await prisma.cryptoMarketMetadata.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CryptoMarketMetadata and only return the `id`
     * const cryptoMarketMetadataWithIdOnly = await prisma.cryptoMarketMetadata.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CryptoMarketMetadataCreateManyAndReturnArgs>(args?: SelectSubset<T, CryptoMarketMetadataCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CryptoMarketMetadataPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a CryptoMarketMetadata.
     * @param {CryptoMarketMetadataDeleteArgs} args - Arguments to delete one CryptoMarketMetadata.
     * @example
     * // Delete one CryptoMarketMetadata
     * const CryptoMarketMetadata = await prisma.cryptoMarketMetadata.delete({
     *   where: {
     *     // ... filter to delete one CryptoMarketMetadata
     *   }
     * })
     * 
     */
    delete<T extends CryptoMarketMetadataDeleteArgs>(args: SelectSubset<T, CryptoMarketMetadataDeleteArgs<ExtArgs>>): Prisma__CryptoMarketMetadataClient<$Result.GetResult<Prisma.$CryptoMarketMetadataPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one CryptoMarketMetadata.
     * @param {CryptoMarketMetadataUpdateArgs} args - Arguments to update one CryptoMarketMetadata.
     * @example
     * // Update one CryptoMarketMetadata
     * const cryptoMarketMetadata = await prisma.cryptoMarketMetadata.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CryptoMarketMetadataUpdateArgs>(args: SelectSubset<T, CryptoMarketMetadataUpdateArgs<ExtArgs>>): Prisma__CryptoMarketMetadataClient<$Result.GetResult<Prisma.$CryptoMarketMetadataPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more CryptoMarketMetadata.
     * @param {CryptoMarketMetadataDeleteManyArgs} args - Arguments to filter CryptoMarketMetadata to delete.
     * @example
     * // Delete a few CryptoMarketMetadata
     * const { count } = await prisma.cryptoMarketMetadata.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CryptoMarketMetadataDeleteManyArgs>(args?: SelectSubset<T, CryptoMarketMetadataDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CryptoMarketMetadata.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CryptoMarketMetadataUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CryptoMarketMetadata
     * const cryptoMarketMetadata = await prisma.cryptoMarketMetadata.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CryptoMarketMetadataUpdateManyArgs>(args: SelectSubset<T, CryptoMarketMetadataUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CryptoMarketMetadata and returns the data updated in the database.
     * @param {CryptoMarketMetadataUpdateManyAndReturnArgs} args - Arguments to update many CryptoMarketMetadata.
     * @example
     * // Update many CryptoMarketMetadata
     * const cryptoMarketMetadata = await prisma.cryptoMarketMetadata.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more CryptoMarketMetadata and only return the `id`
     * const cryptoMarketMetadataWithIdOnly = await prisma.cryptoMarketMetadata.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CryptoMarketMetadataUpdateManyAndReturnArgs>(args: SelectSubset<T, CryptoMarketMetadataUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CryptoMarketMetadataPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one CryptoMarketMetadata.
     * @param {CryptoMarketMetadataUpsertArgs} args - Arguments to update or create a CryptoMarketMetadata.
     * @example
     * // Update or create a CryptoMarketMetadata
     * const cryptoMarketMetadata = await prisma.cryptoMarketMetadata.upsert({
     *   create: {
     *     // ... data to create a CryptoMarketMetadata
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CryptoMarketMetadata we want to update
     *   }
     * })
     */
    upsert<T extends CryptoMarketMetadataUpsertArgs>(args: SelectSubset<T, CryptoMarketMetadataUpsertArgs<ExtArgs>>): Prisma__CryptoMarketMetadataClient<$Result.GetResult<Prisma.$CryptoMarketMetadataPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of CryptoMarketMetadata.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CryptoMarketMetadataCountArgs} args - Arguments to filter CryptoMarketMetadata to count.
     * @example
     * // Count the number of CryptoMarketMetadata
     * const count = await prisma.cryptoMarketMetadata.count({
     *   where: {
     *     // ... the filter for the CryptoMarketMetadata we want to count
     *   }
     * })
    **/
    count<T extends CryptoMarketMetadataCountArgs>(
      args?: Subset<T, CryptoMarketMetadataCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CryptoMarketMetadataCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CryptoMarketMetadata.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CryptoMarketMetadataAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CryptoMarketMetadataAggregateArgs>(args: Subset<T, CryptoMarketMetadataAggregateArgs>): Prisma.PrismaPromise<GetCryptoMarketMetadataAggregateType<T>>

    /**
     * Group by CryptoMarketMetadata.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CryptoMarketMetadataGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CryptoMarketMetadataGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CryptoMarketMetadataGroupByArgs['orderBy'] }
        : { orderBy?: CryptoMarketMetadataGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CryptoMarketMetadataGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCryptoMarketMetadataGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CryptoMarketMetadata model
   */
  readonly fields: CryptoMarketMetadataFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CryptoMarketMetadata.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CryptoMarketMetadataClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CryptoMarketMetadata model
   */
  interface CryptoMarketMetadataFieldRefs {
    readonly id: FieldRef<"CryptoMarketMetadata", 'String'>
    readonly symbol: FieldRef<"CryptoMarketMetadata", 'String'>
    readonly logo_url: FieldRef<"CryptoMarketMetadata", 'String'>
    readonly description: FieldRef<"CryptoMarketMetadata", 'String'>
    readonly category: FieldRef<"CryptoMarketMetadata", 'String'>
    readonly website_url: FieldRef<"CryptoMarketMetadata", 'String'>
    readonly tech_doc_url: FieldRef<"CryptoMarketMetadata", 'String'>
    readonly source_code_url: FieldRef<"CryptoMarketMetadata", 'String'>
    readonly total_market_cap: FieldRef<"CryptoMarketMetadata", 'Float'>
    readonly total_volume_24h: FieldRef<"CryptoMarketMetadata", 'Float'>
    readonly btc_dominance: FieldRef<"CryptoMarketMetadata", 'Float'>
    readonly eth_dominance: FieldRef<"CryptoMarketMetadata", 'Float'>
    readonly active_cryptos: FieldRef<"CryptoMarketMetadata", 'Int'>
    readonly active_exchanges: FieldRef<"CryptoMarketMetadata", 'Int'>
    readonly timestamp: FieldRef<"CryptoMarketMetadata", 'DateTime'>
    readonly updated_at: FieldRef<"CryptoMarketMetadata", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * CryptoMarketMetadata findUnique
   */
  export type CryptoMarketMetadataFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CryptoMarketMetadata
     */
    select?: CryptoMarketMetadataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CryptoMarketMetadata
     */
    omit?: CryptoMarketMetadataOmit<ExtArgs> | null
    /**
     * Filter, which CryptoMarketMetadata to fetch.
     */
    where: CryptoMarketMetadataWhereUniqueInput
  }

  /**
   * CryptoMarketMetadata findUniqueOrThrow
   */
  export type CryptoMarketMetadataFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CryptoMarketMetadata
     */
    select?: CryptoMarketMetadataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CryptoMarketMetadata
     */
    omit?: CryptoMarketMetadataOmit<ExtArgs> | null
    /**
     * Filter, which CryptoMarketMetadata to fetch.
     */
    where: CryptoMarketMetadataWhereUniqueInput
  }

  /**
   * CryptoMarketMetadata findFirst
   */
  export type CryptoMarketMetadataFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CryptoMarketMetadata
     */
    select?: CryptoMarketMetadataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CryptoMarketMetadata
     */
    omit?: CryptoMarketMetadataOmit<ExtArgs> | null
    /**
     * Filter, which CryptoMarketMetadata to fetch.
     */
    where?: CryptoMarketMetadataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CryptoMarketMetadata to fetch.
     */
    orderBy?: CryptoMarketMetadataOrderByWithRelationInput | CryptoMarketMetadataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CryptoMarketMetadata.
     */
    cursor?: CryptoMarketMetadataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CryptoMarketMetadata from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CryptoMarketMetadata.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CryptoMarketMetadata.
     */
    distinct?: CryptoMarketMetadataScalarFieldEnum | CryptoMarketMetadataScalarFieldEnum[]
  }

  /**
   * CryptoMarketMetadata findFirstOrThrow
   */
  export type CryptoMarketMetadataFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CryptoMarketMetadata
     */
    select?: CryptoMarketMetadataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CryptoMarketMetadata
     */
    omit?: CryptoMarketMetadataOmit<ExtArgs> | null
    /**
     * Filter, which CryptoMarketMetadata to fetch.
     */
    where?: CryptoMarketMetadataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CryptoMarketMetadata to fetch.
     */
    orderBy?: CryptoMarketMetadataOrderByWithRelationInput | CryptoMarketMetadataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CryptoMarketMetadata.
     */
    cursor?: CryptoMarketMetadataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CryptoMarketMetadata from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CryptoMarketMetadata.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CryptoMarketMetadata.
     */
    distinct?: CryptoMarketMetadataScalarFieldEnum | CryptoMarketMetadataScalarFieldEnum[]
  }

  /**
   * CryptoMarketMetadata findMany
   */
  export type CryptoMarketMetadataFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CryptoMarketMetadata
     */
    select?: CryptoMarketMetadataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CryptoMarketMetadata
     */
    omit?: CryptoMarketMetadataOmit<ExtArgs> | null
    /**
     * Filter, which CryptoMarketMetadata to fetch.
     */
    where?: CryptoMarketMetadataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CryptoMarketMetadata to fetch.
     */
    orderBy?: CryptoMarketMetadataOrderByWithRelationInput | CryptoMarketMetadataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CryptoMarketMetadata.
     */
    cursor?: CryptoMarketMetadataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CryptoMarketMetadata from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CryptoMarketMetadata.
     */
    skip?: number
    distinct?: CryptoMarketMetadataScalarFieldEnum | CryptoMarketMetadataScalarFieldEnum[]
  }

  /**
   * CryptoMarketMetadata create
   */
  export type CryptoMarketMetadataCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CryptoMarketMetadata
     */
    select?: CryptoMarketMetadataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CryptoMarketMetadata
     */
    omit?: CryptoMarketMetadataOmit<ExtArgs> | null
    /**
     * The data needed to create a CryptoMarketMetadata.
     */
    data: XOR<CryptoMarketMetadataCreateInput, CryptoMarketMetadataUncheckedCreateInput>
  }

  /**
   * CryptoMarketMetadata createMany
   */
  export type CryptoMarketMetadataCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CryptoMarketMetadata.
     */
    data: CryptoMarketMetadataCreateManyInput | CryptoMarketMetadataCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CryptoMarketMetadata createManyAndReturn
   */
  export type CryptoMarketMetadataCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CryptoMarketMetadata
     */
    select?: CryptoMarketMetadataSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CryptoMarketMetadata
     */
    omit?: CryptoMarketMetadataOmit<ExtArgs> | null
    /**
     * The data used to create many CryptoMarketMetadata.
     */
    data: CryptoMarketMetadataCreateManyInput | CryptoMarketMetadataCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CryptoMarketMetadata update
   */
  export type CryptoMarketMetadataUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CryptoMarketMetadata
     */
    select?: CryptoMarketMetadataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CryptoMarketMetadata
     */
    omit?: CryptoMarketMetadataOmit<ExtArgs> | null
    /**
     * The data needed to update a CryptoMarketMetadata.
     */
    data: XOR<CryptoMarketMetadataUpdateInput, CryptoMarketMetadataUncheckedUpdateInput>
    /**
     * Choose, which CryptoMarketMetadata to update.
     */
    where: CryptoMarketMetadataWhereUniqueInput
  }

  /**
   * CryptoMarketMetadata updateMany
   */
  export type CryptoMarketMetadataUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CryptoMarketMetadata.
     */
    data: XOR<CryptoMarketMetadataUpdateManyMutationInput, CryptoMarketMetadataUncheckedUpdateManyInput>
    /**
     * Filter which CryptoMarketMetadata to update
     */
    where?: CryptoMarketMetadataWhereInput
    /**
     * Limit how many CryptoMarketMetadata to update.
     */
    limit?: number
  }

  /**
   * CryptoMarketMetadata updateManyAndReturn
   */
  export type CryptoMarketMetadataUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CryptoMarketMetadata
     */
    select?: CryptoMarketMetadataSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CryptoMarketMetadata
     */
    omit?: CryptoMarketMetadataOmit<ExtArgs> | null
    /**
     * The data used to update CryptoMarketMetadata.
     */
    data: XOR<CryptoMarketMetadataUpdateManyMutationInput, CryptoMarketMetadataUncheckedUpdateManyInput>
    /**
     * Filter which CryptoMarketMetadata to update
     */
    where?: CryptoMarketMetadataWhereInput
    /**
     * Limit how many CryptoMarketMetadata to update.
     */
    limit?: number
  }

  /**
   * CryptoMarketMetadata upsert
   */
  export type CryptoMarketMetadataUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CryptoMarketMetadata
     */
    select?: CryptoMarketMetadataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CryptoMarketMetadata
     */
    omit?: CryptoMarketMetadataOmit<ExtArgs> | null
    /**
     * The filter to search for the CryptoMarketMetadata to update in case it exists.
     */
    where: CryptoMarketMetadataWhereUniqueInput
    /**
     * In case the CryptoMarketMetadata found by the `where` argument doesn't exist, create a new CryptoMarketMetadata with this data.
     */
    create: XOR<CryptoMarketMetadataCreateInput, CryptoMarketMetadataUncheckedCreateInput>
    /**
     * In case the CryptoMarketMetadata was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CryptoMarketMetadataUpdateInput, CryptoMarketMetadataUncheckedUpdateInput>
  }

  /**
   * CryptoMarketMetadata delete
   */
  export type CryptoMarketMetadataDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CryptoMarketMetadata
     */
    select?: CryptoMarketMetadataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CryptoMarketMetadata
     */
    omit?: CryptoMarketMetadataOmit<ExtArgs> | null
    /**
     * Filter which CryptoMarketMetadata to delete.
     */
    where: CryptoMarketMetadataWhereUniqueInput
  }

  /**
   * CryptoMarketMetadata deleteMany
   */
  export type CryptoMarketMetadataDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CryptoMarketMetadata to delete
     */
    where?: CryptoMarketMetadataWhereInput
    /**
     * Limit how many CryptoMarketMetadata to delete.
     */
    limit?: number
  }

  /**
   * CryptoMarketMetadata without action
   */
  export type CryptoMarketMetadataDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CryptoMarketMetadata
     */
    select?: CryptoMarketMetadataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CryptoMarketMetadata
     */
    omit?: CryptoMarketMetadataOmit<ExtArgs> | null
  }


  /**
   * Model Cache
   */

  export type AggregateCache = {
    _count: CacheCountAggregateOutputType | null
    _min: CacheMinAggregateOutputType | null
    _max: CacheMaxAggregateOutputType | null
  }

  export type CacheMinAggregateOutputType = {
    key: string | null
    data: string | null
    timestamp: Date | null
  }

  export type CacheMaxAggregateOutputType = {
    key: string | null
    data: string | null
    timestamp: Date | null
  }

  export type CacheCountAggregateOutputType = {
    key: number
    data: number
    timestamp: number
    _all: number
  }


  export type CacheMinAggregateInputType = {
    key?: true
    data?: true
    timestamp?: true
  }

  export type CacheMaxAggregateInputType = {
    key?: true
    data?: true
    timestamp?: true
  }

  export type CacheCountAggregateInputType = {
    key?: true
    data?: true
    timestamp?: true
    _all?: true
  }

  export type CacheAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Cache to aggregate.
     */
    where?: CacheWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Caches to fetch.
     */
    orderBy?: CacheOrderByWithRelationInput | CacheOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CacheWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Caches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Caches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Caches
    **/
    _count?: true | CacheCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CacheMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CacheMaxAggregateInputType
  }

  export type GetCacheAggregateType<T extends CacheAggregateArgs> = {
        [P in keyof T & keyof AggregateCache]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCache[P]>
      : GetScalarType<T[P], AggregateCache[P]>
  }




  export type CacheGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CacheWhereInput
    orderBy?: CacheOrderByWithAggregationInput | CacheOrderByWithAggregationInput[]
    by: CacheScalarFieldEnum[] | CacheScalarFieldEnum
    having?: CacheScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CacheCountAggregateInputType | true
    _min?: CacheMinAggregateInputType
    _max?: CacheMaxAggregateInputType
  }

  export type CacheGroupByOutputType = {
    key: string
    data: string
    timestamp: Date
    _count: CacheCountAggregateOutputType | null
    _min: CacheMinAggregateOutputType | null
    _max: CacheMaxAggregateOutputType | null
  }

  type GetCacheGroupByPayload<T extends CacheGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CacheGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CacheGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CacheGroupByOutputType[P]>
            : GetScalarType<T[P], CacheGroupByOutputType[P]>
        }
      >
    >


  export type CacheSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    key?: boolean
    data?: boolean
    timestamp?: boolean
  }, ExtArgs["result"]["cache"]>

  export type CacheSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    key?: boolean
    data?: boolean
    timestamp?: boolean
  }, ExtArgs["result"]["cache"]>

  export type CacheSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    key?: boolean
    data?: boolean
    timestamp?: boolean
  }, ExtArgs["result"]["cache"]>

  export type CacheSelectScalar = {
    key?: boolean
    data?: boolean
    timestamp?: boolean
  }

  export type CacheOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"key" | "data" | "timestamp", ExtArgs["result"]["cache"]>

  export type $CachePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Cache"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      key: string
      data: string
      timestamp: Date
    }, ExtArgs["result"]["cache"]>
    composites: {}
  }

  type CacheGetPayload<S extends boolean | null | undefined | CacheDefaultArgs> = $Result.GetResult<Prisma.$CachePayload, S>

  type CacheCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CacheFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CacheCountAggregateInputType | true
    }

  export interface CacheDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Cache'], meta: { name: 'Cache' } }
    /**
     * Find zero or one Cache that matches the filter.
     * @param {CacheFindUniqueArgs} args - Arguments to find a Cache
     * @example
     * // Get one Cache
     * const cache = await prisma.cache.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CacheFindUniqueArgs>(args: SelectSubset<T, CacheFindUniqueArgs<ExtArgs>>): Prisma__CacheClient<$Result.GetResult<Prisma.$CachePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Cache that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CacheFindUniqueOrThrowArgs} args - Arguments to find a Cache
     * @example
     * // Get one Cache
     * const cache = await prisma.cache.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CacheFindUniqueOrThrowArgs>(args: SelectSubset<T, CacheFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CacheClient<$Result.GetResult<Prisma.$CachePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Cache that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CacheFindFirstArgs} args - Arguments to find a Cache
     * @example
     * // Get one Cache
     * const cache = await prisma.cache.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CacheFindFirstArgs>(args?: SelectSubset<T, CacheFindFirstArgs<ExtArgs>>): Prisma__CacheClient<$Result.GetResult<Prisma.$CachePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Cache that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CacheFindFirstOrThrowArgs} args - Arguments to find a Cache
     * @example
     * // Get one Cache
     * const cache = await prisma.cache.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CacheFindFirstOrThrowArgs>(args?: SelectSubset<T, CacheFindFirstOrThrowArgs<ExtArgs>>): Prisma__CacheClient<$Result.GetResult<Prisma.$CachePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Caches that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CacheFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Caches
     * const caches = await prisma.cache.findMany()
     * 
     * // Get first 10 Caches
     * const caches = await prisma.cache.findMany({ take: 10 })
     * 
     * // Only select the `key`
     * const cacheWithKeyOnly = await prisma.cache.findMany({ select: { key: true } })
     * 
     */
    findMany<T extends CacheFindManyArgs>(args?: SelectSubset<T, CacheFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CachePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Cache.
     * @param {CacheCreateArgs} args - Arguments to create a Cache.
     * @example
     * // Create one Cache
     * const Cache = await prisma.cache.create({
     *   data: {
     *     // ... data to create a Cache
     *   }
     * })
     * 
     */
    create<T extends CacheCreateArgs>(args: SelectSubset<T, CacheCreateArgs<ExtArgs>>): Prisma__CacheClient<$Result.GetResult<Prisma.$CachePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Caches.
     * @param {CacheCreateManyArgs} args - Arguments to create many Caches.
     * @example
     * // Create many Caches
     * const cache = await prisma.cache.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CacheCreateManyArgs>(args?: SelectSubset<T, CacheCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Caches and returns the data saved in the database.
     * @param {CacheCreateManyAndReturnArgs} args - Arguments to create many Caches.
     * @example
     * // Create many Caches
     * const cache = await prisma.cache.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Caches and only return the `key`
     * const cacheWithKeyOnly = await prisma.cache.createManyAndReturn({
     *   select: { key: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CacheCreateManyAndReturnArgs>(args?: SelectSubset<T, CacheCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CachePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Cache.
     * @param {CacheDeleteArgs} args - Arguments to delete one Cache.
     * @example
     * // Delete one Cache
     * const Cache = await prisma.cache.delete({
     *   where: {
     *     // ... filter to delete one Cache
     *   }
     * })
     * 
     */
    delete<T extends CacheDeleteArgs>(args: SelectSubset<T, CacheDeleteArgs<ExtArgs>>): Prisma__CacheClient<$Result.GetResult<Prisma.$CachePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Cache.
     * @param {CacheUpdateArgs} args - Arguments to update one Cache.
     * @example
     * // Update one Cache
     * const cache = await prisma.cache.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CacheUpdateArgs>(args: SelectSubset<T, CacheUpdateArgs<ExtArgs>>): Prisma__CacheClient<$Result.GetResult<Prisma.$CachePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Caches.
     * @param {CacheDeleteManyArgs} args - Arguments to filter Caches to delete.
     * @example
     * // Delete a few Caches
     * const { count } = await prisma.cache.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CacheDeleteManyArgs>(args?: SelectSubset<T, CacheDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Caches.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CacheUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Caches
     * const cache = await prisma.cache.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CacheUpdateManyArgs>(args: SelectSubset<T, CacheUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Caches and returns the data updated in the database.
     * @param {CacheUpdateManyAndReturnArgs} args - Arguments to update many Caches.
     * @example
     * // Update many Caches
     * const cache = await prisma.cache.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Caches and only return the `key`
     * const cacheWithKeyOnly = await prisma.cache.updateManyAndReturn({
     *   select: { key: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CacheUpdateManyAndReturnArgs>(args: SelectSubset<T, CacheUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CachePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Cache.
     * @param {CacheUpsertArgs} args - Arguments to update or create a Cache.
     * @example
     * // Update or create a Cache
     * const cache = await prisma.cache.upsert({
     *   create: {
     *     // ... data to create a Cache
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Cache we want to update
     *   }
     * })
     */
    upsert<T extends CacheUpsertArgs>(args: SelectSubset<T, CacheUpsertArgs<ExtArgs>>): Prisma__CacheClient<$Result.GetResult<Prisma.$CachePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Caches.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CacheCountArgs} args - Arguments to filter Caches to count.
     * @example
     * // Count the number of Caches
     * const count = await prisma.cache.count({
     *   where: {
     *     // ... the filter for the Caches we want to count
     *   }
     * })
    **/
    count<T extends CacheCountArgs>(
      args?: Subset<T, CacheCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CacheCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Cache.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CacheAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CacheAggregateArgs>(args: Subset<T, CacheAggregateArgs>): Prisma.PrismaPromise<GetCacheAggregateType<T>>

    /**
     * Group by Cache.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CacheGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CacheGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CacheGroupByArgs['orderBy'] }
        : { orderBy?: CacheGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CacheGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCacheGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Cache model
   */
  readonly fields: CacheFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Cache.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CacheClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Cache model
   */
  interface CacheFieldRefs {
    readonly key: FieldRef<"Cache", 'String'>
    readonly data: FieldRef<"Cache", 'String'>
    readonly timestamp: FieldRef<"Cache", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Cache findUnique
   */
  export type CacheFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cache
     */
    select?: CacheSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cache
     */
    omit?: CacheOmit<ExtArgs> | null
    /**
     * Filter, which Cache to fetch.
     */
    where: CacheWhereUniqueInput
  }

  /**
   * Cache findUniqueOrThrow
   */
  export type CacheFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cache
     */
    select?: CacheSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cache
     */
    omit?: CacheOmit<ExtArgs> | null
    /**
     * Filter, which Cache to fetch.
     */
    where: CacheWhereUniqueInput
  }

  /**
   * Cache findFirst
   */
  export type CacheFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cache
     */
    select?: CacheSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cache
     */
    omit?: CacheOmit<ExtArgs> | null
    /**
     * Filter, which Cache to fetch.
     */
    where?: CacheWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Caches to fetch.
     */
    orderBy?: CacheOrderByWithRelationInput | CacheOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Caches.
     */
    cursor?: CacheWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Caches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Caches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Caches.
     */
    distinct?: CacheScalarFieldEnum | CacheScalarFieldEnum[]
  }

  /**
   * Cache findFirstOrThrow
   */
  export type CacheFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cache
     */
    select?: CacheSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cache
     */
    omit?: CacheOmit<ExtArgs> | null
    /**
     * Filter, which Cache to fetch.
     */
    where?: CacheWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Caches to fetch.
     */
    orderBy?: CacheOrderByWithRelationInput | CacheOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Caches.
     */
    cursor?: CacheWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Caches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Caches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Caches.
     */
    distinct?: CacheScalarFieldEnum | CacheScalarFieldEnum[]
  }

  /**
   * Cache findMany
   */
  export type CacheFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cache
     */
    select?: CacheSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cache
     */
    omit?: CacheOmit<ExtArgs> | null
    /**
     * Filter, which Caches to fetch.
     */
    where?: CacheWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Caches to fetch.
     */
    orderBy?: CacheOrderByWithRelationInput | CacheOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Caches.
     */
    cursor?: CacheWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Caches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Caches.
     */
    skip?: number
    distinct?: CacheScalarFieldEnum | CacheScalarFieldEnum[]
  }

  /**
   * Cache create
   */
  export type CacheCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cache
     */
    select?: CacheSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cache
     */
    omit?: CacheOmit<ExtArgs> | null
    /**
     * The data needed to create a Cache.
     */
    data: XOR<CacheCreateInput, CacheUncheckedCreateInput>
  }

  /**
   * Cache createMany
   */
  export type CacheCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Caches.
     */
    data: CacheCreateManyInput | CacheCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Cache createManyAndReturn
   */
  export type CacheCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cache
     */
    select?: CacheSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Cache
     */
    omit?: CacheOmit<ExtArgs> | null
    /**
     * The data used to create many Caches.
     */
    data: CacheCreateManyInput | CacheCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Cache update
   */
  export type CacheUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cache
     */
    select?: CacheSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cache
     */
    omit?: CacheOmit<ExtArgs> | null
    /**
     * The data needed to update a Cache.
     */
    data: XOR<CacheUpdateInput, CacheUncheckedUpdateInput>
    /**
     * Choose, which Cache to update.
     */
    where: CacheWhereUniqueInput
  }

  /**
   * Cache updateMany
   */
  export type CacheUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Caches.
     */
    data: XOR<CacheUpdateManyMutationInput, CacheUncheckedUpdateManyInput>
    /**
     * Filter which Caches to update
     */
    where?: CacheWhereInput
    /**
     * Limit how many Caches to update.
     */
    limit?: number
  }

  /**
   * Cache updateManyAndReturn
   */
  export type CacheUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cache
     */
    select?: CacheSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Cache
     */
    omit?: CacheOmit<ExtArgs> | null
    /**
     * The data used to update Caches.
     */
    data: XOR<CacheUpdateManyMutationInput, CacheUncheckedUpdateManyInput>
    /**
     * Filter which Caches to update
     */
    where?: CacheWhereInput
    /**
     * Limit how many Caches to update.
     */
    limit?: number
  }

  /**
   * Cache upsert
   */
  export type CacheUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cache
     */
    select?: CacheSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cache
     */
    omit?: CacheOmit<ExtArgs> | null
    /**
     * The filter to search for the Cache to update in case it exists.
     */
    where: CacheWhereUniqueInput
    /**
     * In case the Cache found by the `where` argument doesn't exist, create a new Cache with this data.
     */
    create: XOR<CacheCreateInput, CacheUncheckedCreateInput>
    /**
     * In case the Cache was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CacheUpdateInput, CacheUncheckedUpdateInput>
  }

  /**
   * Cache delete
   */
  export type CacheDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cache
     */
    select?: CacheSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cache
     */
    omit?: CacheOmit<ExtArgs> | null
    /**
     * Filter which Cache to delete.
     */
    where: CacheWhereUniqueInput
  }

  /**
   * Cache deleteMany
   */
  export type CacheDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Caches to delete
     */
    where?: CacheWhereInput
    /**
     * Limit how many Caches to delete.
     */
    limit?: number
  }

  /**
   * Cache without action
   */
  export type CacheDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cache
     */
    select?: CacheSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cache
     */
    omit?: CacheOmit<ExtArgs> | null
  }


  /**
   * Model CryptoDetails
   */

  export type AggregateCryptoDetails = {
    _count: CryptoDetailsCountAggregateOutputType | null
    _min: CryptoDetailsMinAggregateOutputType | null
    _max: CryptoDetailsMaxAggregateOutputType | null
  }

  export type CryptoDetailsMinAggregateOutputType = {
    id: string | null
    symbol: string | null
    timestamp: Date | null
    updated_at: Date | null
  }

  export type CryptoDetailsMaxAggregateOutputType = {
    id: string | null
    symbol: string | null
    timestamp: Date | null
    updated_at: Date | null
  }

  export type CryptoDetailsCountAggregateOutputType = {
    id: number
    symbol: number
    data: number
    timestamp: number
    updated_at: number
    _all: number
  }


  export type CryptoDetailsMinAggregateInputType = {
    id?: true
    symbol?: true
    timestamp?: true
    updated_at?: true
  }

  export type CryptoDetailsMaxAggregateInputType = {
    id?: true
    symbol?: true
    timestamp?: true
    updated_at?: true
  }

  export type CryptoDetailsCountAggregateInputType = {
    id?: true
    symbol?: true
    data?: true
    timestamp?: true
    updated_at?: true
    _all?: true
  }

  export type CryptoDetailsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CryptoDetails to aggregate.
     */
    where?: CryptoDetailsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CryptoDetails to fetch.
     */
    orderBy?: CryptoDetailsOrderByWithRelationInput | CryptoDetailsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CryptoDetailsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CryptoDetails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CryptoDetails.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CryptoDetails
    **/
    _count?: true | CryptoDetailsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CryptoDetailsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CryptoDetailsMaxAggregateInputType
  }

  export type GetCryptoDetailsAggregateType<T extends CryptoDetailsAggregateArgs> = {
        [P in keyof T & keyof AggregateCryptoDetails]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCryptoDetails[P]>
      : GetScalarType<T[P], AggregateCryptoDetails[P]>
  }




  export type CryptoDetailsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CryptoDetailsWhereInput
    orderBy?: CryptoDetailsOrderByWithAggregationInput | CryptoDetailsOrderByWithAggregationInput[]
    by: CryptoDetailsScalarFieldEnum[] | CryptoDetailsScalarFieldEnum
    having?: CryptoDetailsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CryptoDetailsCountAggregateInputType | true
    _min?: CryptoDetailsMinAggregateInputType
    _max?: CryptoDetailsMaxAggregateInputType
  }

  export type CryptoDetailsGroupByOutputType = {
    id: string
    symbol: string
    data: JsonValue | null
    timestamp: Date
    updated_at: Date
    _count: CryptoDetailsCountAggregateOutputType | null
    _min: CryptoDetailsMinAggregateOutputType | null
    _max: CryptoDetailsMaxAggregateOutputType | null
  }

  type GetCryptoDetailsGroupByPayload<T extends CryptoDetailsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CryptoDetailsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CryptoDetailsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CryptoDetailsGroupByOutputType[P]>
            : GetScalarType<T[P], CryptoDetailsGroupByOutputType[P]>
        }
      >
    >


  export type CryptoDetailsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    symbol?: boolean
    data?: boolean
    timestamp?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["cryptoDetails"]>

  export type CryptoDetailsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    symbol?: boolean
    data?: boolean
    timestamp?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["cryptoDetails"]>

  export type CryptoDetailsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    symbol?: boolean
    data?: boolean
    timestamp?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["cryptoDetails"]>

  export type CryptoDetailsSelectScalar = {
    id?: boolean
    symbol?: boolean
    data?: boolean
    timestamp?: boolean
    updated_at?: boolean
  }

  export type CryptoDetailsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "symbol" | "data" | "timestamp" | "updated_at", ExtArgs["result"]["cryptoDetails"]>

  export type $CryptoDetailsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CryptoDetails"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      symbol: string
      data: Prisma.JsonValue | null
      timestamp: Date
      updated_at: Date
    }, ExtArgs["result"]["cryptoDetails"]>
    composites: {}
  }

  type CryptoDetailsGetPayload<S extends boolean | null | undefined | CryptoDetailsDefaultArgs> = $Result.GetResult<Prisma.$CryptoDetailsPayload, S>

  type CryptoDetailsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CryptoDetailsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CryptoDetailsCountAggregateInputType | true
    }

  export interface CryptoDetailsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CryptoDetails'], meta: { name: 'CryptoDetails' } }
    /**
     * Find zero or one CryptoDetails that matches the filter.
     * @param {CryptoDetailsFindUniqueArgs} args - Arguments to find a CryptoDetails
     * @example
     * // Get one CryptoDetails
     * const cryptoDetails = await prisma.cryptoDetails.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CryptoDetailsFindUniqueArgs>(args: SelectSubset<T, CryptoDetailsFindUniqueArgs<ExtArgs>>): Prisma__CryptoDetailsClient<$Result.GetResult<Prisma.$CryptoDetailsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one CryptoDetails that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CryptoDetailsFindUniqueOrThrowArgs} args - Arguments to find a CryptoDetails
     * @example
     * // Get one CryptoDetails
     * const cryptoDetails = await prisma.cryptoDetails.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CryptoDetailsFindUniqueOrThrowArgs>(args: SelectSubset<T, CryptoDetailsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CryptoDetailsClient<$Result.GetResult<Prisma.$CryptoDetailsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CryptoDetails that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CryptoDetailsFindFirstArgs} args - Arguments to find a CryptoDetails
     * @example
     * // Get one CryptoDetails
     * const cryptoDetails = await prisma.cryptoDetails.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CryptoDetailsFindFirstArgs>(args?: SelectSubset<T, CryptoDetailsFindFirstArgs<ExtArgs>>): Prisma__CryptoDetailsClient<$Result.GetResult<Prisma.$CryptoDetailsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CryptoDetails that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CryptoDetailsFindFirstOrThrowArgs} args - Arguments to find a CryptoDetails
     * @example
     * // Get one CryptoDetails
     * const cryptoDetails = await prisma.cryptoDetails.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CryptoDetailsFindFirstOrThrowArgs>(args?: SelectSubset<T, CryptoDetailsFindFirstOrThrowArgs<ExtArgs>>): Prisma__CryptoDetailsClient<$Result.GetResult<Prisma.$CryptoDetailsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more CryptoDetails that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CryptoDetailsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CryptoDetails
     * const cryptoDetails = await prisma.cryptoDetails.findMany()
     * 
     * // Get first 10 CryptoDetails
     * const cryptoDetails = await prisma.cryptoDetails.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const cryptoDetailsWithIdOnly = await prisma.cryptoDetails.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CryptoDetailsFindManyArgs>(args?: SelectSubset<T, CryptoDetailsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CryptoDetailsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a CryptoDetails.
     * @param {CryptoDetailsCreateArgs} args - Arguments to create a CryptoDetails.
     * @example
     * // Create one CryptoDetails
     * const CryptoDetails = await prisma.cryptoDetails.create({
     *   data: {
     *     // ... data to create a CryptoDetails
     *   }
     * })
     * 
     */
    create<T extends CryptoDetailsCreateArgs>(args: SelectSubset<T, CryptoDetailsCreateArgs<ExtArgs>>): Prisma__CryptoDetailsClient<$Result.GetResult<Prisma.$CryptoDetailsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many CryptoDetails.
     * @param {CryptoDetailsCreateManyArgs} args - Arguments to create many CryptoDetails.
     * @example
     * // Create many CryptoDetails
     * const cryptoDetails = await prisma.cryptoDetails.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CryptoDetailsCreateManyArgs>(args?: SelectSubset<T, CryptoDetailsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CryptoDetails and returns the data saved in the database.
     * @param {CryptoDetailsCreateManyAndReturnArgs} args - Arguments to create many CryptoDetails.
     * @example
     * // Create many CryptoDetails
     * const cryptoDetails = await prisma.cryptoDetails.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CryptoDetails and only return the `id`
     * const cryptoDetailsWithIdOnly = await prisma.cryptoDetails.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CryptoDetailsCreateManyAndReturnArgs>(args?: SelectSubset<T, CryptoDetailsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CryptoDetailsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a CryptoDetails.
     * @param {CryptoDetailsDeleteArgs} args - Arguments to delete one CryptoDetails.
     * @example
     * // Delete one CryptoDetails
     * const CryptoDetails = await prisma.cryptoDetails.delete({
     *   where: {
     *     // ... filter to delete one CryptoDetails
     *   }
     * })
     * 
     */
    delete<T extends CryptoDetailsDeleteArgs>(args: SelectSubset<T, CryptoDetailsDeleteArgs<ExtArgs>>): Prisma__CryptoDetailsClient<$Result.GetResult<Prisma.$CryptoDetailsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one CryptoDetails.
     * @param {CryptoDetailsUpdateArgs} args - Arguments to update one CryptoDetails.
     * @example
     * // Update one CryptoDetails
     * const cryptoDetails = await prisma.cryptoDetails.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CryptoDetailsUpdateArgs>(args: SelectSubset<T, CryptoDetailsUpdateArgs<ExtArgs>>): Prisma__CryptoDetailsClient<$Result.GetResult<Prisma.$CryptoDetailsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more CryptoDetails.
     * @param {CryptoDetailsDeleteManyArgs} args - Arguments to filter CryptoDetails to delete.
     * @example
     * // Delete a few CryptoDetails
     * const { count } = await prisma.cryptoDetails.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CryptoDetailsDeleteManyArgs>(args?: SelectSubset<T, CryptoDetailsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CryptoDetails.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CryptoDetailsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CryptoDetails
     * const cryptoDetails = await prisma.cryptoDetails.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CryptoDetailsUpdateManyArgs>(args: SelectSubset<T, CryptoDetailsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CryptoDetails and returns the data updated in the database.
     * @param {CryptoDetailsUpdateManyAndReturnArgs} args - Arguments to update many CryptoDetails.
     * @example
     * // Update many CryptoDetails
     * const cryptoDetails = await prisma.cryptoDetails.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more CryptoDetails and only return the `id`
     * const cryptoDetailsWithIdOnly = await prisma.cryptoDetails.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CryptoDetailsUpdateManyAndReturnArgs>(args: SelectSubset<T, CryptoDetailsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CryptoDetailsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one CryptoDetails.
     * @param {CryptoDetailsUpsertArgs} args - Arguments to update or create a CryptoDetails.
     * @example
     * // Update or create a CryptoDetails
     * const cryptoDetails = await prisma.cryptoDetails.upsert({
     *   create: {
     *     // ... data to create a CryptoDetails
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CryptoDetails we want to update
     *   }
     * })
     */
    upsert<T extends CryptoDetailsUpsertArgs>(args: SelectSubset<T, CryptoDetailsUpsertArgs<ExtArgs>>): Prisma__CryptoDetailsClient<$Result.GetResult<Prisma.$CryptoDetailsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of CryptoDetails.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CryptoDetailsCountArgs} args - Arguments to filter CryptoDetails to count.
     * @example
     * // Count the number of CryptoDetails
     * const count = await prisma.cryptoDetails.count({
     *   where: {
     *     // ... the filter for the CryptoDetails we want to count
     *   }
     * })
    **/
    count<T extends CryptoDetailsCountArgs>(
      args?: Subset<T, CryptoDetailsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CryptoDetailsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CryptoDetails.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CryptoDetailsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CryptoDetailsAggregateArgs>(args: Subset<T, CryptoDetailsAggregateArgs>): Prisma.PrismaPromise<GetCryptoDetailsAggregateType<T>>

    /**
     * Group by CryptoDetails.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CryptoDetailsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CryptoDetailsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CryptoDetailsGroupByArgs['orderBy'] }
        : { orderBy?: CryptoDetailsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CryptoDetailsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCryptoDetailsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CryptoDetails model
   */
  readonly fields: CryptoDetailsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CryptoDetails.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CryptoDetailsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CryptoDetails model
   */
  interface CryptoDetailsFieldRefs {
    readonly id: FieldRef<"CryptoDetails", 'String'>
    readonly symbol: FieldRef<"CryptoDetails", 'String'>
    readonly data: FieldRef<"CryptoDetails", 'Json'>
    readonly timestamp: FieldRef<"CryptoDetails", 'DateTime'>
    readonly updated_at: FieldRef<"CryptoDetails", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * CryptoDetails findUnique
   */
  export type CryptoDetailsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CryptoDetails
     */
    select?: CryptoDetailsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CryptoDetails
     */
    omit?: CryptoDetailsOmit<ExtArgs> | null
    /**
     * Filter, which CryptoDetails to fetch.
     */
    where: CryptoDetailsWhereUniqueInput
  }

  /**
   * CryptoDetails findUniqueOrThrow
   */
  export type CryptoDetailsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CryptoDetails
     */
    select?: CryptoDetailsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CryptoDetails
     */
    omit?: CryptoDetailsOmit<ExtArgs> | null
    /**
     * Filter, which CryptoDetails to fetch.
     */
    where: CryptoDetailsWhereUniqueInput
  }

  /**
   * CryptoDetails findFirst
   */
  export type CryptoDetailsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CryptoDetails
     */
    select?: CryptoDetailsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CryptoDetails
     */
    omit?: CryptoDetailsOmit<ExtArgs> | null
    /**
     * Filter, which CryptoDetails to fetch.
     */
    where?: CryptoDetailsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CryptoDetails to fetch.
     */
    orderBy?: CryptoDetailsOrderByWithRelationInput | CryptoDetailsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CryptoDetails.
     */
    cursor?: CryptoDetailsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CryptoDetails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CryptoDetails.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CryptoDetails.
     */
    distinct?: CryptoDetailsScalarFieldEnum | CryptoDetailsScalarFieldEnum[]
  }

  /**
   * CryptoDetails findFirstOrThrow
   */
  export type CryptoDetailsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CryptoDetails
     */
    select?: CryptoDetailsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CryptoDetails
     */
    omit?: CryptoDetailsOmit<ExtArgs> | null
    /**
     * Filter, which CryptoDetails to fetch.
     */
    where?: CryptoDetailsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CryptoDetails to fetch.
     */
    orderBy?: CryptoDetailsOrderByWithRelationInput | CryptoDetailsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CryptoDetails.
     */
    cursor?: CryptoDetailsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CryptoDetails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CryptoDetails.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CryptoDetails.
     */
    distinct?: CryptoDetailsScalarFieldEnum | CryptoDetailsScalarFieldEnum[]
  }

  /**
   * CryptoDetails findMany
   */
  export type CryptoDetailsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CryptoDetails
     */
    select?: CryptoDetailsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CryptoDetails
     */
    omit?: CryptoDetailsOmit<ExtArgs> | null
    /**
     * Filter, which CryptoDetails to fetch.
     */
    where?: CryptoDetailsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CryptoDetails to fetch.
     */
    orderBy?: CryptoDetailsOrderByWithRelationInput | CryptoDetailsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CryptoDetails.
     */
    cursor?: CryptoDetailsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CryptoDetails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CryptoDetails.
     */
    skip?: number
    distinct?: CryptoDetailsScalarFieldEnum | CryptoDetailsScalarFieldEnum[]
  }

  /**
   * CryptoDetails create
   */
  export type CryptoDetailsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CryptoDetails
     */
    select?: CryptoDetailsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CryptoDetails
     */
    omit?: CryptoDetailsOmit<ExtArgs> | null
    /**
     * The data needed to create a CryptoDetails.
     */
    data: XOR<CryptoDetailsCreateInput, CryptoDetailsUncheckedCreateInput>
  }

  /**
   * CryptoDetails createMany
   */
  export type CryptoDetailsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CryptoDetails.
     */
    data: CryptoDetailsCreateManyInput | CryptoDetailsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CryptoDetails createManyAndReturn
   */
  export type CryptoDetailsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CryptoDetails
     */
    select?: CryptoDetailsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CryptoDetails
     */
    omit?: CryptoDetailsOmit<ExtArgs> | null
    /**
     * The data used to create many CryptoDetails.
     */
    data: CryptoDetailsCreateManyInput | CryptoDetailsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CryptoDetails update
   */
  export type CryptoDetailsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CryptoDetails
     */
    select?: CryptoDetailsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CryptoDetails
     */
    omit?: CryptoDetailsOmit<ExtArgs> | null
    /**
     * The data needed to update a CryptoDetails.
     */
    data: XOR<CryptoDetailsUpdateInput, CryptoDetailsUncheckedUpdateInput>
    /**
     * Choose, which CryptoDetails to update.
     */
    where: CryptoDetailsWhereUniqueInput
  }

  /**
   * CryptoDetails updateMany
   */
  export type CryptoDetailsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CryptoDetails.
     */
    data: XOR<CryptoDetailsUpdateManyMutationInput, CryptoDetailsUncheckedUpdateManyInput>
    /**
     * Filter which CryptoDetails to update
     */
    where?: CryptoDetailsWhereInput
    /**
     * Limit how many CryptoDetails to update.
     */
    limit?: number
  }

  /**
   * CryptoDetails updateManyAndReturn
   */
  export type CryptoDetailsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CryptoDetails
     */
    select?: CryptoDetailsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CryptoDetails
     */
    omit?: CryptoDetailsOmit<ExtArgs> | null
    /**
     * The data used to update CryptoDetails.
     */
    data: XOR<CryptoDetailsUpdateManyMutationInput, CryptoDetailsUncheckedUpdateManyInput>
    /**
     * Filter which CryptoDetails to update
     */
    where?: CryptoDetailsWhereInput
    /**
     * Limit how many CryptoDetails to update.
     */
    limit?: number
  }

  /**
   * CryptoDetails upsert
   */
  export type CryptoDetailsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CryptoDetails
     */
    select?: CryptoDetailsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CryptoDetails
     */
    omit?: CryptoDetailsOmit<ExtArgs> | null
    /**
     * The filter to search for the CryptoDetails to update in case it exists.
     */
    where: CryptoDetailsWhereUniqueInput
    /**
     * In case the CryptoDetails found by the `where` argument doesn't exist, create a new CryptoDetails with this data.
     */
    create: XOR<CryptoDetailsCreateInput, CryptoDetailsUncheckedCreateInput>
    /**
     * In case the CryptoDetails was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CryptoDetailsUpdateInput, CryptoDetailsUncheckedUpdateInput>
  }

  /**
   * CryptoDetails delete
   */
  export type CryptoDetailsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CryptoDetails
     */
    select?: CryptoDetailsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CryptoDetails
     */
    omit?: CryptoDetailsOmit<ExtArgs> | null
    /**
     * Filter which CryptoDetails to delete.
     */
    where: CryptoDetailsWhereUniqueInput
  }

  /**
   * CryptoDetails deleteMany
   */
  export type CryptoDetailsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CryptoDetails to delete
     */
    where?: CryptoDetailsWhereInput
    /**
     * Limit how many CryptoDetails to delete.
     */
    limit?: number
  }

  /**
   * CryptoDetails without action
   */
  export type CryptoDetailsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CryptoDetails
     */
    select?: CryptoDetailsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CryptoDetails
     */
    omit?: CryptoDetailsOmit<ExtArgs> | null
  }


  /**
   * Model ExchangeData
   */

  export type AggregateExchangeData = {
    _count: ExchangeDataCountAggregateOutputType | null
    _min: ExchangeDataMinAggregateOutputType | null
    _max: ExchangeDataMaxAggregateOutputType | null
  }

  export type ExchangeDataMinAggregateOutputType = {
    id: string | null
    symbol: string | null
    timestamp: Date | null
  }

  export type ExchangeDataMaxAggregateOutputType = {
    id: string | null
    symbol: string | null
    timestamp: Date | null
  }

  export type ExchangeDataCountAggregateOutputType = {
    id: number
    symbol: number
    tickers: number
    timestamp: number
    _all: number
  }


  export type ExchangeDataMinAggregateInputType = {
    id?: true
    symbol?: true
    timestamp?: true
  }

  export type ExchangeDataMaxAggregateInputType = {
    id?: true
    symbol?: true
    timestamp?: true
  }

  export type ExchangeDataCountAggregateInputType = {
    id?: true
    symbol?: true
    tickers?: true
    timestamp?: true
    _all?: true
  }

  export type ExchangeDataAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ExchangeData to aggregate.
     */
    where?: ExchangeDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ExchangeData to fetch.
     */
    orderBy?: ExchangeDataOrderByWithRelationInput | ExchangeDataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ExchangeDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ExchangeData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ExchangeData.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ExchangeData
    **/
    _count?: true | ExchangeDataCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ExchangeDataMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ExchangeDataMaxAggregateInputType
  }

  export type GetExchangeDataAggregateType<T extends ExchangeDataAggregateArgs> = {
        [P in keyof T & keyof AggregateExchangeData]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateExchangeData[P]>
      : GetScalarType<T[P], AggregateExchangeData[P]>
  }




  export type ExchangeDataGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ExchangeDataWhereInput
    orderBy?: ExchangeDataOrderByWithAggregationInput | ExchangeDataOrderByWithAggregationInput[]
    by: ExchangeDataScalarFieldEnum[] | ExchangeDataScalarFieldEnum
    having?: ExchangeDataScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ExchangeDataCountAggregateInputType | true
    _min?: ExchangeDataMinAggregateInputType
    _max?: ExchangeDataMaxAggregateInputType
  }

  export type ExchangeDataGroupByOutputType = {
    id: string
    symbol: string
    tickers: JsonValue | null
    timestamp: Date
    _count: ExchangeDataCountAggregateOutputType | null
    _min: ExchangeDataMinAggregateOutputType | null
    _max: ExchangeDataMaxAggregateOutputType | null
  }

  type GetExchangeDataGroupByPayload<T extends ExchangeDataGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ExchangeDataGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ExchangeDataGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ExchangeDataGroupByOutputType[P]>
            : GetScalarType<T[P], ExchangeDataGroupByOutputType[P]>
        }
      >
    >


  export type ExchangeDataSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    symbol?: boolean
    tickers?: boolean
    timestamp?: boolean
  }, ExtArgs["result"]["exchangeData"]>

  export type ExchangeDataSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    symbol?: boolean
    tickers?: boolean
    timestamp?: boolean
  }, ExtArgs["result"]["exchangeData"]>

  export type ExchangeDataSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    symbol?: boolean
    tickers?: boolean
    timestamp?: boolean
  }, ExtArgs["result"]["exchangeData"]>

  export type ExchangeDataSelectScalar = {
    id?: boolean
    symbol?: boolean
    tickers?: boolean
    timestamp?: boolean
  }

  export type ExchangeDataOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "symbol" | "tickers" | "timestamp", ExtArgs["result"]["exchangeData"]>

  export type $ExchangeDataPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ExchangeData"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      symbol: string
      tickers: Prisma.JsonValue | null
      timestamp: Date
    }, ExtArgs["result"]["exchangeData"]>
    composites: {}
  }

  type ExchangeDataGetPayload<S extends boolean | null | undefined | ExchangeDataDefaultArgs> = $Result.GetResult<Prisma.$ExchangeDataPayload, S>

  type ExchangeDataCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ExchangeDataFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ExchangeDataCountAggregateInputType | true
    }

  export interface ExchangeDataDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ExchangeData'], meta: { name: 'ExchangeData' } }
    /**
     * Find zero or one ExchangeData that matches the filter.
     * @param {ExchangeDataFindUniqueArgs} args - Arguments to find a ExchangeData
     * @example
     * // Get one ExchangeData
     * const exchangeData = await prisma.exchangeData.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ExchangeDataFindUniqueArgs>(args: SelectSubset<T, ExchangeDataFindUniqueArgs<ExtArgs>>): Prisma__ExchangeDataClient<$Result.GetResult<Prisma.$ExchangeDataPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ExchangeData that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ExchangeDataFindUniqueOrThrowArgs} args - Arguments to find a ExchangeData
     * @example
     * // Get one ExchangeData
     * const exchangeData = await prisma.exchangeData.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ExchangeDataFindUniqueOrThrowArgs>(args: SelectSubset<T, ExchangeDataFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ExchangeDataClient<$Result.GetResult<Prisma.$ExchangeDataPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ExchangeData that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExchangeDataFindFirstArgs} args - Arguments to find a ExchangeData
     * @example
     * // Get one ExchangeData
     * const exchangeData = await prisma.exchangeData.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ExchangeDataFindFirstArgs>(args?: SelectSubset<T, ExchangeDataFindFirstArgs<ExtArgs>>): Prisma__ExchangeDataClient<$Result.GetResult<Prisma.$ExchangeDataPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ExchangeData that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExchangeDataFindFirstOrThrowArgs} args - Arguments to find a ExchangeData
     * @example
     * // Get one ExchangeData
     * const exchangeData = await prisma.exchangeData.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ExchangeDataFindFirstOrThrowArgs>(args?: SelectSubset<T, ExchangeDataFindFirstOrThrowArgs<ExtArgs>>): Prisma__ExchangeDataClient<$Result.GetResult<Prisma.$ExchangeDataPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ExchangeData that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExchangeDataFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ExchangeData
     * const exchangeData = await prisma.exchangeData.findMany()
     * 
     * // Get first 10 ExchangeData
     * const exchangeData = await prisma.exchangeData.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const exchangeDataWithIdOnly = await prisma.exchangeData.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ExchangeDataFindManyArgs>(args?: SelectSubset<T, ExchangeDataFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExchangeDataPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ExchangeData.
     * @param {ExchangeDataCreateArgs} args - Arguments to create a ExchangeData.
     * @example
     * // Create one ExchangeData
     * const ExchangeData = await prisma.exchangeData.create({
     *   data: {
     *     // ... data to create a ExchangeData
     *   }
     * })
     * 
     */
    create<T extends ExchangeDataCreateArgs>(args: SelectSubset<T, ExchangeDataCreateArgs<ExtArgs>>): Prisma__ExchangeDataClient<$Result.GetResult<Prisma.$ExchangeDataPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ExchangeData.
     * @param {ExchangeDataCreateManyArgs} args - Arguments to create many ExchangeData.
     * @example
     * // Create many ExchangeData
     * const exchangeData = await prisma.exchangeData.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ExchangeDataCreateManyArgs>(args?: SelectSubset<T, ExchangeDataCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ExchangeData and returns the data saved in the database.
     * @param {ExchangeDataCreateManyAndReturnArgs} args - Arguments to create many ExchangeData.
     * @example
     * // Create many ExchangeData
     * const exchangeData = await prisma.exchangeData.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ExchangeData and only return the `id`
     * const exchangeDataWithIdOnly = await prisma.exchangeData.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ExchangeDataCreateManyAndReturnArgs>(args?: SelectSubset<T, ExchangeDataCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExchangeDataPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ExchangeData.
     * @param {ExchangeDataDeleteArgs} args - Arguments to delete one ExchangeData.
     * @example
     * // Delete one ExchangeData
     * const ExchangeData = await prisma.exchangeData.delete({
     *   where: {
     *     // ... filter to delete one ExchangeData
     *   }
     * })
     * 
     */
    delete<T extends ExchangeDataDeleteArgs>(args: SelectSubset<T, ExchangeDataDeleteArgs<ExtArgs>>): Prisma__ExchangeDataClient<$Result.GetResult<Prisma.$ExchangeDataPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ExchangeData.
     * @param {ExchangeDataUpdateArgs} args - Arguments to update one ExchangeData.
     * @example
     * // Update one ExchangeData
     * const exchangeData = await prisma.exchangeData.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ExchangeDataUpdateArgs>(args: SelectSubset<T, ExchangeDataUpdateArgs<ExtArgs>>): Prisma__ExchangeDataClient<$Result.GetResult<Prisma.$ExchangeDataPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ExchangeData.
     * @param {ExchangeDataDeleteManyArgs} args - Arguments to filter ExchangeData to delete.
     * @example
     * // Delete a few ExchangeData
     * const { count } = await prisma.exchangeData.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ExchangeDataDeleteManyArgs>(args?: SelectSubset<T, ExchangeDataDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ExchangeData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExchangeDataUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ExchangeData
     * const exchangeData = await prisma.exchangeData.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ExchangeDataUpdateManyArgs>(args: SelectSubset<T, ExchangeDataUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ExchangeData and returns the data updated in the database.
     * @param {ExchangeDataUpdateManyAndReturnArgs} args - Arguments to update many ExchangeData.
     * @example
     * // Update many ExchangeData
     * const exchangeData = await prisma.exchangeData.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ExchangeData and only return the `id`
     * const exchangeDataWithIdOnly = await prisma.exchangeData.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ExchangeDataUpdateManyAndReturnArgs>(args: SelectSubset<T, ExchangeDataUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExchangeDataPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ExchangeData.
     * @param {ExchangeDataUpsertArgs} args - Arguments to update or create a ExchangeData.
     * @example
     * // Update or create a ExchangeData
     * const exchangeData = await prisma.exchangeData.upsert({
     *   create: {
     *     // ... data to create a ExchangeData
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ExchangeData we want to update
     *   }
     * })
     */
    upsert<T extends ExchangeDataUpsertArgs>(args: SelectSubset<T, ExchangeDataUpsertArgs<ExtArgs>>): Prisma__ExchangeDataClient<$Result.GetResult<Prisma.$ExchangeDataPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ExchangeData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExchangeDataCountArgs} args - Arguments to filter ExchangeData to count.
     * @example
     * // Count the number of ExchangeData
     * const count = await prisma.exchangeData.count({
     *   where: {
     *     // ... the filter for the ExchangeData we want to count
     *   }
     * })
    **/
    count<T extends ExchangeDataCountArgs>(
      args?: Subset<T, ExchangeDataCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ExchangeDataCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ExchangeData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExchangeDataAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ExchangeDataAggregateArgs>(args: Subset<T, ExchangeDataAggregateArgs>): Prisma.PrismaPromise<GetExchangeDataAggregateType<T>>

    /**
     * Group by ExchangeData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExchangeDataGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ExchangeDataGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ExchangeDataGroupByArgs['orderBy'] }
        : { orderBy?: ExchangeDataGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ExchangeDataGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetExchangeDataGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ExchangeData model
   */
  readonly fields: ExchangeDataFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ExchangeData.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ExchangeDataClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ExchangeData model
   */
  interface ExchangeDataFieldRefs {
    readonly id: FieldRef<"ExchangeData", 'String'>
    readonly symbol: FieldRef<"ExchangeData", 'String'>
    readonly tickers: FieldRef<"ExchangeData", 'Json'>
    readonly timestamp: FieldRef<"ExchangeData", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ExchangeData findUnique
   */
  export type ExchangeDataFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExchangeData
     */
    select?: ExchangeDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExchangeData
     */
    omit?: ExchangeDataOmit<ExtArgs> | null
    /**
     * Filter, which ExchangeData to fetch.
     */
    where: ExchangeDataWhereUniqueInput
  }

  /**
   * ExchangeData findUniqueOrThrow
   */
  export type ExchangeDataFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExchangeData
     */
    select?: ExchangeDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExchangeData
     */
    omit?: ExchangeDataOmit<ExtArgs> | null
    /**
     * Filter, which ExchangeData to fetch.
     */
    where: ExchangeDataWhereUniqueInput
  }

  /**
   * ExchangeData findFirst
   */
  export type ExchangeDataFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExchangeData
     */
    select?: ExchangeDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExchangeData
     */
    omit?: ExchangeDataOmit<ExtArgs> | null
    /**
     * Filter, which ExchangeData to fetch.
     */
    where?: ExchangeDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ExchangeData to fetch.
     */
    orderBy?: ExchangeDataOrderByWithRelationInput | ExchangeDataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ExchangeData.
     */
    cursor?: ExchangeDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ExchangeData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ExchangeData.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ExchangeData.
     */
    distinct?: ExchangeDataScalarFieldEnum | ExchangeDataScalarFieldEnum[]
  }

  /**
   * ExchangeData findFirstOrThrow
   */
  export type ExchangeDataFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExchangeData
     */
    select?: ExchangeDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExchangeData
     */
    omit?: ExchangeDataOmit<ExtArgs> | null
    /**
     * Filter, which ExchangeData to fetch.
     */
    where?: ExchangeDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ExchangeData to fetch.
     */
    orderBy?: ExchangeDataOrderByWithRelationInput | ExchangeDataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ExchangeData.
     */
    cursor?: ExchangeDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ExchangeData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ExchangeData.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ExchangeData.
     */
    distinct?: ExchangeDataScalarFieldEnum | ExchangeDataScalarFieldEnum[]
  }

  /**
   * ExchangeData findMany
   */
  export type ExchangeDataFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExchangeData
     */
    select?: ExchangeDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExchangeData
     */
    omit?: ExchangeDataOmit<ExtArgs> | null
    /**
     * Filter, which ExchangeData to fetch.
     */
    where?: ExchangeDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ExchangeData to fetch.
     */
    orderBy?: ExchangeDataOrderByWithRelationInput | ExchangeDataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ExchangeData.
     */
    cursor?: ExchangeDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ExchangeData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ExchangeData.
     */
    skip?: number
    distinct?: ExchangeDataScalarFieldEnum | ExchangeDataScalarFieldEnum[]
  }

  /**
   * ExchangeData create
   */
  export type ExchangeDataCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExchangeData
     */
    select?: ExchangeDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExchangeData
     */
    omit?: ExchangeDataOmit<ExtArgs> | null
    /**
     * The data needed to create a ExchangeData.
     */
    data: XOR<ExchangeDataCreateInput, ExchangeDataUncheckedCreateInput>
  }

  /**
   * ExchangeData createMany
   */
  export type ExchangeDataCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ExchangeData.
     */
    data: ExchangeDataCreateManyInput | ExchangeDataCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ExchangeData createManyAndReturn
   */
  export type ExchangeDataCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExchangeData
     */
    select?: ExchangeDataSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ExchangeData
     */
    omit?: ExchangeDataOmit<ExtArgs> | null
    /**
     * The data used to create many ExchangeData.
     */
    data: ExchangeDataCreateManyInput | ExchangeDataCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ExchangeData update
   */
  export type ExchangeDataUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExchangeData
     */
    select?: ExchangeDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExchangeData
     */
    omit?: ExchangeDataOmit<ExtArgs> | null
    /**
     * The data needed to update a ExchangeData.
     */
    data: XOR<ExchangeDataUpdateInput, ExchangeDataUncheckedUpdateInput>
    /**
     * Choose, which ExchangeData to update.
     */
    where: ExchangeDataWhereUniqueInput
  }

  /**
   * ExchangeData updateMany
   */
  export type ExchangeDataUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ExchangeData.
     */
    data: XOR<ExchangeDataUpdateManyMutationInput, ExchangeDataUncheckedUpdateManyInput>
    /**
     * Filter which ExchangeData to update
     */
    where?: ExchangeDataWhereInput
    /**
     * Limit how many ExchangeData to update.
     */
    limit?: number
  }

  /**
   * ExchangeData updateManyAndReturn
   */
  export type ExchangeDataUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExchangeData
     */
    select?: ExchangeDataSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ExchangeData
     */
    omit?: ExchangeDataOmit<ExtArgs> | null
    /**
     * The data used to update ExchangeData.
     */
    data: XOR<ExchangeDataUpdateManyMutationInput, ExchangeDataUncheckedUpdateManyInput>
    /**
     * Filter which ExchangeData to update
     */
    where?: ExchangeDataWhereInput
    /**
     * Limit how many ExchangeData to update.
     */
    limit?: number
  }

  /**
   * ExchangeData upsert
   */
  export type ExchangeDataUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExchangeData
     */
    select?: ExchangeDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExchangeData
     */
    omit?: ExchangeDataOmit<ExtArgs> | null
    /**
     * The filter to search for the ExchangeData to update in case it exists.
     */
    where: ExchangeDataWhereUniqueInput
    /**
     * In case the ExchangeData found by the `where` argument doesn't exist, create a new ExchangeData with this data.
     */
    create: XOR<ExchangeDataCreateInput, ExchangeDataUncheckedCreateInput>
    /**
     * In case the ExchangeData was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ExchangeDataUpdateInput, ExchangeDataUncheckedUpdateInput>
  }

  /**
   * ExchangeData delete
   */
  export type ExchangeDataDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExchangeData
     */
    select?: ExchangeDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExchangeData
     */
    omit?: ExchangeDataOmit<ExtArgs> | null
    /**
     * Filter which ExchangeData to delete.
     */
    where: ExchangeDataWhereUniqueInput
  }

  /**
   * ExchangeData deleteMany
   */
  export type ExchangeDataDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ExchangeData to delete
     */
    where?: ExchangeDataWhereInput
    /**
     * Limit how many ExchangeData to delete.
     */
    limit?: number
  }

  /**
   * ExchangeData without action
   */
  export type ExchangeDataDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExchangeData
     */
    select?: ExchangeDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ExchangeData
     */
    omit?: ExchangeDataOmit<ExtArgs> | null
  }


  /**
   * Model OnChainData
   */

  export type AggregateOnChainData = {
    _count: OnChainDataCountAggregateOutputType | null
    _min: OnChainDataMinAggregateOutputType | null
    _max: OnChainDataMaxAggregateOutputType | null
  }

  export type OnChainDataMinAggregateOutputType = {
    id: string | null
    symbol: string | null
    timestamp: Date | null
    updated_at: Date | null
  }

  export type OnChainDataMaxAggregateOutputType = {
    id: string | null
    symbol: string | null
    timestamp: Date | null
    updated_at: Date | null
  }

  export type OnChainDataCountAggregateOutputType = {
    id: number
    symbol: number
    data: number
    timestamp: number
    updated_at: number
    _all: number
  }


  export type OnChainDataMinAggregateInputType = {
    id?: true
    symbol?: true
    timestamp?: true
    updated_at?: true
  }

  export type OnChainDataMaxAggregateInputType = {
    id?: true
    symbol?: true
    timestamp?: true
    updated_at?: true
  }

  export type OnChainDataCountAggregateInputType = {
    id?: true
    symbol?: true
    data?: true
    timestamp?: true
    updated_at?: true
    _all?: true
  }

  export type OnChainDataAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OnChainData to aggregate.
     */
    where?: OnChainDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OnChainData to fetch.
     */
    orderBy?: OnChainDataOrderByWithRelationInput | OnChainDataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OnChainDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OnChainData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OnChainData.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned OnChainData
    **/
    _count?: true | OnChainDataCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OnChainDataMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OnChainDataMaxAggregateInputType
  }

  export type GetOnChainDataAggregateType<T extends OnChainDataAggregateArgs> = {
        [P in keyof T & keyof AggregateOnChainData]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOnChainData[P]>
      : GetScalarType<T[P], AggregateOnChainData[P]>
  }




  export type OnChainDataGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OnChainDataWhereInput
    orderBy?: OnChainDataOrderByWithAggregationInput | OnChainDataOrderByWithAggregationInput[]
    by: OnChainDataScalarFieldEnum[] | OnChainDataScalarFieldEnum
    having?: OnChainDataScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OnChainDataCountAggregateInputType | true
    _min?: OnChainDataMinAggregateInputType
    _max?: OnChainDataMaxAggregateInputType
  }

  export type OnChainDataGroupByOutputType = {
    id: string
    symbol: string
    data: JsonValue
    timestamp: Date
    updated_at: Date
    _count: OnChainDataCountAggregateOutputType | null
    _min: OnChainDataMinAggregateOutputType | null
    _max: OnChainDataMaxAggregateOutputType | null
  }

  type GetOnChainDataGroupByPayload<T extends OnChainDataGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OnChainDataGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OnChainDataGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OnChainDataGroupByOutputType[P]>
            : GetScalarType<T[P], OnChainDataGroupByOutputType[P]>
        }
      >
    >


  export type OnChainDataSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    symbol?: boolean
    data?: boolean
    timestamp?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["onChainData"]>

  export type OnChainDataSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    symbol?: boolean
    data?: boolean
    timestamp?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["onChainData"]>

  export type OnChainDataSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    symbol?: boolean
    data?: boolean
    timestamp?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["onChainData"]>

  export type OnChainDataSelectScalar = {
    id?: boolean
    symbol?: boolean
    data?: boolean
    timestamp?: boolean
    updated_at?: boolean
  }

  export type OnChainDataOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "symbol" | "data" | "timestamp" | "updated_at", ExtArgs["result"]["onChainData"]>

  export type $OnChainDataPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "OnChainData"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      symbol: string
      data: Prisma.JsonValue
      timestamp: Date
      updated_at: Date
    }, ExtArgs["result"]["onChainData"]>
    composites: {}
  }

  type OnChainDataGetPayload<S extends boolean | null | undefined | OnChainDataDefaultArgs> = $Result.GetResult<Prisma.$OnChainDataPayload, S>

  type OnChainDataCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<OnChainDataFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: OnChainDataCountAggregateInputType | true
    }

  export interface OnChainDataDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['OnChainData'], meta: { name: 'OnChainData' } }
    /**
     * Find zero or one OnChainData that matches the filter.
     * @param {OnChainDataFindUniqueArgs} args - Arguments to find a OnChainData
     * @example
     * // Get one OnChainData
     * const onChainData = await prisma.onChainData.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends OnChainDataFindUniqueArgs>(args: SelectSubset<T, OnChainDataFindUniqueArgs<ExtArgs>>): Prisma__OnChainDataClient<$Result.GetResult<Prisma.$OnChainDataPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one OnChainData that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {OnChainDataFindUniqueOrThrowArgs} args - Arguments to find a OnChainData
     * @example
     * // Get one OnChainData
     * const onChainData = await prisma.onChainData.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends OnChainDataFindUniqueOrThrowArgs>(args: SelectSubset<T, OnChainDataFindUniqueOrThrowArgs<ExtArgs>>): Prisma__OnChainDataClient<$Result.GetResult<Prisma.$OnChainDataPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first OnChainData that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OnChainDataFindFirstArgs} args - Arguments to find a OnChainData
     * @example
     * // Get one OnChainData
     * const onChainData = await prisma.onChainData.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends OnChainDataFindFirstArgs>(args?: SelectSubset<T, OnChainDataFindFirstArgs<ExtArgs>>): Prisma__OnChainDataClient<$Result.GetResult<Prisma.$OnChainDataPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first OnChainData that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OnChainDataFindFirstOrThrowArgs} args - Arguments to find a OnChainData
     * @example
     * // Get one OnChainData
     * const onChainData = await prisma.onChainData.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends OnChainDataFindFirstOrThrowArgs>(args?: SelectSubset<T, OnChainDataFindFirstOrThrowArgs<ExtArgs>>): Prisma__OnChainDataClient<$Result.GetResult<Prisma.$OnChainDataPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more OnChainData that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OnChainDataFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all OnChainData
     * const onChainData = await prisma.onChainData.findMany()
     * 
     * // Get first 10 OnChainData
     * const onChainData = await prisma.onChainData.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const onChainDataWithIdOnly = await prisma.onChainData.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends OnChainDataFindManyArgs>(args?: SelectSubset<T, OnChainDataFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OnChainDataPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a OnChainData.
     * @param {OnChainDataCreateArgs} args - Arguments to create a OnChainData.
     * @example
     * // Create one OnChainData
     * const OnChainData = await prisma.onChainData.create({
     *   data: {
     *     // ... data to create a OnChainData
     *   }
     * })
     * 
     */
    create<T extends OnChainDataCreateArgs>(args: SelectSubset<T, OnChainDataCreateArgs<ExtArgs>>): Prisma__OnChainDataClient<$Result.GetResult<Prisma.$OnChainDataPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many OnChainData.
     * @param {OnChainDataCreateManyArgs} args - Arguments to create many OnChainData.
     * @example
     * // Create many OnChainData
     * const onChainData = await prisma.onChainData.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends OnChainDataCreateManyArgs>(args?: SelectSubset<T, OnChainDataCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many OnChainData and returns the data saved in the database.
     * @param {OnChainDataCreateManyAndReturnArgs} args - Arguments to create many OnChainData.
     * @example
     * // Create many OnChainData
     * const onChainData = await prisma.onChainData.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many OnChainData and only return the `id`
     * const onChainDataWithIdOnly = await prisma.onChainData.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends OnChainDataCreateManyAndReturnArgs>(args?: SelectSubset<T, OnChainDataCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OnChainDataPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a OnChainData.
     * @param {OnChainDataDeleteArgs} args - Arguments to delete one OnChainData.
     * @example
     * // Delete one OnChainData
     * const OnChainData = await prisma.onChainData.delete({
     *   where: {
     *     // ... filter to delete one OnChainData
     *   }
     * })
     * 
     */
    delete<T extends OnChainDataDeleteArgs>(args: SelectSubset<T, OnChainDataDeleteArgs<ExtArgs>>): Prisma__OnChainDataClient<$Result.GetResult<Prisma.$OnChainDataPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one OnChainData.
     * @param {OnChainDataUpdateArgs} args - Arguments to update one OnChainData.
     * @example
     * // Update one OnChainData
     * const onChainData = await prisma.onChainData.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends OnChainDataUpdateArgs>(args: SelectSubset<T, OnChainDataUpdateArgs<ExtArgs>>): Prisma__OnChainDataClient<$Result.GetResult<Prisma.$OnChainDataPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more OnChainData.
     * @param {OnChainDataDeleteManyArgs} args - Arguments to filter OnChainData to delete.
     * @example
     * // Delete a few OnChainData
     * const { count } = await prisma.onChainData.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends OnChainDataDeleteManyArgs>(args?: SelectSubset<T, OnChainDataDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more OnChainData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OnChainDataUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many OnChainData
     * const onChainData = await prisma.onChainData.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends OnChainDataUpdateManyArgs>(args: SelectSubset<T, OnChainDataUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more OnChainData and returns the data updated in the database.
     * @param {OnChainDataUpdateManyAndReturnArgs} args - Arguments to update many OnChainData.
     * @example
     * // Update many OnChainData
     * const onChainData = await prisma.onChainData.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more OnChainData and only return the `id`
     * const onChainDataWithIdOnly = await prisma.onChainData.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends OnChainDataUpdateManyAndReturnArgs>(args: SelectSubset<T, OnChainDataUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OnChainDataPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one OnChainData.
     * @param {OnChainDataUpsertArgs} args - Arguments to update or create a OnChainData.
     * @example
     * // Update or create a OnChainData
     * const onChainData = await prisma.onChainData.upsert({
     *   create: {
     *     // ... data to create a OnChainData
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the OnChainData we want to update
     *   }
     * })
     */
    upsert<T extends OnChainDataUpsertArgs>(args: SelectSubset<T, OnChainDataUpsertArgs<ExtArgs>>): Prisma__OnChainDataClient<$Result.GetResult<Prisma.$OnChainDataPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of OnChainData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OnChainDataCountArgs} args - Arguments to filter OnChainData to count.
     * @example
     * // Count the number of OnChainData
     * const count = await prisma.onChainData.count({
     *   where: {
     *     // ... the filter for the OnChainData we want to count
     *   }
     * })
    **/
    count<T extends OnChainDataCountArgs>(
      args?: Subset<T, OnChainDataCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OnChainDataCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a OnChainData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OnChainDataAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OnChainDataAggregateArgs>(args: Subset<T, OnChainDataAggregateArgs>): Prisma.PrismaPromise<GetOnChainDataAggregateType<T>>

    /**
     * Group by OnChainData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OnChainDataGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OnChainDataGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OnChainDataGroupByArgs['orderBy'] }
        : { orderBy?: OnChainDataGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OnChainDataGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOnChainDataGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the OnChainData model
   */
  readonly fields: OnChainDataFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for OnChainData.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OnChainDataClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the OnChainData model
   */
  interface OnChainDataFieldRefs {
    readonly id: FieldRef<"OnChainData", 'String'>
    readonly symbol: FieldRef<"OnChainData", 'String'>
    readonly data: FieldRef<"OnChainData", 'Json'>
    readonly timestamp: FieldRef<"OnChainData", 'DateTime'>
    readonly updated_at: FieldRef<"OnChainData", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * OnChainData findUnique
   */
  export type OnChainDataFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OnChainData
     */
    select?: OnChainDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OnChainData
     */
    omit?: OnChainDataOmit<ExtArgs> | null
    /**
     * Filter, which OnChainData to fetch.
     */
    where: OnChainDataWhereUniqueInput
  }

  /**
   * OnChainData findUniqueOrThrow
   */
  export type OnChainDataFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OnChainData
     */
    select?: OnChainDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OnChainData
     */
    omit?: OnChainDataOmit<ExtArgs> | null
    /**
     * Filter, which OnChainData to fetch.
     */
    where: OnChainDataWhereUniqueInput
  }

  /**
   * OnChainData findFirst
   */
  export type OnChainDataFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OnChainData
     */
    select?: OnChainDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OnChainData
     */
    omit?: OnChainDataOmit<ExtArgs> | null
    /**
     * Filter, which OnChainData to fetch.
     */
    where?: OnChainDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OnChainData to fetch.
     */
    orderBy?: OnChainDataOrderByWithRelationInput | OnChainDataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OnChainData.
     */
    cursor?: OnChainDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OnChainData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OnChainData.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OnChainData.
     */
    distinct?: OnChainDataScalarFieldEnum | OnChainDataScalarFieldEnum[]
  }

  /**
   * OnChainData findFirstOrThrow
   */
  export type OnChainDataFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OnChainData
     */
    select?: OnChainDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OnChainData
     */
    omit?: OnChainDataOmit<ExtArgs> | null
    /**
     * Filter, which OnChainData to fetch.
     */
    where?: OnChainDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OnChainData to fetch.
     */
    orderBy?: OnChainDataOrderByWithRelationInput | OnChainDataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OnChainData.
     */
    cursor?: OnChainDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OnChainData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OnChainData.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OnChainData.
     */
    distinct?: OnChainDataScalarFieldEnum | OnChainDataScalarFieldEnum[]
  }

  /**
   * OnChainData findMany
   */
  export type OnChainDataFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OnChainData
     */
    select?: OnChainDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OnChainData
     */
    omit?: OnChainDataOmit<ExtArgs> | null
    /**
     * Filter, which OnChainData to fetch.
     */
    where?: OnChainDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OnChainData to fetch.
     */
    orderBy?: OnChainDataOrderByWithRelationInput | OnChainDataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing OnChainData.
     */
    cursor?: OnChainDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OnChainData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OnChainData.
     */
    skip?: number
    distinct?: OnChainDataScalarFieldEnum | OnChainDataScalarFieldEnum[]
  }

  /**
   * OnChainData create
   */
  export type OnChainDataCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OnChainData
     */
    select?: OnChainDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OnChainData
     */
    omit?: OnChainDataOmit<ExtArgs> | null
    /**
     * The data needed to create a OnChainData.
     */
    data: XOR<OnChainDataCreateInput, OnChainDataUncheckedCreateInput>
  }

  /**
   * OnChainData createMany
   */
  export type OnChainDataCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many OnChainData.
     */
    data: OnChainDataCreateManyInput | OnChainDataCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * OnChainData createManyAndReturn
   */
  export type OnChainDataCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OnChainData
     */
    select?: OnChainDataSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the OnChainData
     */
    omit?: OnChainDataOmit<ExtArgs> | null
    /**
     * The data used to create many OnChainData.
     */
    data: OnChainDataCreateManyInput | OnChainDataCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * OnChainData update
   */
  export type OnChainDataUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OnChainData
     */
    select?: OnChainDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OnChainData
     */
    omit?: OnChainDataOmit<ExtArgs> | null
    /**
     * The data needed to update a OnChainData.
     */
    data: XOR<OnChainDataUpdateInput, OnChainDataUncheckedUpdateInput>
    /**
     * Choose, which OnChainData to update.
     */
    where: OnChainDataWhereUniqueInput
  }

  /**
   * OnChainData updateMany
   */
  export type OnChainDataUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update OnChainData.
     */
    data: XOR<OnChainDataUpdateManyMutationInput, OnChainDataUncheckedUpdateManyInput>
    /**
     * Filter which OnChainData to update
     */
    where?: OnChainDataWhereInput
    /**
     * Limit how many OnChainData to update.
     */
    limit?: number
  }

  /**
   * OnChainData updateManyAndReturn
   */
  export type OnChainDataUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OnChainData
     */
    select?: OnChainDataSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the OnChainData
     */
    omit?: OnChainDataOmit<ExtArgs> | null
    /**
     * The data used to update OnChainData.
     */
    data: XOR<OnChainDataUpdateManyMutationInput, OnChainDataUncheckedUpdateManyInput>
    /**
     * Filter which OnChainData to update
     */
    where?: OnChainDataWhereInput
    /**
     * Limit how many OnChainData to update.
     */
    limit?: number
  }

  /**
   * OnChainData upsert
   */
  export type OnChainDataUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OnChainData
     */
    select?: OnChainDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OnChainData
     */
    omit?: OnChainDataOmit<ExtArgs> | null
    /**
     * The filter to search for the OnChainData to update in case it exists.
     */
    where: OnChainDataWhereUniqueInput
    /**
     * In case the OnChainData found by the `where` argument doesn't exist, create a new OnChainData with this data.
     */
    create: XOR<OnChainDataCreateInput, OnChainDataUncheckedCreateInput>
    /**
     * In case the OnChainData was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OnChainDataUpdateInput, OnChainDataUncheckedUpdateInput>
  }

  /**
   * OnChainData delete
   */
  export type OnChainDataDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OnChainData
     */
    select?: OnChainDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OnChainData
     */
    omit?: OnChainDataOmit<ExtArgs> | null
    /**
     * Filter which OnChainData to delete.
     */
    where: OnChainDataWhereUniqueInput
  }

  /**
   * OnChainData deleteMany
   */
  export type OnChainDataDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OnChainData to delete
     */
    where?: OnChainDataWhereInput
    /**
     * Limit how many OnChainData to delete.
     */
    limit?: number
  }

  /**
   * OnChainData without action
   */
  export type OnChainDataDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OnChainData
     */
    select?: OnChainDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the OnChainData
     */
    omit?: OnChainDataOmit<ExtArgs> | null
  }


  /**
   * Model MessariMetrics
   */

  export type AggregateMessariMetrics = {
    _count: MessariMetricsCountAggregateOutputType | null
    _min: MessariMetricsMinAggregateOutputType | null
    _max: MessariMetricsMaxAggregateOutputType | null
  }

  export type MessariMetricsMinAggregateOutputType = {
    id: string | null
    symbol: string | null
    timestamp: Date | null
    updated_at: Date | null
  }

  export type MessariMetricsMaxAggregateOutputType = {
    id: string | null
    symbol: string | null
    timestamp: Date | null
    updated_at: Date | null
  }

  export type MessariMetricsCountAggregateOutputType = {
    id: number
    symbol: number
    data: number
    timestamp: number
    updated_at: number
    _all: number
  }


  export type MessariMetricsMinAggregateInputType = {
    id?: true
    symbol?: true
    timestamp?: true
    updated_at?: true
  }

  export type MessariMetricsMaxAggregateInputType = {
    id?: true
    symbol?: true
    timestamp?: true
    updated_at?: true
  }

  export type MessariMetricsCountAggregateInputType = {
    id?: true
    symbol?: true
    data?: true
    timestamp?: true
    updated_at?: true
    _all?: true
  }

  export type MessariMetricsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MessariMetrics to aggregate.
     */
    where?: MessariMetricsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MessariMetrics to fetch.
     */
    orderBy?: MessariMetricsOrderByWithRelationInput | MessariMetricsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MessariMetricsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MessariMetrics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MessariMetrics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MessariMetrics
    **/
    _count?: true | MessariMetricsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MessariMetricsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MessariMetricsMaxAggregateInputType
  }

  export type GetMessariMetricsAggregateType<T extends MessariMetricsAggregateArgs> = {
        [P in keyof T & keyof AggregateMessariMetrics]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMessariMetrics[P]>
      : GetScalarType<T[P], AggregateMessariMetrics[P]>
  }




  export type MessariMetricsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MessariMetricsWhereInput
    orderBy?: MessariMetricsOrderByWithAggregationInput | MessariMetricsOrderByWithAggregationInput[]
    by: MessariMetricsScalarFieldEnum[] | MessariMetricsScalarFieldEnum
    having?: MessariMetricsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MessariMetricsCountAggregateInputType | true
    _min?: MessariMetricsMinAggregateInputType
    _max?: MessariMetricsMaxAggregateInputType
  }

  export type MessariMetricsGroupByOutputType = {
    id: string
    symbol: string
    data: JsonValue
    timestamp: Date
    updated_at: Date
    _count: MessariMetricsCountAggregateOutputType | null
    _min: MessariMetricsMinAggregateOutputType | null
    _max: MessariMetricsMaxAggregateOutputType | null
  }

  type GetMessariMetricsGroupByPayload<T extends MessariMetricsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MessariMetricsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MessariMetricsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MessariMetricsGroupByOutputType[P]>
            : GetScalarType<T[P], MessariMetricsGroupByOutputType[P]>
        }
      >
    >


  export type MessariMetricsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    symbol?: boolean
    data?: boolean
    timestamp?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["messariMetrics"]>

  export type MessariMetricsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    symbol?: boolean
    data?: boolean
    timestamp?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["messariMetrics"]>

  export type MessariMetricsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    symbol?: boolean
    data?: boolean
    timestamp?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["messariMetrics"]>

  export type MessariMetricsSelectScalar = {
    id?: boolean
    symbol?: boolean
    data?: boolean
    timestamp?: boolean
    updated_at?: boolean
  }

  export type MessariMetricsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "symbol" | "data" | "timestamp" | "updated_at", ExtArgs["result"]["messariMetrics"]>

  export type $MessariMetricsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MessariMetrics"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      symbol: string
      data: Prisma.JsonValue
      timestamp: Date
      updated_at: Date
    }, ExtArgs["result"]["messariMetrics"]>
    composites: {}
  }

  type MessariMetricsGetPayload<S extends boolean | null | undefined | MessariMetricsDefaultArgs> = $Result.GetResult<Prisma.$MessariMetricsPayload, S>

  type MessariMetricsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MessariMetricsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MessariMetricsCountAggregateInputType | true
    }

  export interface MessariMetricsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MessariMetrics'], meta: { name: 'MessariMetrics' } }
    /**
     * Find zero or one MessariMetrics that matches the filter.
     * @param {MessariMetricsFindUniqueArgs} args - Arguments to find a MessariMetrics
     * @example
     * // Get one MessariMetrics
     * const messariMetrics = await prisma.messariMetrics.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MessariMetricsFindUniqueArgs>(args: SelectSubset<T, MessariMetricsFindUniqueArgs<ExtArgs>>): Prisma__MessariMetricsClient<$Result.GetResult<Prisma.$MessariMetricsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one MessariMetrics that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MessariMetricsFindUniqueOrThrowArgs} args - Arguments to find a MessariMetrics
     * @example
     * // Get one MessariMetrics
     * const messariMetrics = await prisma.messariMetrics.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MessariMetricsFindUniqueOrThrowArgs>(args: SelectSubset<T, MessariMetricsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MessariMetricsClient<$Result.GetResult<Prisma.$MessariMetricsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MessariMetrics that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessariMetricsFindFirstArgs} args - Arguments to find a MessariMetrics
     * @example
     * // Get one MessariMetrics
     * const messariMetrics = await prisma.messariMetrics.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MessariMetricsFindFirstArgs>(args?: SelectSubset<T, MessariMetricsFindFirstArgs<ExtArgs>>): Prisma__MessariMetricsClient<$Result.GetResult<Prisma.$MessariMetricsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MessariMetrics that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessariMetricsFindFirstOrThrowArgs} args - Arguments to find a MessariMetrics
     * @example
     * // Get one MessariMetrics
     * const messariMetrics = await prisma.messariMetrics.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MessariMetricsFindFirstOrThrowArgs>(args?: SelectSubset<T, MessariMetricsFindFirstOrThrowArgs<ExtArgs>>): Prisma__MessariMetricsClient<$Result.GetResult<Prisma.$MessariMetricsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more MessariMetrics that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessariMetricsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MessariMetrics
     * const messariMetrics = await prisma.messariMetrics.findMany()
     * 
     * // Get first 10 MessariMetrics
     * const messariMetrics = await prisma.messariMetrics.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const messariMetricsWithIdOnly = await prisma.messariMetrics.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MessariMetricsFindManyArgs>(args?: SelectSubset<T, MessariMetricsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessariMetricsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a MessariMetrics.
     * @param {MessariMetricsCreateArgs} args - Arguments to create a MessariMetrics.
     * @example
     * // Create one MessariMetrics
     * const MessariMetrics = await prisma.messariMetrics.create({
     *   data: {
     *     // ... data to create a MessariMetrics
     *   }
     * })
     * 
     */
    create<T extends MessariMetricsCreateArgs>(args: SelectSubset<T, MessariMetricsCreateArgs<ExtArgs>>): Prisma__MessariMetricsClient<$Result.GetResult<Prisma.$MessariMetricsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many MessariMetrics.
     * @param {MessariMetricsCreateManyArgs} args - Arguments to create many MessariMetrics.
     * @example
     * // Create many MessariMetrics
     * const messariMetrics = await prisma.messariMetrics.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MessariMetricsCreateManyArgs>(args?: SelectSubset<T, MessariMetricsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many MessariMetrics and returns the data saved in the database.
     * @param {MessariMetricsCreateManyAndReturnArgs} args - Arguments to create many MessariMetrics.
     * @example
     * // Create many MessariMetrics
     * const messariMetrics = await prisma.messariMetrics.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many MessariMetrics and only return the `id`
     * const messariMetricsWithIdOnly = await prisma.messariMetrics.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MessariMetricsCreateManyAndReturnArgs>(args?: SelectSubset<T, MessariMetricsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessariMetricsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a MessariMetrics.
     * @param {MessariMetricsDeleteArgs} args - Arguments to delete one MessariMetrics.
     * @example
     * // Delete one MessariMetrics
     * const MessariMetrics = await prisma.messariMetrics.delete({
     *   where: {
     *     // ... filter to delete one MessariMetrics
     *   }
     * })
     * 
     */
    delete<T extends MessariMetricsDeleteArgs>(args: SelectSubset<T, MessariMetricsDeleteArgs<ExtArgs>>): Prisma__MessariMetricsClient<$Result.GetResult<Prisma.$MessariMetricsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one MessariMetrics.
     * @param {MessariMetricsUpdateArgs} args - Arguments to update one MessariMetrics.
     * @example
     * // Update one MessariMetrics
     * const messariMetrics = await prisma.messariMetrics.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MessariMetricsUpdateArgs>(args: SelectSubset<T, MessariMetricsUpdateArgs<ExtArgs>>): Prisma__MessariMetricsClient<$Result.GetResult<Prisma.$MessariMetricsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more MessariMetrics.
     * @param {MessariMetricsDeleteManyArgs} args - Arguments to filter MessariMetrics to delete.
     * @example
     * // Delete a few MessariMetrics
     * const { count } = await prisma.messariMetrics.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MessariMetricsDeleteManyArgs>(args?: SelectSubset<T, MessariMetricsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MessariMetrics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessariMetricsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MessariMetrics
     * const messariMetrics = await prisma.messariMetrics.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MessariMetricsUpdateManyArgs>(args: SelectSubset<T, MessariMetricsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MessariMetrics and returns the data updated in the database.
     * @param {MessariMetricsUpdateManyAndReturnArgs} args - Arguments to update many MessariMetrics.
     * @example
     * // Update many MessariMetrics
     * const messariMetrics = await prisma.messariMetrics.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more MessariMetrics and only return the `id`
     * const messariMetricsWithIdOnly = await prisma.messariMetrics.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MessariMetricsUpdateManyAndReturnArgs>(args: SelectSubset<T, MessariMetricsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessariMetricsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one MessariMetrics.
     * @param {MessariMetricsUpsertArgs} args - Arguments to update or create a MessariMetrics.
     * @example
     * // Update or create a MessariMetrics
     * const messariMetrics = await prisma.messariMetrics.upsert({
     *   create: {
     *     // ... data to create a MessariMetrics
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MessariMetrics we want to update
     *   }
     * })
     */
    upsert<T extends MessariMetricsUpsertArgs>(args: SelectSubset<T, MessariMetricsUpsertArgs<ExtArgs>>): Prisma__MessariMetricsClient<$Result.GetResult<Prisma.$MessariMetricsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of MessariMetrics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessariMetricsCountArgs} args - Arguments to filter MessariMetrics to count.
     * @example
     * // Count the number of MessariMetrics
     * const count = await prisma.messariMetrics.count({
     *   where: {
     *     // ... the filter for the MessariMetrics we want to count
     *   }
     * })
    **/
    count<T extends MessariMetricsCountArgs>(
      args?: Subset<T, MessariMetricsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MessariMetricsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MessariMetrics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessariMetricsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MessariMetricsAggregateArgs>(args: Subset<T, MessariMetricsAggregateArgs>): Prisma.PrismaPromise<GetMessariMetricsAggregateType<T>>

    /**
     * Group by MessariMetrics.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessariMetricsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MessariMetricsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MessariMetricsGroupByArgs['orderBy'] }
        : { orderBy?: MessariMetricsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MessariMetricsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMessariMetricsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MessariMetrics model
   */
  readonly fields: MessariMetricsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MessariMetrics.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MessariMetricsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MessariMetrics model
   */
  interface MessariMetricsFieldRefs {
    readonly id: FieldRef<"MessariMetrics", 'String'>
    readonly symbol: FieldRef<"MessariMetrics", 'String'>
    readonly data: FieldRef<"MessariMetrics", 'Json'>
    readonly timestamp: FieldRef<"MessariMetrics", 'DateTime'>
    readonly updated_at: FieldRef<"MessariMetrics", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * MessariMetrics findUnique
   */
  export type MessariMetricsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessariMetrics
     */
    select?: MessariMetricsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MessariMetrics
     */
    omit?: MessariMetricsOmit<ExtArgs> | null
    /**
     * Filter, which MessariMetrics to fetch.
     */
    where: MessariMetricsWhereUniqueInput
  }

  /**
   * MessariMetrics findUniqueOrThrow
   */
  export type MessariMetricsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessariMetrics
     */
    select?: MessariMetricsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MessariMetrics
     */
    omit?: MessariMetricsOmit<ExtArgs> | null
    /**
     * Filter, which MessariMetrics to fetch.
     */
    where: MessariMetricsWhereUniqueInput
  }

  /**
   * MessariMetrics findFirst
   */
  export type MessariMetricsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessariMetrics
     */
    select?: MessariMetricsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MessariMetrics
     */
    omit?: MessariMetricsOmit<ExtArgs> | null
    /**
     * Filter, which MessariMetrics to fetch.
     */
    where?: MessariMetricsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MessariMetrics to fetch.
     */
    orderBy?: MessariMetricsOrderByWithRelationInput | MessariMetricsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MessariMetrics.
     */
    cursor?: MessariMetricsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MessariMetrics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MessariMetrics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MessariMetrics.
     */
    distinct?: MessariMetricsScalarFieldEnum | MessariMetricsScalarFieldEnum[]
  }

  /**
   * MessariMetrics findFirstOrThrow
   */
  export type MessariMetricsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessariMetrics
     */
    select?: MessariMetricsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MessariMetrics
     */
    omit?: MessariMetricsOmit<ExtArgs> | null
    /**
     * Filter, which MessariMetrics to fetch.
     */
    where?: MessariMetricsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MessariMetrics to fetch.
     */
    orderBy?: MessariMetricsOrderByWithRelationInput | MessariMetricsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MessariMetrics.
     */
    cursor?: MessariMetricsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MessariMetrics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MessariMetrics.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MessariMetrics.
     */
    distinct?: MessariMetricsScalarFieldEnum | MessariMetricsScalarFieldEnum[]
  }

  /**
   * MessariMetrics findMany
   */
  export type MessariMetricsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessariMetrics
     */
    select?: MessariMetricsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MessariMetrics
     */
    omit?: MessariMetricsOmit<ExtArgs> | null
    /**
     * Filter, which MessariMetrics to fetch.
     */
    where?: MessariMetricsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MessariMetrics to fetch.
     */
    orderBy?: MessariMetricsOrderByWithRelationInput | MessariMetricsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MessariMetrics.
     */
    cursor?: MessariMetricsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MessariMetrics from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MessariMetrics.
     */
    skip?: number
    distinct?: MessariMetricsScalarFieldEnum | MessariMetricsScalarFieldEnum[]
  }

  /**
   * MessariMetrics create
   */
  export type MessariMetricsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessariMetrics
     */
    select?: MessariMetricsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MessariMetrics
     */
    omit?: MessariMetricsOmit<ExtArgs> | null
    /**
     * The data needed to create a MessariMetrics.
     */
    data: XOR<MessariMetricsCreateInput, MessariMetricsUncheckedCreateInput>
  }

  /**
   * MessariMetrics createMany
   */
  export type MessariMetricsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MessariMetrics.
     */
    data: MessariMetricsCreateManyInput | MessariMetricsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MessariMetrics createManyAndReturn
   */
  export type MessariMetricsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessariMetrics
     */
    select?: MessariMetricsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MessariMetrics
     */
    omit?: MessariMetricsOmit<ExtArgs> | null
    /**
     * The data used to create many MessariMetrics.
     */
    data: MessariMetricsCreateManyInput | MessariMetricsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MessariMetrics update
   */
  export type MessariMetricsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessariMetrics
     */
    select?: MessariMetricsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MessariMetrics
     */
    omit?: MessariMetricsOmit<ExtArgs> | null
    /**
     * The data needed to update a MessariMetrics.
     */
    data: XOR<MessariMetricsUpdateInput, MessariMetricsUncheckedUpdateInput>
    /**
     * Choose, which MessariMetrics to update.
     */
    where: MessariMetricsWhereUniqueInput
  }

  /**
   * MessariMetrics updateMany
   */
  export type MessariMetricsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MessariMetrics.
     */
    data: XOR<MessariMetricsUpdateManyMutationInput, MessariMetricsUncheckedUpdateManyInput>
    /**
     * Filter which MessariMetrics to update
     */
    where?: MessariMetricsWhereInput
    /**
     * Limit how many MessariMetrics to update.
     */
    limit?: number
  }

  /**
   * MessariMetrics updateManyAndReturn
   */
  export type MessariMetricsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessariMetrics
     */
    select?: MessariMetricsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MessariMetrics
     */
    omit?: MessariMetricsOmit<ExtArgs> | null
    /**
     * The data used to update MessariMetrics.
     */
    data: XOR<MessariMetricsUpdateManyMutationInput, MessariMetricsUncheckedUpdateManyInput>
    /**
     * Filter which MessariMetrics to update
     */
    where?: MessariMetricsWhereInput
    /**
     * Limit how many MessariMetrics to update.
     */
    limit?: number
  }

  /**
   * MessariMetrics upsert
   */
  export type MessariMetricsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessariMetrics
     */
    select?: MessariMetricsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MessariMetrics
     */
    omit?: MessariMetricsOmit<ExtArgs> | null
    /**
     * The filter to search for the MessariMetrics to update in case it exists.
     */
    where: MessariMetricsWhereUniqueInput
    /**
     * In case the MessariMetrics found by the `where` argument doesn't exist, create a new MessariMetrics with this data.
     */
    create: XOR<MessariMetricsCreateInput, MessariMetricsUncheckedCreateInput>
    /**
     * In case the MessariMetrics was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MessariMetricsUpdateInput, MessariMetricsUncheckedUpdateInput>
  }

  /**
   * MessariMetrics delete
   */
  export type MessariMetricsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessariMetrics
     */
    select?: MessariMetricsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MessariMetrics
     */
    omit?: MessariMetricsOmit<ExtArgs> | null
    /**
     * Filter which MessariMetrics to delete.
     */
    where: MessariMetricsWhereUniqueInput
  }

  /**
   * MessariMetrics deleteMany
   */
  export type MessariMetricsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MessariMetrics to delete
     */
    where?: MessariMetricsWhereInput
    /**
     * Limit how many MessariMetrics to delete.
     */
    limit?: number
  }

  /**
   * MessariMetrics without action
   */
  export type MessariMetricsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MessariMetrics
     */
    select?: MessariMetricsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MessariMetrics
     */
    omit?: MessariMetricsOmit<ExtArgs> | null
  }


  /**
   * Model DefiProtocolData
   */

  export type AggregateDefiProtocolData = {
    _count: DefiProtocolDataCountAggregateOutputType | null
    _min: DefiProtocolDataMinAggregateOutputType | null
    _max: DefiProtocolDataMaxAggregateOutputType | null
  }

  export type DefiProtocolDataMinAggregateOutputType = {
    id: string | null
    symbol: string | null
    timestamp: Date | null
    updated_at: Date | null
  }

  export type DefiProtocolDataMaxAggregateOutputType = {
    id: string | null
    symbol: string | null
    timestamp: Date | null
    updated_at: Date | null
  }

  export type DefiProtocolDataCountAggregateOutputType = {
    id: number
    symbol: number
    data: number
    timestamp: number
    updated_at: number
    _all: number
  }


  export type DefiProtocolDataMinAggregateInputType = {
    id?: true
    symbol?: true
    timestamp?: true
    updated_at?: true
  }

  export type DefiProtocolDataMaxAggregateInputType = {
    id?: true
    symbol?: true
    timestamp?: true
    updated_at?: true
  }

  export type DefiProtocolDataCountAggregateInputType = {
    id?: true
    symbol?: true
    data?: true
    timestamp?: true
    updated_at?: true
    _all?: true
  }

  export type DefiProtocolDataAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DefiProtocolData to aggregate.
     */
    where?: DefiProtocolDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DefiProtocolData to fetch.
     */
    orderBy?: DefiProtocolDataOrderByWithRelationInput | DefiProtocolDataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DefiProtocolDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DefiProtocolData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DefiProtocolData.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DefiProtocolData
    **/
    _count?: true | DefiProtocolDataCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DefiProtocolDataMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DefiProtocolDataMaxAggregateInputType
  }

  export type GetDefiProtocolDataAggregateType<T extends DefiProtocolDataAggregateArgs> = {
        [P in keyof T & keyof AggregateDefiProtocolData]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDefiProtocolData[P]>
      : GetScalarType<T[P], AggregateDefiProtocolData[P]>
  }




  export type DefiProtocolDataGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DefiProtocolDataWhereInput
    orderBy?: DefiProtocolDataOrderByWithAggregationInput | DefiProtocolDataOrderByWithAggregationInput[]
    by: DefiProtocolDataScalarFieldEnum[] | DefiProtocolDataScalarFieldEnum
    having?: DefiProtocolDataScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DefiProtocolDataCountAggregateInputType | true
    _min?: DefiProtocolDataMinAggregateInputType
    _max?: DefiProtocolDataMaxAggregateInputType
  }

  export type DefiProtocolDataGroupByOutputType = {
    id: string
    symbol: string
    data: JsonValue
    timestamp: Date
    updated_at: Date
    _count: DefiProtocolDataCountAggregateOutputType | null
    _min: DefiProtocolDataMinAggregateOutputType | null
    _max: DefiProtocolDataMaxAggregateOutputType | null
  }

  type GetDefiProtocolDataGroupByPayload<T extends DefiProtocolDataGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DefiProtocolDataGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DefiProtocolDataGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DefiProtocolDataGroupByOutputType[P]>
            : GetScalarType<T[P], DefiProtocolDataGroupByOutputType[P]>
        }
      >
    >


  export type DefiProtocolDataSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    symbol?: boolean
    data?: boolean
    timestamp?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["defiProtocolData"]>

  export type DefiProtocolDataSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    symbol?: boolean
    data?: boolean
    timestamp?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["defiProtocolData"]>

  export type DefiProtocolDataSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    symbol?: boolean
    data?: boolean
    timestamp?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["defiProtocolData"]>

  export type DefiProtocolDataSelectScalar = {
    id?: boolean
    symbol?: boolean
    data?: boolean
    timestamp?: boolean
    updated_at?: boolean
  }

  export type DefiProtocolDataOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "symbol" | "data" | "timestamp" | "updated_at", ExtArgs["result"]["defiProtocolData"]>

  export type $DefiProtocolDataPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DefiProtocolData"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      symbol: string
      data: Prisma.JsonValue
      timestamp: Date
      updated_at: Date
    }, ExtArgs["result"]["defiProtocolData"]>
    composites: {}
  }

  type DefiProtocolDataGetPayload<S extends boolean | null | undefined | DefiProtocolDataDefaultArgs> = $Result.GetResult<Prisma.$DefiProtocolDataPayload, S>

  type DefiProtocolDataCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<DefiProtocolDataFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DefiProtocolDataCountAggregateInputType | true
    }

  export interface DefiProtocolDataDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DefiProtocolData'], meta: { name: 'DefiProtocolData' } }
    /**
     * Find zero or one DefiProtocolData that matches the filter.
     * @param {DefiProtocolDataFindUniqueArgs} args - Arguments to find a DefiProtocolData
     * @example
     * // Get one DefiProtocolData
     * const defiProtocolData = await prisma.defiProtocolData.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DefiProtocolDataFindUniqueArgs>(args: SelectSubset<T, DefiProtocolDataFindUniqueArgs<ExtArgs>>): Prisma__DefiProtocolDataClient<$Result.GetResult<Prisma.$DefiProtocolDataPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one DefiProtocolData that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {DefiProtocolDataFindUniqueOrThrowArgs} args - Arguments to find a DefiProtocolData
     * @example
     * // Get one DefiProtocolData
     * const defiProtocolData = await prisma.defiProtocolData.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DefiProtocolDataFindUniqueOrThrowArgs>(args: SelectSubset<T, DefiProtocolDataFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DefiProtocolDataClient<$Result.GetResult<Prisma.$DefiProtocolDataPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DefiProtocolData that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DefiProtocolDataFindFirstArgs} args - Arguments to find a DefiProtocolData
     * @example
     * // Get one DefiProtocolData
     * const defiProtocolData = await prisma.defiProtocolData.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DefiProtocolDataFindFirstArgs>(args?: SelectSubset<T, DefiProtocolDataFindFirstArgs<ExtArgs>>): Prisma__DefiProtocolDataClient<$Result.GetResult<Prisma.$DefiProtocolDataPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DefiProtocolData that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DefiProtocolDataFindFirstOrThrowArgs} args - Arguments to find a DefiProtocolData
     * @example
     * // Get one DefiProtocolData
     * const defiProtocolData = await prisma.defiProtocolData.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DefiProtocolDataFindFirstOrThrowArgs>(args?: SelectSubset<T, DefiProtocolDataFindFirstOrThrowArgs<ExtArgs>>): Prisma__DefiProtocolDataClient<$Result.GetResult<Prisma.$DefiProtocolDataPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more DefiProtocolData that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DefiProtocolDataFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DefiProtocolData
     * const defiProtocolData = await prisma.defiProtocolData.findMany()
     * 
     * // Get first 10 DefiProtocolData
     * const defiProtocolData = await prisma.defiProtocolData.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const defiProtocolDataWithIdOnly = await prisma.defiProtocolData.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DefiProtocolDataFindManyArgs>(args?: SelectSubset<T, DefiProtocolDataFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DefiProtocolDataPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a DefiProtocolData.
     * @param {DefiProtocolDataCreateArgs} args - Arguments to create a DefiProtocolData.
     * @example
     * // Create one DefiProtocolData
     * const DefiProtocolData = await prisma.defiProtocolData.create({
     *   data: {
     *     // ... data to create a DefiProtocolData
     *   }
     * })
     * 
     */
    create<T extends DefiProtocolDataCreateArgs>(args: SelectSubset<T, DefiProtocolDataCreateArgs<ExtArgs>>): Prisma__DefiProtocolDataClient<$Result.GetResult<Prisma.$DefiProtocolDataPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many DefiProtocolData.
     * @param {DefiProtocolDataCreateManyArgs} args - Arguments to create many DefiProtocolData.
     * @example
     * // Create many DefiProtocolData
     * const defiProtocolData = await prisma.defiProtocolData.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DefiProtocolDataCreateManyArgs>(args?: SelectSubset<T, DefiProtocolDataCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many DefiProtocolData and returns the data saved in the database.
     * @param {DefiProtocolDataCreateManyAndReturnArgs} args - Arguments to create many DefiProtocolData.
     * @example
     * // Create many DefiProtocolData
     * const defiProtocolData = await prisma.defiProtocolData.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many DefiProtocolData and only return the `id`
     * const defiProtocolDataWithIdOnly = await prisma.defiProtocolData.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DefiProtocolDataCreateManyAndReturnArgs>(args?: SelectSubset<T, DefiProtocolDataCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DefiProtocolDataPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a DefiProtocolData.
     * @param {DefiProtocolDataDeleteArgs} args - Arguments to delete one DefiProtocolData.
     * @example
     * // Delete one DefiProtocolData
     * const DefiProtocolData = await prisma.defiProtocolData.delete({
     *   where: {
     *     // ... filter to delete one DefiProtocolData
     *   }
     * })
     * 
     */
    delete<T extends DefiProtocolDataDeleteArgs>(args: SelectSubset<T, DefiProtocolDataDeleteArgs<ExtArgs>>): Prisma__DefiProtocolDataClient<$Result.GetResult<Prisma.$DefiProtocolDataPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one DefiProtocolData.
     * @param {DefiProtocolDataUpdateArgs} args - Arguments to update one DefiProtocolData.
     * @example
     * // Update one DefiProtocolData
     * const defiProtocolData = await prisma.defiProtocolData.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DefiProtocolDataUpdateArgs>(args: SelectSubset<T, DefiProtocolDataUpdateArgs<ExtArgs>>): Prisma__DefiProtocolDataClient<$Result.GetResult<Prisma.$DefiProtocolDataPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more DefiProtocolData.
     * @param {DefiProtocolDataDeleteManyArgs} args - Arguments to filter DefiProtocolData to delete.
     * @example
     * // Delete a few DefiProtocolData
     * const { count } = await prisma.defiProtocolData.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DefiProtocolDataDeleteManyArgs>(args?: SelectSubset<T, DefiProtocolDataDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DefiProtocolData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DefiProtocolDataUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DefiProtocolData
     * const defiProtocolData = await prisma.defiProtocolData.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DefiProtocolDataUpdateManyArgs>(args: SelectSubset<T, DefiProtocolDataUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DefiProtocolData and returns the data updated in the database.
     * @param {DefiProtocolDataUpdateManyAndReturnArgs} args - Arguments to update many DefiProtocolData.
     * @example
     * // Update many DefiProtocolData
     * const defiProtocolData = await prisma.defiProtocolData.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more DefiProtocolData and only return the `id`
     * const defiProtocolDataWithIdOnly = await prisma.defiProtocolData.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends DefiProtocolDataUpdateManyAndReturnArgs>(args: SelectSubset<T, DefiProtocolDataUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DefiProtocolDataPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one DefiProtocolData.
     * @param {DefiProtocolDataUpsertArgs} args - Arguments to update or create a DefiProtocolData.
     * @example
     * // Update or create a DefiProtocolData
     * const defiProtocolData = await prisma.defiProtocolData.upsert({
     *   create: {
     *     // ... data to create a DefiProtocolData
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DefiProtocolData we want to update
     *   }
     * })
     */
    upsert<T extends DefiProtocolDataUpsertArgs>(args: SelectSubset<T, DefiProtocolDataUpsertArgs<ExtArgs>>): Prisma__DefiProtocolDataClient<$Result.GetResult<Prisma.$DefiProtocolDataPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of DefiProtocolData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DefiProtocolDataCountArgs} args - Arguments to filter DefiProtocolData to count.
     * @example
     * // Count the number of DefiProtocolData
     * const count = await prisma.defiProtocolData.count({
     *   where: {
     *     // ... the filter for the DefiProtocolData we want to count
     *   }
     * })
    **/
    count<T extends DefiProtocolDataCountArgs>(
      args?: Subset<T, DefiProtocolDataCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DefiProtocolDataCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DefiProtocolData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DefiProtocolDataAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DefiProtocolDataAggregateArgs>(args: Subset<T, DefiProtocolDataAggregateArgs>): Prisma.PrismaPromise<GetDefiProtocolDataAggregateType<T>>

    /**
     * Group by DefiProtocolData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DefiProtocolDataGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DefiProtocolDataGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DefiProtocolDataGroupByArgs['orderBy'] }
        : { orderBy?: DefiProtocolDataGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DefiProtocolDataGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDefiProtocolDataGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DefiProtocolData model
   */
  readonly fields: DefiProtocolDataFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DefiProtocolData.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DefiProtocolDataClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the DefiProtocolData model
   */
  interface DefiProtocolDataFieldRefs {
    readonly id: FieldRef<"DefiProtocolData", 'String'>
    readonly symbol: FieldRef<"DefiProtocolData", 'String'>
    readonly data: FieldRef<"DefiProtocolData", 'Json'>
    readonly timestamp: FieldRef<"DefiProtocolData", 'DateTime'>
    readonly updated_at: FieldRef<"DefiProtocolData", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * DefiProtocolData findUnique
   */
  export type DefiProtocolDataFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DefiProtocolData
     */
    select?: DefiProtocolDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DefiProtocolData
     */
    omit?: DefiProtocolDataOmit<ExtArgs> | null
    /**
     * Filter, which DefiProtocolData to fetch.
     */
    where: DefiProtocolDataWhereUniqueInput
  }

  /**
   * DefiProtocolData findUniqueOrThrow
   */
  export type DefiProtocolDataFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DefiProtocolData
     */
    select?: DefiProtocolDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DefiProtocolData
     */
    omit?: DefiProtocolDataOmit<ExtArgs> | null
    /**
     * Filter, which DefiProtocolData to fetch.
     */
    where: DefiProtocolDataWhereUniqueInput
  }

  /**
   * DefiProtocolData findFirst
   */
  export type DefiProtocolDataFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DefiProtocolData
     */
    select?: DefiProtocolDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DefiProtocolData
     */
    omit?: DefiProtocolDataOmit<ExtArgs> | null
    /**
     * Filter, which DefiProtocolData to fetch.
     */
    where?: DefiProtocolDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DefiProtocolData to fetch.
     */
    orderBy?: DefiProtocolDataOrderByWithRelationInput | DefiProtocolDataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DefiProtocolData.
     */
    cursor?: DefiProtocolDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DefiProtocolData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DefiProtocolData.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DefiProtocolData.
     */
    distinct?: DefiProtocolDataScalarFieldEnum | DefiProtocolDataScalarFieldEnum[]
  }

  /**
   * DefiProtocolData findFirstOrThrow
   */
  export type DefiProtocolDataFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DefiProtocolData
     */
    select?: DefiProtocolDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DefiProtocolData
     */
    omit?: DefiProtocolDataOmit<ExtArgs> | null
    /**
     * Filter, which DefiProtocolData to fetch.
     */
    where?: DefiProtocolDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DefiProtocolData to fetch.
     */
    orderBy?: DefiProtocolDataOrderByWithRelationInput | DefiProtocolDataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DefiProtocolData.
     */
    cursor?: DefiProtocolDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DefiProtocolData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DefiProtocolData.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DefiProtocolData.
     */
    distinct?: DefiProtocolDataScalarFieldEnum | DefiProtocolDataScalarFieldEnum[]
  }

  /**
   * DefiProtocolData findMany
   */
  export type DefiProtocolDataFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DefiProtocolData
     */
    select?: DefiProtocolDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DefiProtocolData
     */
    omit?: DefiProtocolDataOmit<ExtArgs> | null
    /**
     * Filter, which DefiProtocolData to fetch.
     */
    where?: DefiProtocolDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DefiProtocolData to fetch.
     */
    orderBy?: DefiProtocolDataOrderByWithRelationInput | DefiProtocolDataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DefiProtocolData.
     */
    cursor?: DefiProtocolDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DefiProtocolData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DefiProtocolData.
     */
    skip?: number
    distinct?: DefiProtocolDataScalarFieldEnum | DefiProtocolDataScalarFieldEnum[]
  }

  /**
   * DefiProtocolData create
   */
  export type DefiProtocolDataCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DefiProtocolData
     */
    select?: DefiProtocolDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DefiProtocolData
     */
    omit?: DefiProtocolDataOmit<ExtArgs> | null
    /**
     * The data needed to create a DefiProtocolData.
     */
    data: XOR<DefiProtocolDataCreateInput, DefiProtocolDataUncheckedCreateInput>
  }

  /**
   * DefiProtocolData createMany
   */
  export type DefiProtocolDataCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DefiProtocolData.
     */
    data: DefiProtocolDataCreateManyInput | DefiProtocolDataCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * DefiProtocolData createManyAndReturn
   */
  export type DefiProtocolDataCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DefiProtocolData
     */
    select?: DefiProtocolDataSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DefiProtocolData
     */
    omit?: DefiProtocolDataOmit<ExtArgs> | null
    /**
     * The data used to create many DefiProtocolData.
     */
    data: DefiProtocolDataCreateManyInput | DefiProtocolDataCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * DefiProtocolData update
   */
  export type DefiProtocolDataUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DefiProtocolData
     */
    select?: DefiProtocolDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DefiProtocolData
     */
    omit?: DefiProtocolDataOmit<ExtArgs> | null
    /**
     * The data needed to update a DefiProtocolData.
     */
    data: XOR<DefiProtocolDataUpdateInput, DefiProtocolDataUncheckedUpdateInput>
    /**
     * Choose, which DefiProtocolData to update.
     */
    where: DefiProtocolDataWhereUniqueInput
  }

  /**
   * DefiProtocolData updateMany
   */
  export type DefiProtocolDataUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DefiProtocolData.
     */
    data: XOR<DefiProtocolDataUpdateManyMutationInput, DefiProtocolDataUncheckedUpdateManyInput>
    /**
     * Filter which DefiProtocolData to update
     */
    where?: DefiProtocolDataWhereInput
    /**
     * Limit how many DefiProtocolData to update.
     */
    limit?: number
  }

  /**
   * DefiProtocolData updateManyAndReturn
   */
  export type DefiProtocolDataUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DefiProtocolData
     */
    select?: DefiProtocolDataSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DefiProtocolData
     */
    omit?: DefiProtocolDataOmit<ExtArgs> | null
    /**
     * The data used to update DefiProtocolData.
     */
    data: XOR<DefiProtocolDataUpdateManyMutationInput, DefiProtocolDataUncheckedUpdateManyInput>
    /**
     * Filter which DefiProtocolData to update
     */
    where?: DefiProtocolDataWhereInput
    /**
     * Limit how many DefiProtocolData to update.
     */
    limit?: number
  }

  /**
   * DefiProtocolData upsert
   */
  export type DefiProtocolDataUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DefiProtocolData
     */
    select?: DefiProtocolDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DefiProtocolData
     */
    omit?: DefiProtocolDataOmit<ExtArgs> | null
    /**
     * The filter to search for the DefiProtocolData to update in case it exists.
     */
    where: DefiProtocolDataWhereUniqueInput
    /**
     * In case the DefiProtocolData found by the `where` argument doesn't exist, create a new DefiProtocolData with this data.
     */
    create: XOR<DefiProtocolDataCreateInput, DefiProtocolDataUncheckedCreateInput>
    /**
     * In case the DefiProtocolData was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DefiProtocolDataUpdateInput, DefiProtocolDataUncheckedUpdateInput>
  }

  /**
   * DefiProtocolData delete
   */
  export type DefiProtocolDataDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DefiProtocolData
     */
    select?: DefiProtocolDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DefiProtocolData
     */
    omit?: DefiProtocolDataOmit<ExtArgs> | null
    /**
     * Filter which DefiProtocolData to delete.
     */
    where: DefiProtocolDataWhereUniqueInput
  }

  /**
   * DefiProtocolData deleteMany
   */
  export type DefiProtocolDataDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DefiProtocolData to delete
     */
    where?: DefiProtocolDataWhereInput
    /**
     * Limit how many DefiProtocolData to delete.
     */
    limit?: number
  }

  /**
   * DefiProtocolData without action
   */
  export type DefiProtocolDataDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DefiProtocolData
     */
    select?: DefiProtocolDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DefiProtocolData
     */
    omit?: DefiProtocolDataOmit<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    name: 'name',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const WatchlistScalarFieldEnum: {
    id: 'id',
    name: 'name',
    userId: 'userId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type WatchlistScalarFieldEnum = (typeof WatchlistScalarFieldEnum)[keyof typeof WatchlistScalarFieldEnum]


  export const SymbolScalarFieldEnum: {
    id: 'id',
    symbol: 'symbol',
    name: 'name',
    type: 'type',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type SymbolScalarFieldEnum = (typeof SymbolScalarFieldEnum)[keyof typeof SymbolScalarFieldEnum]


  export const PortfolioScalarFieldEnum: {
    id: 'id',
    name: 'name',
    userId: 'userId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type PortfolioScalarFieldEnum = (typeof PortfolioScalarFieldEnum)[keyof typeof PortfolioScalarFieldEnum]


  export const MarketDataScalarFieldEnum: {
    id: 'id',
    symbol: 'symbol',
    name: 'name',
    price: 'price',
    change: 'change',
    volume: 'volume',
    market_cap: 'market_cap',
    timestamp: 'timestamp',
    logo_url: 'logo_url'
  };

  export type MarketDataScalarFieldEnum = (typeof MarketDataScalarFieldEnum)[keyof typeof MarketDataScalarFieldEnum]


  export const ApiLimitScalarFieldEnum: {
    id: 'id',
    apiName: 'apiName',
    dailyLimit: 'dailyLimit',
    requestCount: 'requestCount',
    lastReset: 'lastReset'
  };

  export type ApiLimitScalarFieldEnum = (typeof ApiLimitScalarFieldEnum)[keyof typeof ApiLimitScalarFieldEnum]


  export const ArticleScalarFieldEnum: {
    id: 'id',
    content: 'content',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ArticleScalarFieldEnum = (typeof ArticleScalarFieldEnum)[keyof typeof ArticleScalarFieldEnum]


  export const CryptoMarketMetadataScalarFieldEnum: {
    id: 'id',
    symbol: 'symbol',
    logo_url: 'logo_url',
    description: 'description',
    category: 'category',
    website_url: 'website_url',
    tech_doc_url: 'tech_doc_url',
    source_code_url: 'source_code_url',
    total_market_cap: 'total_market_cap',
    total_volume_24h: 'total_volume_24h',
    btc_dominance: 'btc_dominance',
    eth_dominance: 'eth_dominance',
    active_cryptos: 'active_cryptos',
    active_exchanges: 'active_exchanges',
    timestamp: 'timestamp',
    updated_at: 'updated_at'
  };

  export type CryptoMarketMetadataScalarFieldEnum = (typeof CryptoMarketMetadataScalarFieldEnum)[keyof typeof CryptoMarketMetadataScalarFieldEnum]


  export const CacheScalarFieldEnum: {
    key: 'key',
    data: 'data',
    timestamp: 'timestamp'
  };

  export type CacheScalarFieldEnum = (typeof CacheScalarFieldEnum)[keyof typeof CacheScalarFieldEnum]


  export const CryptoDetailsScalarFieldEnum: {
    id: 'id',
    symbol: 'symbol',
    data: 'data',
    timestamp: 'timestamp',
    updated_at: 'updated_at'
  };

  export type CryptoDetailsScalarFieldEnum = (typeof CryptoDetailsScalarFieldEnum)[keyof typeof CryptoDetailsScalarFieldEnum]


  export const ExchangeDataScalarFieldEnum: {
    id: 'id',
    symbol: 'symbol',
    tickers: 'tickers',
    timestamp: 'timestamp'
  };

  export type ExchangeDataScalarFieldEnum = (typeof ExchangeDataScalarFieldEnum)[keyof typeof ExchangeDataScalarFieldEnum]


  export const OnChainDataScalarFieldEnum: {
    id: 'id',
    symbol: 'symbol',
    data: 'data',
    timestamp: 'timestamp',
    updated_at: 'updated_at'
  };

  export type OnChainDataScalarFieldEnum = (typeof OnChainDataScalarFieldEnum)[keyof typeof OnChainDataScalarFieldEnum]


  export const MessariMetricsScalarFieldEnum: {
    id: 'id',
    symbol: 'symbol',
    data: 'data',
    timestamp: 'timestamp',
    updated_at: 'updated_at'
  };

  export type MessariMetricsScalarFieldEnum = (typeof MessariMetricsScalarFieldEnum)[keyof typeof MessariMetricsScalarFieldEnum]


  export const DefiProtocolDataScalarFieldEnum: {
    id: 'id',
    symbol: 'symbol',
    data: 'data',
    timestamp: 'timestamp',
    updated_at: 'updated_at'
  };

  export type DefiProtocolDataScalarFieldEnum = (typeof DefiProtocolDataScalarFieldEnum)[keyof typeof DefiProtocolDataScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'SymbolType'
   */
  export type EnumSymbolTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SymbolType'>
    


  /**
   * Reference to a field of type 'SymbolType[]'
   */
  export type ListEnumSymbolTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SymbolType[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'QueryMode'
   */
  export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QueryMode'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    name?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    portfolios?: PortfolioListRelationFilter
    watchlists?: WatchlistListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    portfolios?: PortfolioOrderByRelationAggregateInput
    watchlists?: WatchlistOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    portfolios?: PortfolioListRelationFilter
    watchlists?: WatchlistListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    name?: StringNullableWithAggregatesFilter<"User"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type WatchlistWhereInput = {
    AND?: WatchlistWhereInput | WatchlistWhereInput[]
    OR?: WatchlistWhereInput[]
    NOT?: WatchlistWhereInput | WatchlistWhereInput[]
    id?: StringFilter<"Watchlist"> | string
    name?: StringFilter<"Watchlist"> | string
    userId?: StringFilter<"Watchlist"> | string
    createdAt?: DateTimeFilter<"Watchlist"> | Date | string
    updatedAt?: DateTimeFilter<"Watchlist"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    symbols?: SymbolListRelationFilter
  }

  export type WatchlistOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    symbols?: SymbolOrderByRelationAggregateInput
  }

  export type WatchlistWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: WatchlistWhereInput | WatchlistWhereInput[]
    OR?: WatchlistWhereInput[]
    NOT?: WatchlistWhereInput | WatchlistWhereInput[]
    name?: StringFilter<"Watchlist"> | string
    userId?: StringFilter<"Watchlist"> | string
    createdAt?: DateTimeFilter<"Watchlist"> | Date | string
    updatedAt?: DateTimeFilter<"Watchlist"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    symbols?: SymbolListRelationFilter
  }, "id">

  export type WatchlistOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: WatchlistCountOrderByAggregateInput
    _max?: WatchlistMaxOrderByAggregateInput
    _min?: WatchlistMinOrderByAggregateInput
  }

  export type WatchlistScalarWhereWithAggregatesInput = {
    AND?: WatchlistScalarWhereWithAggregatesInput | WatchlistScalarWhereWithAggregatesInput[]
    OR?: WatchlistScalarWhereWithAggregatesInput[]
    NOT?: WatchlistScalarWhereWithAggregatesInput | WatchlistScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Watchlist"> | string
    name?: StringWithAggregatesFilter<"Watchlist"> | string
    userId?: StringWithAggregatesFilter<"Watchlist"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Watchlist"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Watchlist"> | Date | string
  }

  export type SymbolWhereInput = {
    AND?: SymbolWhereInput | SymbolWhereInput[]
    OR?: SymbolWhereInput[]
    NOT?: SymbolWhereInput | SymbolWhereInput[]
    id?: StringFilter<"Symbol"> | string
    symbol?: StringFilter<"Symbol"> | string
    name?: StringNullableFilter<"Symbol"> | string | null
    type?: EnumSymbolTypeFilter<"Symbol"> | $Enums.SymbolType
    createdAt?: DateTimeFilter<"Symbol"> | Date | string
    updatedAt?: DateTimeFilter<"Symbol"> | Date | string
    portfolios?: PortfolioListRelationFilter
    watchlists?: WatchlistListRelationFilter
  }

  export type SymbolOrderByWithRelationInput = {
    id?: SortOrder
    symbol?: SortOrder
    name?: SortOrderInput | SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    portfolios?: PortfolioOrderByRelationAggregateInput
    watchlists?: WatchlistOrderByRelationAggregateInput
  }

  export type SymbolWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SymbolWhereInput | SymbolWhereInput[]
    OR?: SymbolWhereInput[]
    NOT?: SymbolWhereInput | SymbolWhereInput[]
    symbol?: StringFilter<"Symbol"> | string
    name?: StringNullableFilter<"Symbol"> | string | null
    type?: EnumSymbolTypeFilter<"Symbol"> | $Enums.SymbolType
    createdAt?: DateTimeFilter<"Symbol"> | Date | string
    updatedAt?: DateTimeFilter<"Symbol"> | Date | string
    portfolios?: PortfolioListRelationFilter
    watchlists?: WatchlistListRelationFilter
  }, "id">

  export type SymbolOrderByWithAggregationInput = {
    id?: SortOrder
    symbol?: SortOrder
    name?: SortOrderInput | SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: SymbolCountOrderByAggregateInput
    _max?: SymbolMaxOrderByAggregateInput
    _min?: SymbolMinOrderByAggregateInput
  }

  export type SymbolScalarWhereWithAggregatesInput = {
    AND?: SymbolScalarWhereWithAggregatesInput | SymbolScalarWhereWithAggregatesInput[]
    OR?: SymbolScalarWhereWithAggregatesInput[]
    NOT?: SymbolScalarWhereWithAggregatesInput | SymbolScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Symbol"> | string
    symbol?: StringWithAggregatesFilter<"Symbol"> | string
    name?: StringNullableWithAggregatesFilter<"Symbol"> | string | null
    type?: EnumSymbolTypeWithAggregatesFilter<"Symbol"> | $Enums.SymbolType
    createdAt?: DateTimeWithAggregatesFilter<"Symbol"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Symbol"> | Date | string
  }

  export type PortfolioWhereInput = {
    AND?: PortfolioWhereInput | PortfolioWhereInput[]
    OR?: PortfolioWhereInput[]
    NOT?: PortfolioWhereInput | PortfolioWhereInput[]
    id?: StringFilter<"Portfolio"> | string
    name?: StringFilter<"Portfolio"> | string
    userId?: StringFilter<"Portfolio"> | string
    createdAt?: DateTimeFilter<"Portfolio"> | Date | string
    updatedAt?: DateTimeFilter<"Portfolio"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    symbols?: SymbolListRelationFilter
  }

  export type PortfolioOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    symbols?: SymbolOrderByRelationAggregateInput
  }

  export type PortfolioWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PortfolioWhereInput | PortfolioWhereInput[]
    OR?: PortfolioWhereInput[]
    NOT?: PortfolioWhereInput | PortfolioWhereInput[]
    name?: StringFilter<"Portfolio"> | string
    userId?: StringFilter<"Portfolio"> | string
    createdAt?: DateTimeFilter<"Portfolio"> | Date | string
    updatedAt?: DateTimeFilter<"Portfolio"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    symbols?: SymbolListRelationFilter
  }, "id">

  export type PortfolioOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: PortfolioCountOrderByAggregateInput
    _max?: PortfolioMaxOrderByAggregateInput
    _min?: PortfolioMinOrderByAggregateInput
  }

  export type PortfolioScalarWhereWithAggregatesInput = {
    AND?: PortfolioScalarWhereWithAggregatesInput | PortfolioScalarWhereWithAggregatesInput[]
    OR?: PortfolioScalarWhereWithAggregatesInput[]
    NOT?: PortfolioScalarWhereWithAggregatesInput | PortfolioScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Portfolio"> | string
    name?: StringWithAggregatesFilter<"Portfolio"> | string
    userId?: StringWithAggregatesFilter<"Portfolio"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Portfolio"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Portfolio"> | Date | string
  }

  export type MarketDataWhereInput = {
    AND?: MarketDataWhereInput | MarketDataWhereInput[]
    OR?: MarketDataWhereInput[]
    NOT?: MarketDataWhereInput | MarketDataWhereInput[]
    id?: StringFilter<"MarketData"> | string
    symbol?: StringFilter<"MarketData"> | string
    name?: StringNullableFilter<"MarketData"> | string | null
    price?: FloatFilter<"MarketData"> | number
    change?: FloatFilter<"MarketData"> | number
    volume?: StringFilter<"MarketData"> | string
    market_cap?: FloatFilter<"MarketData"> | number
    timestamp?: DateTimeFilter<"MarketData"> | Date | string
    logo_url?: StringNullableFilter<"MarketData"> | string | null
  }

  export type MarketDataOrderByWithRelationInput = {
    id?: SortOrder
    symbol?: SortOrder
    name?: SortOrderInput | SortOrder
    price?: SortOrder
    change?: SortOrder
    volume?: SortOrder
    market_cap?: SortOrder
    timestamp?: SortOrder
    logo_url?: SortOrderInput | SortOrder
  }

  export type MarketDataWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: MarketDataWhereInput | MarketDataWhereInput[]
    OR?: MarketDataWhereInput[]
    NOT?: MarketDataWhereInput | MarketDataWhereInput[]
    symbol?: StringFilter<"MarketData"> | string
    name?: StringNullableFilter<"MarketData"> | string | null
    price?: FloatFilter<"MarketData"> | number
    change?: FloatFilter<"MarketData"> | number
    volume?: StringFilter<"MarketData"> | string
    market_cap?: FloatFilter<"MarketData"> | number
    timestamp?: DateTimeFilter<"MarketData"> | Date | string
    logo_url?: StringNullableFilter<"MarketData"> | string | null
  }, "id">

  export type MarketDataOrderByWithAggregationInput = {
    id?: SortOrder
    symbol?: SortOrder
    name?: SortOrderInput | SortOrder
    price?: SortOrder
    change?: SortOrder
    volume?: SortOrder
    market_cap?: SortOrder
    timestamp?: SortOrder
    logo_url?: SortOrderInput | SortOrder
    _count?: MarketDataCountOrderByAggregateInput
    _avg?: MarketDataAvgOrderByAggregateInput
    _max?: MarketDataMaxOrderByAggregateInput
    _min?: MarketDataMinOrderByAggregateInput
    _sum?: MarketDataSumOrderByAggregateInput
  }

  export type MarketDataScalarWhereWithAggregatesInput = {
    AND?: MarketDataScalarWhereWithAggregatesInput | MarketDataScalarWhereWithAggregatesInput[]
    OR?: MarketDataScalarWhereWithAggregatesInput[]
    NOT?: MarketDataScalarWhereWithAggregatesInput | MarketDataScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"MarketData"> | string
    symbol?: StringWithAggregatesFilter<"MarketData"> | string
    name?: StringNullableWithAggregatesFilter<"MarketData"> | string | null
    price?: FloatWithAggregatesFilter<"MarketData"> | number
    change?: FloatWithAggregatesFilter<"MarketData"> | number
    volume?: StringWithAggregatesFilter<"MarketData"> | string
    market_cap?: FloatWithAggregatesFilter<"MarketData"> | number
    timestamp?: DateTimeWithAggregatesFilter<"MarketData"> | Date | string
    logo_url?: StringNullableWithAggregatesFilter<"MarketData"> | string | null
  }

  export type apiLimitWhereInput = {
    AND?: apiLimitWhereInput | apiLimitWhereInput[]
    OR?: apiLimitWhereInput[]
    NOT?: apiLimitWhereInput | apiLimitWhereInput[]
    id?: StringFilter<"apiLimit"> | string
    apiName?: StringFilter<"apiLimit"> | string
    dailyLimit?: IntFilter<"apiLimit"> | number
    requestCount?: IntFilter<"apiLimit"> | number
    lastReset?: DateTimeFilter<"apiLimit"> | Date | string
  }

  export type apiLimitOrderByWithRelationInput = {
    id?: SortOrder
    apiName?: SortOrder
    dailyLimit?: SortOrder
    requestCount?: SortOrder
    lastReset?: SortOrder
  }

  export type apiLimitWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    apiName?: string
    AND?: apiLimitWhereInput | apiLimitWhereInput[]
    OR?: apiLimitWhereInput[]
    NOT?: apiLimitWhereInput | apiLimitWhereInput[]
    dailyLimit?: IntFilter<"apiLimit"> | number
    requestCount?: IntFilter<"apiLimit"> | number
    lastReset?: DateTimeFilter<"apiLimit"> | Date | string
  }, "id" | "apiName">

  export type apiLimitOrderByWithAggregationInput = {
    id?: SortOrder
    apiName?: SortOrder
    dailyLimit?: SortOrder
    requestCount?: SortOrder
    lastReset?: SortOrder
    _count?: apiLimitCountOrderByAggregateInput
    _avg?: apiLimitAvgOrderByAggregateInput
    _max?: apiLimitMaxOrderByAggregateInput
    _min?: apiLimitMinOrderByAggregateInput
    _sum?: apiLimitSumOrderByAggregateInput
  }

  export type apiLimitScalarWhereWithAggregatesInput = {
    AND?: apiLimitScalarWhereWithAggregatesInput | apiLimitScalarWhereWithAggregatesInput[]
    OR?: apiLimitScalarWhereWithAggregatesInput[]
    NOT?: apiLimitScalarWhereWithAggregatesInput | apiLimitScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"apiLimit"> | string
    apiName?: StringWithAggregatesFilter<"apiLimit"> | string
    dailyLimit?: IntWithAggregatesFilter<"apiLimit"> | number
    requestCount?: IntWithAggregatesFilter<"apiLimit"> | number
    lastReset?: DateTimeWithAggregatesFilter<"apiLimit"> | Date | string
  }

  export type ArticleWhereInput = {
    AND?: ArticleWhereInput | ArticleWhereInput[]
    OR?: ArticleWhereInput[]
    NOT?: ArticleWhereInput | ArticleWhereInput[]
    id?: StringFilter<"Article"> | string
    content?: StringFilter<"Article"> | string
    createdAt?: DateTimeFilter<"Article"> | Date | string
    updatedAt?: DateTimeFilter<"Article"> | Date | string
  }

  export type ArticleOrderByWithRelationInput = {
    id?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ArticleWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ArticleWhereInput | ArticleWhereInput[]
    OR?: ArticleWhereInput[]
    NOT?: ArticleWhereInput | ArticleWhereInput[]
    content?: StringFilter<"Article"> | string
    createdAt?: DateTimeFilter<"Article"> | Date | string
    updatedAt?: DateTimeFilter<"Article"> | Date | string
  }, "id">

  export type ArticleOrderByWithAggregationInput = {
    id?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ArticleCountOrderByAggregateInput
    _max?: ArticleMaxOrderByAggregateInput
    _min?: ArticleMinOrderByAggregateInput
  }

  export type ArticleScalarWhereWithAggregatesInput = {
    AND?: ArticleScalarWhereWithAggregatesInput | ArticleScalarWhereWithAggregatesInput[]
    OR?: ArticleScalarWhereWithAggregatesInput[]
    NOT?: ArticleScalarWhereWithAggregatesInput | ArticleScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Article"> | string
    content?: StringWithAggregatesFilter<"Article"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Article"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Article"> | Date | string
  }

  export type CryptoMarketMetadataWhereInput = {
    AND?: CryptoMarketMetadataWhereInput | CryptoMarketMetadataWhereInput[]
    OR?: CryptoMarketMetadataWhereInput[]
    NOT?: CryptoMarketMetadataWhereInput | CryptoMarketMetadataWhereInput[]
    id?: StringFilter<"CryptoMarketMetadata"> | string
    symbol?: StringFilter<"CryptoMarketMetadata"> | string
    logo_url?: StringNullableFilter<"CryptoMarketMetadata"> | string | null
    description?: StringNullableFilter<"CryptoMarketMetadata"> | string | null
    category?: StringNullableFilter<"CryptoMarketMetadata"> | string | null
    website_url?: StringNullableFilter<"CryptoMarketMetadata"> | string | null
    tech_doc_url?: StringNullableFilter<"CryptoMarketMetadata"> | string | null
    source_code_url?: StringNullableFilter<"CryptoMarketMetadata"> | string | null
    total_market_cap?: FloatFilter<"CryptoMarketMetadata"> | number
    total_volume_24h?: FloatFilter<"CryptoMarketMetadata"> | number
    btc_dominance?: FloatFilter<"CryptoMarketMetadata"> | number
    eth_dominance?: FloatFilter<"CryptoMarketMetadata"> | number
    active_cryptos?: IntFilter<"CryptoMarketMetadata"> | number
    active_exchanges?: IntFilter<"CryptoMarketMetadata"> | number
    timestamp?: DateTimeFilter<"CryptoMarketMetadata"> | Date | string
    updated_at?: DateTimeFilter<"CryptoMarketMetadata"> | Date | string
  }

  export type CryptoMarketMetadataOrderByWithRelationInput = {
    id?: SortOrder
    symbol?: SortOrder
    logo_url?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    category?: SortOrderInput | SortOrder
    website_url?: SortOrderInput | SortOrder
    tech_doc_url?: SortOrderInput | SortOrder
    source_code_url?: SortOrderInput | SortOrder
    total_market_cap?: SortOrder
    total_volume_24h?: SortOrder
    btc_dominance?: SortOrder
    eth_dominance?: SortOrder
    active_cryptos?: SortOrder
    active_exchanges?: SortOrder
    timestamp?: SortOrder
    updated_at?: SortOrder
  }

  export type CryptoMarketMetadataWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    symbol?: string
    AND?: CryptoMarketMetadataWhereInput | CryptoMarketMetadataWhereInput[]
    OR?: CryptoMarketMetadataWhereInput[]
    NOT?: CryptoMarketMetadataWhereInput | CryptoMarketMetadataWhereInput[]
    logo_url?: StringNullableFilter<"CryptoMarketMetadata"> | string | null
    description?: StringNullableFilter<"CryptoMarketMetadata"> | string | null
    category?: StringNullableFilter<"CryptoMarketMetadata"> | string | null
    website_url?: StringNullableFilter<"CryptoMarketMetadata"> | string | null
    tech_doc_url?: StringNullableFilter<"CryptoMarketMetadata"> | string | null
    source_code_url?: StringNullableFilter<"CryptoMarketMetadata"> | string | null
    total_market_cap?: FloatFilter<"CryptoMarketMetadata"> | number
    total_volume_24h?: FloatFilter<"CryptoMarketMetadata"> | number
    btc_dominance?: FloatFilter<"CryptoMarketMetadata"> | number
    eth_dominance?: FloatFilter<"CryptoMarketMetadata"> | number
    active_cryptos?: IntFilter<"CryptoMarketMetadata"> | number
    active_exchanges?: IntFilter<"CryptoMarketMetadata"> | number
    timestamp?: DateTimeFilter<"CryptoMarketMetadata"> | Date | string
    updated_at?: DateTimeFilter<"CryptoMarketMetadata"> | Date | string
  }, "id" | "symbol">

  export type CryptoMarketMetadataOrderByWithAggregationInput = {
    id?: SortOrder
    symbol?: SortOrder
    logo_url?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    category?: SortOrderInput | SortOrder
    website_url?: SortOrderInput | SortOrder
    tech_doc_url?: SortOrderInput | SortOrder
    source_code_url?: SortOrderInput | SortOrder
    total_market_cap?: SortOrder
    total_volume_24h?: SortOrder
    btc_dominance?: SortOrder
    eth_dominance?: SortOrder
    active_cryptos?: SortOrder
    active_exchanges?: SortOrder
    timestamp?: SortOrder
    updated_at?: SortOrder
    _count?: CryptoMarketMetadataCountOrderByAggregateInput
    _avg?: CryptoMarketMetadataAvgOrderByAggregateInput
    _max?: CryptoMarketMetadataMaxOrderByAggregateInput
    _min?: CryptoMarketMetadataMinOrderByAggregateInput
    _sum?: CryptoMarketMetadataSumOrderByAggregateInput
  }

  export type CryptoMarketMetadataScalarWhereWithAggregatesInput = {
    AND?: CryptoMarketMetadataScalarWhereWithAggregatesInput | CryptoMarketMetadataScalarWhereWithAggregatesInput[]
    OR?: CryptoMarketMetadataScalarWhereWithAggregatesInput[]
    NOT?: CryptoMarketMetadataScalarWhereWithAggregatesInput | CryptoMarketMetadataScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"CryptoMarketMetadata"> | string
    symbol?: StringWithAggregatesFilter<"CryptoMarketMetadata"> | string
    logo_url?: StringNullableWithAggregatesFilter<"CryptoMarketMetadata"> | string | null
    description?: StringNullableWithAggregatesFilter<"CryptoMarketMetadata"> | string | null
    category?: StringNullableWithAggregatesFilter<"CryptoMarketMetadata"> | string | null
    website_url?: StringNullableWithAggregatesFilter<"CryptoMarketMetadata"> | string | null
    tech_doc_url?: StringNullableWithAggregatesFilter<"CryptoMarketMetadata"> | string | null
    source_code_url?: StringNullableWithAggregatesFilter<"CryptoMarketMetadata"> | string | null
    total_market_cap?: FloatWithAggregatesFilter<"CryptoMarketMetadata"> | number
    total_volume_24h?: FloatWithAggregatesFilter<"CryptoMarketMetadata"> | number
    btc_dominance?: FloatWithAggregatesFilter<"CryptoMarketMetadata"> | number
    eth_dominance?: FloatWithAggregatesFilter<"CryptoMarketMetadata"> | number
    active_cryptos?: IntWithAggregatesFilter<"CryptoMarketMetadata"> | number
    active_exchanges?: IntWithAggregatesFilter<"CryptoMarketMetadata"> | number
    timestamp?: DateTimeWithAggregatesFilter<"CryptoMarketMetadata"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"CryptoMarketMetadata"> | Date | string
  }

  export type CacheWhereInput = {
    AND?: CacheWhereInput | CacheWhereInput[]
    OR?: CacheWhereInput[]
    NOT?: CacheWhereInput | CacheWhereInput[]
    key?: StringFilter<"Cache"> | string
    data?: StringFilter<"Cache"> | string
    timestamp?: DateTimeFilter<"Cache"> | Date | string
  }

  export type CacheOrderByWithRelationInput = {
    key?: SortOrder
    data?: SortOrder
    timestamp?: SortOrder
  }

  export type CacheWhereUniqueInput = Prisma.AtLeast<{
    key?: string
    AND?: CacheWhereInput | CacheWhereInput[]
    OR?: CacheWhereInput[]
    NOT?: CacheWhereInput | CacheWhereInput[]
    data?: StringFilter<"Cache"> | string
    timestamp?: DateTimeFilter<"Cache"> | Date | string
  }, "key">

  export type CacheOrderByWithAggregationInput = {
    key?: SortOrder
    data?: SortOrder
    timestamp?: SortOrder
    _count?: CacheCountOrderByAggregateInput
    _max?: CacheMaxOrderByAggregateInput
    _min?: CacheMinOrderByAggregateInput
  }

  export type CacheScalarWhereWithAggregatesInput = {
    AND?: CacheScalarWhereWithAggregatesInput | CacheScalarWhereWithAggregatesInput[]
    OR?: CacheScalarWhereWithAggregatesInput[]
    NOT?: CacheScalarWhereWithAggregatesInput | CacheScalarWhereWithAggregatesInput[]
    key?: StringWithAggregatesFilter<"Cache"> | string
    data?: StringWithAggregatesFilter<"Cache"> | string
    timestamp?: DateTimeWithAggregatesFilter<"Cache"> | Date | string
  }

  export type CryptoDetailsWhereInput = {
    AND?: CryptoDetailsWhereInput | CryptoDetailsWhereInput[]
    OR?: CryptoDetailsWhereInput[]
    NOT?: CryptoDetailsWhereInput | CryptoDetailsWhereInput[]
    id?: StringFilter<"CryptoDetails"> | string
    symbol?: StringFilter<"CryptoDetails"> | string
    data?: JsonNullableFilter<"CryptoDetails">
    timestamp?: DateTimeFilter<"CryptoDetails"> | Date | string
    updated_at?: DateTimeFilter<"CryptoDetails"> | Date | string
  }

  export type CryptoDetailsOrderByWithRelationInput = {
    id?: SortOrder
    symbol?: SortOrder
    data?: SortOrderInput | SortOrder
    timestamp?: SortOrder
    updated_at?: SortOrder
  }

  export type CryptoDetailsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CryptoDetailsWhereInput | CryptoDetailsWhereInput[]
    OR?: CryptoDetailsWhereInput[]
    NOT?: CryptoDetailsWhereInput | CryptoDetailsWhereInput[]
    symbol?: StringFilter<"CryptoDetails"> | string
    data?: JsonNullableFilter<"CryptoDetails">
    timestamp?: DateTimeFilter<"CryptoDetails"> | Date | string
    updated_at?: DateTimeFilter<"CryptoDetails"> | Date | string
  }, "id">

  export type CryptoDetailsOrderByWithAggregationInput = {
    id?: SortOrder
    symbol?: SortOrder
    data?: SortOrderInput | SortOrder
    timestamp?: SortOrder
    updated_at?: SortOrder
    _count?: CryptoDetailsCountOrderByAggregateInput
    _max?: CryptoDetailsMaxOrderByAggregateInput
    _min?: CryptoDetailsMinOrderByAggregateInput
  }

  export type CryptoDetailsScalarWhereWithAggregatesInput = {
    AND?: CryptoDetailsScalarWhereWithAggregatesInput | CryptoDetailsScalarWhereWithAggregatesInput[]
    OR?: CryptoDetailsScalarWhereWithAggregatesInput[]
    NOT?: CryptoDetailsScalarWhereWithAggregatesInput | CryptoDetailsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"CryptoDetails"> | string
    symbol?: StringWithAggregatesFilter<"CryptoDetails"> | string
    data?: JsonNullableWithAggregatesFilter<"CryptoDetails">
    timestamp?: DateTimeWithAggregatesFilter<"CryptoDetails"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"CryptoDetails"> | Date | string
  }

  export type ExchangeDataWhereInput = {
    AND?: ExchangeDataWhereInput | ExchangeDataWhereInput[]
    OR?: ExchangeDataWhereInput[]
    NOT?: ExchangeDataWhereInput | ExchangeDataWhereInput[]
    id?: StringFilter<"ExchangeData"> | string
    symbol?: StringFilter<"ExchangeData"> | string
    tickers?: JsonNullableFilter<"ExchangeData">
    timestamp?: DateTimeFilter<"ExchangeData"> | Date | string
  }

  export type ExchangeDataOrderByWithRelationInput = {
    id?: SortOrder
    symbol?: SortOrder
    tickers?: SortOrderInput | SortOrder
    timestamp?: SortOrder
  }

  export type ExchangeDataWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ExchangeDataWhereInput | ExchangeDataWhereInput[]
    OR?: ExchangeDataWhereInput[]
    NOT?: ExchangeDataWhereInput | ExchangeDataWhereInput[]
    symbol?: StringFilter<"ExchangeData"> | string
    tickers?: JsonNullableFilter<"ExchangeData">
    timestamp?: DateTimeFilter<"ExchangeData"> | Date | string
  }, "id">

  export type ExchangeDataOrderByWithAggregationInput = {
    id?: SortOrder
    symbol?: SortOrder
    tickers?: SortOrderInput | SortOrder
    timestamp?: SortOrder
    _count?: ExchangeDataCountOrderByAggregateInput
    _max?: ExchangeDataMaxOrderByAggregateInput
    _min?: ExchangeDataMinOrderByAggregateInput
  }

  export type ExchangeDataScalarWhereWithAggregatesInput = {
    AND?: ExchangeDataScalarWhereWithAggregatesInput | ExchangeDataScalarWhereWithAggregatesInput[]
    OR?: ExchangeDataScalarWhereWithAggregatesInput[]
    NOT?: ExchangeDataScalarWhereWithAggregatesInput | ExchangeDataScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ExchangeData"> | string
    symbol?: StringWithAggregatesFilter<"ExchangeData"> | string
    tickers?: JsonNullableWithAggregatesFilter<"ExchangeData">
    timestamp?: DateTimeWithAggregatesFilter<"ExchangeData"> | Date | string
  }

  export type OnChainDataWhereInput = {
    AND?: OnChainDataWhereInput | OnChainDataWhereInput[]
    OR?: OnChainDataWhereInput[]
    NOT?: OnChainDataWhereInput | OnChainDataWhereInput[]
    id?: StringFilter<"OnChainData"> | string
    symbol?: StringFilter<"OnChainData"> | string
    data?: JsonFilter<"OnChainData">
    timestamp?: DateTimeFilter<"OnChainData"> | Date | string
    updated_at?: DateTimeFilter<"OnChainData"> | Date | string
  }

  export type OnChainDataOrderByWithRelationInput = {
    id?: SortOrder
    symbol?: SortOrder
    data?: SortOrder
    timestamp?: SortOrder
    updated_at?: SortOrder
  }

  export type OnChainDataWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: OnChainDataWhereInput | OnChainDataWhereInput[]
    OR?: OnChainDataWhereInput[]
    NOT?: OnChainDataWhereInput | OnChainDataWhereInput[]
    symbol?: StringFilter<"OnChainData"> | string
    data?: JsonFilter<"OnChainData">
    timestamp?: DateTimeFilter<"OnChainData"> | Date | string
    updated_at?: DateTimeFilter<"OnChainData"> | Date | string
  }, "id">

  export type OnChainDataOrderByWithAggregationInput = {
    id?: SortOrder
    symbol?: SortOrder
    data?: SortOrder
    timestamp?: SortOrder
    updated_at?: SortOrder
    _count?: OnChainDataCountOrderByAggregateInput
    _max?: OnChainDataMaxOrderByAggregateInput
    _min?: OnChainDataMinOrderByAggregateInput
  }

  export type OnChainDataScalarWhereWithAggregatesInput = {
    AND?: OnChainDataScalarWhereWithAggregatesInput | OnChainDataScalarWhereWithAggregatesInput[]
    OR?: OnChainDataScalarWhereWithAggregatesInput[]
    NOT?: OnChainDataScalarWhereWithAggregatesInput | OnChainDataScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"OnChainData"> | string
    symbol?: StringWithAggregatesFilter<"OnChainData"> | string
    data?: JsonWithAggregatesFilter<"OnChainData">
    timestamp?: DateTimeWithAggregatesFilter<"OnChainData"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"OnChainData"> | Date | string
  }

  export type MessariMetricsWhereInput = {
    AND?: MessariMetricsWhereInput | MessariMetricsWhereInput[]
    OR?: MessariMetricsWhereInput[]
    NOT?: MessariMetricsWhereInput | MessariMetricsWhereInput[]
    id?: StringFilter<"MessariMetrics"> | string
    symbol?: StringFilter<"MessariMetrics"> | string
    data?: JsonFilter<"MessariMetrics">
    timestamp?: DateTimeFilter<"MessariMetrics"> | Date | string
    updated_at?: DateTimeFilter<"MessariMetrics"> | Date | string
  }

  export type MessariMetricsOrderByWithRelationInput = {
    id?: SortOrder
    symbol?: SortOrder
    data?: SortOrder
    timestamp?: SortOrder
    updated_at?: SortOrder
  }

  export type MessariMetricsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: MessariMetricsWhereInput | MessariMetricsWhereInput[]
    OR?: MessariMetricsWhereInput[]
    NOT?: MessariMetricsWhereInput | MessariMetricsWhereInput[]
    symbol?: StringFilter<"MessariMetrics"> | string
    data?: JsonFilter<"MessariMetrics">
    timestamp?: DateTimeFilter<"MessariMetrics"> | Date | string
    updated_at?: DateTimeFilter<"MessariMetrics"> | Date | string
  }, "id">

  export type MessariMetricsOrderByWithAggregationInput = {
    id?: SortOrder
    symbol?: SortOrder
    data?: SortOrder
    timestamp?: SortOrder
    updated_at?: SortOrder
    _count?: MessariMetricsCountOrderByAggregateInput
    _max?: MessariMetricsMaxOrderByAggregateInput
    _min?: MessariMetricsMinOrderByAggregateInput
  }

  export type MessariMetricsScalarWhereWithAggregatesInput = {
    AND?: MessariMetricsScalarWhereWithAggregatesInput | MessariMetricsScalarWhereWithAggregatesInput[]
    OR?: MessariMetricsScalarWhereWithAggregatesInput[]
    NOT?: MessariMetricsScalarWhereWithAggregatesInput | MessariMetricsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"MessariMetrics"> | string
    symbol?: StringWithAggregatesFilter<"MessariMetrics"> | string
    data?: JsonWithAggregatesFilter<"MessariMetrics">
    timestamp?: DateTimeWithAggregatesFilter<"MessariMetrics"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"MessariMetrics"> | Date | string
  }

  export type DefiProtocolDataWhereInput = {
    AND?: DefiProtocolDataWhereInput | DefiProtocolDataWhereInput[]
    OR?: DefiProtocolDataWhereInput[]
    NOT?: DefiProtocolDataWhereInput | DefiProtocolDataWhereInput[]
    id?: StringFilter<"DefiProtocolData"> | string
    symbol?: StringFilter<"DefiProtocolData"> | string
    data?: JsonFilter<"DefiProtocolData">
    timestamp?: DateTimeFilter<"DefiProtocolData"> | Date | string
    updated_at?: DateTimeFilter<"DefiProtocolData"> | Date | string
  }

  export type DefiProtocolDataOrderByWithRelationInput = {
    id?: SortOrder
    symbol?: SortOrder
    data?: SortOrder
    timestamp?: SortOrder
    updated_at?: SortOrder
  }

  export type DefiProtocolDataWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: DefiProtocolDataWhereInput | DefiProtocolDataWhereInput[]
    OR?: DefiProtocolDataWhereInput[]
    NOT?: DefiProtocolDataWhereInput | DefiProtocolDataWhereInput[]
    symbol?: StringFilter<"DefiProtocolData"> | string
    data?: JsonFilter<"DefiProtocolData">
    timestamp?: DateTimeFilter<"DefiProtocolData"> | Date | string
    updated_at?: DateTimeFilter<"DefiProtocolData"> | Date | string
  }, "id">

  export type DefiProtocolDataOrderByWithAggregationInput = {
    id?: SortOrder
    symbol?: SortOrder
    data?: SortOrder
    timestamp?: SortOrder
    updated_at?: SortOrder
    _count?: DefiProtocolDataCountOrderByAggregateInput
    _max?: DefiProtocolDataMaxOrderByAggregateInput
    _min?: DefiProtocolDataMinOrderByAggregateInput
  }

  export type DefiProtocolDataScalarWhereWithAggregatesInput = {
    AND?: DefiProtocolDataScalarWhereWithAggregatesInput | DefiProtocolDataScalarWhereWithAggregatesInput[]
    OR?: DefiProtocolDataScalarWhereWithAggregatesInput[]
    NOT?: DefiProtocolDataScalarWhereWithAggregatesInput | DefiProtocolDataScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"DefiProtocolData"> | string
    symbol?: StringWithAggregatesFilter<"DefiProtocolData"> | string
    data?: JsonWithAggregatesFilter<"DefiProtocolData">
    timestamp?: DateTimeWithAggregatesFilter<"DefiProtocolData"> | Date | string
    updated_at?: DateTimeWithAggregatesFilter<"DefiProtocolData"> | Date | string
  }

  export type UserCreateInput = {
    id?: string
    email: string
    name?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    portfolios?: PortfolioCreateNestedManyWithoutUserInput
    watchlists?: WatchlistCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    email: string
    name?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    portfolios?: PortfolioUncheckedCreateNestedManyWithoutUserInput
    watchlists?: WatchlistUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    portfolios?: PortfolioUpdateManyWithoutUserNestedInput
    watchlists?: WatchlistUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    portfolios?: PortfolioUncheckedUpdateManyWithoutUserNestedInput
    watchlists?: WatchlistUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    email: string
    name?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WatchlistCreateInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutWatchlistsInput
    symbols?: SymbolCreateNestedManyWithoutWatchlistsInput
  }

  export type WatchlistUncheckedCreateInput = {
    id?: string
    name: string
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    symbols?: SymbolUncheckedCreateNestedManyWithoutWatchlistsInput
  }

  export type WatchlistUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutWatchlistsNestedInput
    symbols?: SymbolUpdateManyWithoutWatchlistsNestedInput
  }

  export type WatchlistUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    symbols?: SymbolUncheckedUpdateManyWithoutWatchlistsNestedInput
  }

  export type WatchlistCreateManyInput = {
    id?: string
    name: string
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WatchlistUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WatchlistUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SymbolCreateInput = {
    id?: string
    symbol: string
    name?: string | null
    type: $Enums.SymbolType
    createdAt?: Date | string
    updatedAt?: Date | string
    portfolios?: PortfolioCreateNestedManyWithoutSymbolsInput
    watchlists?: WatchlistCreateNestedManyWithoutSymbolsInput
  }

  export type SymbolUncheckedCreateInput = {
    id?: string
    symbol: string
    name?: string | null
    type: $Enums.SymbolType
    createdAt?: Date | string
    updatedAt?: Date | string
    portfolios?: PortfolioUncheckedCreateNestedManyWithoutSymbolsInput
    watchlists?: WatchlistUncheckedCreateNestedManyWithoutSymbolsInput
  }

  export type SymbolUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    symbol?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumSymbolTypeFieldUpdateOperationsInput | $Enums.SymbolType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    portfolios?: PortfolioUpdateManyWithoutSymbolsNestedInput
    watchlists?: WatchlistUpdateManyWithoutSymbolsNestedInput
  }

  export type SymbolUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    symbol?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumSymbolTypeFieldUpdateOperationsInput | $Enums.SymbolType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    portfolios?: PortfolioUncheckedUpdateManyWithoutSymbolsNestedInput
    watchlists?: WatchlistUncheckedUpdateManyWithoutSymbolsNestedInput
  }

  export type SymbolCreateManyInput = {
    id?: string
    symbol: string
    name?: string | null
    type: $Enums.SymbolType
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SymbolUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    symbol?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumSymbolTypeFieldUpdateOperationsInput | $Enums.SymbolType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SymbolUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    symbol?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumSymbolTypeFieldUpdateOperationsInput | $Enums.SymbolType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PortfolioCreateInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutPortfoliosInput
    symbols?: SymbolCreateNestedManyWithoutPortfoliosInput
  }

  export type PortfolioUncheckedCreateInput = {
    id?: string
    name: string
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    symbols?: SymbolUncheckedCreateNestedManyWithoutPortfoliosInput
  }

  export type PortfolioUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutPortfoliosNestedInput
    symbols?: SymbolUpdateManyWithoutPortfoliosNestedInput
  }

  export type PortfolioUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    symbols?: SymbolUncheckedUpdateManyWithoutPortfoliosNestedInput
  }

  export type PortfolioCreateManyInput = {
    id?: string
    name: string
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PortfolioUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PortfolioUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MarketDataCreateInput = {
    id?: string
    symbol: string
    name?: string | null
    price: number
    change: number
    volume: string
    market_cap: number
    timestamp?: Date | string
    logo_url?: string | null
  }

  export type MarketDataUncheckedCreateInput = {
    id?: string
    symbol: string
    name?: string | null
    price: number
    change: number
    volume: string
    market_cap: number
    timestamp?: Date | string
    logo_url?: string | null
  }

  export type MarketDataUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    symbol?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    price?: FloatFieldUpdateOperationsInput | number
    change?: FloatFieldUpdateOperationsInput | number
    volume?: StringFieldUpdateOperationsInput | string
    market_cap?: FloatFieldUpdateOperationsInput | number
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    logo_url?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MarketDataUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    symbol?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    price?: FloatFieldUpdateOperationsInput | number
    change?: FloatFieldUpdateOperationsInput | number
    volume?: StringFieldUpdateOperationsInput | string
    market_cap?: FloatFieldUpdateOperationsInput | number
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    logo_url?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MarketDataCreateManyInput = {
    id?: string
    symbol: string
    name?: string | null
    price: number
    change: number
    volume: string
    market_cap: number
    timestamp?: Date | string
    logo_url?: string | null
  }

  export type MarketDataUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    symbol?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    price?: FloatFieldUpdateOperationsInput | number
    change?: FloatFieldUpdateOperationsInput | number
    volume?: StringFieldUpdateOperationsInput | string
    market_cap?: FloatFieldUpdateOperationsInput | number
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    logo_url?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MarketDataUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    symbol?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    price?: FloatFieldUpdateOperationsInput | number
    change?: FloatFieldUpdateOperationsInput | number
    volume?: StringFieldUpdateOperationsInput | string
    market_cap?: FloatFieldUpdateOperationsInput | number
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    logo_url?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type apiLimitCreateInput = {
    id?: string
    apiName: string
    dailyLimit: number
    requestCount?: number
    lastReset?: Date | string
  }

  export type apiLimitUncheckedCreateInput = {
    id?: string
    apiName: string
    dailyLimit: number
    requestCount?: number
    lastReset?: Date | string
  }

  export type apiLimitUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    apiName?: StringFieldUpdateOperationsInput | string
    dailyLimit?: IntFieldUpdateOperationsInput | number
    requestCount?: IntFieldUpdateOperationsInput | number
    lastReset?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type apiLimitUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    apiName?: StringFieldUpdateOperationsInput | string
    dailyLimit?: IntFieldUpdateOperationsInput | number
    requestCount?: IntFieldUpdateOperationsInput | number
    lastReset?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type apiLimitCreateManyInput = {
    id?: string
    apiName: string
    dailyLimit: number
    requestCount?: number
    lastReset?: Date | string
  }

  export type apiLimitUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    apiName?: StringFieldUpdateOperationsInput | string
    dailyLimit?: IntFieldUpdateOperationsInput | number
    requestCount?: IntFieldUpdateOperationsInput | number
    lastReset?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type apiLimitUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    apiName?: StringFieldUpdateOperationsInput | string
    dailyLimit?: IntFieldUpdateOperationsInput | number
    requestCount?: IntFieldUpdateOperationsInput | number
    lastReset?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ArticleCreateInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ArticleUncheckedCreateInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ArticleUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ArticleUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ArticleCreateManyInput = {
    id?: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ArticleUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ArticleUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CryptoMarketMetadataCreateInput = {
    id: string
    symbol: string
    logo_url?: string | null
    description?: string | null
    category?: string | null
    website_url?: string | null
    tech_doc_url?: string | null
    source_code_url?: string | null
    total_market_cap?: number
    total_volume_24h?: number
    btc_dominance?: number
    eth_dominance?: number
    active_cryptos?: number
    active_exchanges?: number
    timestamp?: Date | string
    updated_at: Date | string
  }

  export type CryptoMarketMetadataUncheckedCreateInput = {
    id: string
    symbol: string
    logo_url?: string | null
    description?: string | null
    category?: string | null
    website_url?: string | null
    tech_doc_url?: string | null
    source_code_url?: string | null
    total_market_cap?: number
    total_volume_24h?: number
    btc_dominance?: number
    eth_dominance?: number
    active_cryptos?: number
    active_exchanges?: number
    timestamp?: Date | string
    updated_at: Date | string
  }

  export type CryptoMarketMetadataUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    symbol?: StringFieldUpdateOperationsInput | string
    logo_url?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    website_url?: NullableStringFieldUpdateOperationsInput | string | null
    tech_doc_url?: NullableStringFieldUpdateOperationsInput | string | null
    source_code_url?: NullableStringFieldUpdateOperationsInput | string | null
    total_market_cap?: FloatFieldUpdateOperationsInput | number
    total_volume_24h?: FloatFieldUpdateOperationsInput | number
    btc_dominance?: FloatFieldUpdateOperationsInput | number
    eth_dominance?: FloatFieldUpdateOperationsInput | number
    active_cryptos?: IntFieldUpdateOperationsInput | number
    active_exchanges?: IntFieldUpdateOperationsInput | number
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CryptoMarketMetadataUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    symbol?: StringFieldUpdateOperationsInput | string
    logo_url?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    website_url?: NullableStringFieldUpdateOperationsInput | string | null
    tech_doc_url?: NullableStringFieldUpdateOperationsInput | string | null
    source_code_url?: NullableStringFieldUpdateOperationsInput | string | null
    total_market_cap?: FloatFieldUpdateOperationsInput | number
    total_volume_24h?: FloatFieldUpdateOperationsInput | number
    btc_dominance?: FloatFieldUpdateOperationsInput | number
    eth_dominance?: FloatFieldUpdateOperationsInput | number
    active_cryptos?: IntFieldUpdateOperationsInput | number
    active_exchanges?: IntFieldUpdateOperationsInput | number
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CryptoMarketMetadataCreateManyInput = {
    id: string
    symbol: string
    logo_url?: string | null
    description?: string | null
    category?: string | null
    website_url?: string | null
    tech_doc_url?: string | null
    source_code_url?: string | null
    total_market_cap?: number
    total_volume_24h?: number
    btc_dominance?: number
    eth_dominance?: number
    active_cryptos?: number
    active_exchanges?: number
    timestamp?: Date | string
    updated_at: Date | string
  }

  export type CryptoMarketMetadataUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    symbol?: StringFieldUpdateOperationsInput | string
    logo_url?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    website_url?: NullableStringFieldUpdateOperationsInput | string | null
    tech_doc_url?: NullableStringFieldUpdateOperationsInput | string | null
    source_code_url?: NullableStringFieldUpdateOperationsInput | string | null
    total_market_cap?: FloatFieldUpdateOperationsInput | number
    total_volume_24h?: FloatFieldUpdateOperationsInput | number
    btc_dominance?: FloatFieldUpdateOperationsInput | number
    eth_dominance?: FloatFieldUpdateOperationsInput | number
    active_cryptos?: IntFieldUpdateOperationsInput | number
    active_exchanges?: IntFieldUpdateOperationsInput | number
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CryptoMarketMetadataUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    symbol?: StringFieldUpdateOperationsInput | string
    logo_url?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    category?: NullableStringFieldUpdateOperationsInput | string | null
    website_url?: NullableStringFieldUpdateOperationsInput | string | null
    tech_doc_url?: NullableStringFieldUpdateOperationsInput | string | null
    source_code_url?: NullableStringFieldUpdateOperationsInput | string | null
    total_market_cap?: FloatFieldUpdateOperationsInput | number
    total_volume_24h?: FloatFieldUpdateOperationsInput | number
    btc_dominance?: FloatFieldUpdateOperationsInput | number
    eth_dominance?: FloatFieldUpdateOperationsInput | number
    active_cryptos?: IntFieldUpdateOperationsInput | number
    active_exchanges?: IntFieldUpdateOperationsInput | number
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CacheCreateInput = {
    key: string
    data: string
    timestamp?: Date | string
  }

  export type CacheUncheckedCreateInput = {
    key: string
    data: string
    timestamp?: Date | string
  }

  export type CacheUpdateInput = {
    key?: StringFieldUpdateOperationsInput | string
    data?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CacheUncheckedUpdateInput = {
    key?: StringFieldUpdateOperationsInput | string
    data?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CacheCreateManyInput = {
    key: string
    data: string
    timestamp?: Date | string
  }

  export type CacheUpdateManyMutationInput = {
    key?: StringFieldUpdateOperationsInput | string
    data?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CacheUncheckedUpdateManyInput = {
    key?: StringFieldUpdateOperationsInput | string
    data?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CryptoDetailsCreateInput = {
    id?: string
    symbol: string
    data?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: Date | string
    updated_at?: Date | string
  }

  export type CryptoDetailsUncheckedCreateInput = {
    id?: string
    symbol: string
    data?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: Date | string
    updated_at?: Date | string
  }

  export type CryptoDetailsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    symbol?: StringFieldUpdateOperationsInput | string
    data?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CryptoDetailsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    symbol?: StringFieldUpdateOperationsInput | string
    data?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CryptoDetailsCreateManyInput = {
    id?: string
    symbol: string
    data?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: Date | string
    updated_at?: Date | string
  }

  export type CryptoDetailsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    symbol?: StringFieldUpdateOperationsInput | string
    data?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CryptoDetailsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    symbol?: StringFieldUpdateOperationsInput | string
    data?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ExchangeDataCreateInput = {
    id?: string
    symbol: string
    tickers?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: Date | string
  }

  export type ExchangeDataUncheckedCreateInput = {
    id?: string
    symbol: string
    tickers?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: Date | string
  }

  export type ExchangeDataUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    symbol?: StringFieldUpdateOperationsInput | string
    tickers?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ExchangeDataUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    symbol?: StringFieldUpdateOperationsInput | string
    tickers?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ExchangeDataCreateManyInput = {
    id?: string
    symbol: string
    tickers?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: Date | string
  }

  export type ExchangeDataUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    symbol?: StringFieldUpdateOperationsInput | string
    tickers?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ExchangeDataUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    symbol?: StringFieldUpdateOperationsInput | string
    tickers?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OnChainDataCreateInput = {
    id?: string
    symbol: string
    data: JsonNullValueInput | InputJsonValue
    timestamp?: Date | string
    updated_at?: Date | string
  }

  export type OnChainDataUncheckedCreateInput = {
    id?: string
    symbol: string
    data: JsonNullValueInput | InputJsonValue
    timestamp?: Date | string
    updated_at?: Date | string
  }

  export type OnChainDataUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    symbol?: StringFieldUpdateOperationsInput | string
    data?: JsonNullValueInput | InputJsonValue
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OnChainDataUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    symbol?: StringFieldUpdateOperationsInput | string
    data?: JsonNullValueInput | InputJsonValue
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OnChainDataCreateManyInput = {
    id?: string
    symbol: string
    data: JsonNullValueInput | InputJsonValue
    timestamp?: Date | string
    updated_at?: Date | string
  }

  export type OnChainDataUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    symbol?: StringFieldUpdateOperationsInput | string
    data?: JsonNullValueInput | InputJsonValue
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OnChainDataUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    symbol?: StringFieldUpdateOperationsInput | string
    data?: JsonNullValueInput | InputJsonValue
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessariMetricsCreateInput = {
    id?: string
    symbol: string
    data: JsonNullValueInput | InputJsonValue
    timestamp?: Date | string
    updated_at?: Date | string
  }

  export type MessariMetricsUncheckedCreateInput = {
    id?: string
    symbol: string
    data: JsonNullValueInput | InputJsonValue
    timestamp?: Date | string
    updated_at?: Date | string
  }

  export type MessariMetricsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    symbol?: StringFieldUpdateOperationsInput | string
    data?: JsonNullValueInput | InputJsonValue
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessariMetricsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    symbol?: StringFieldUpdateOperationsInput | string
    data?: JsonNullValueInput | InputJsonValue
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessariMetricsCreateManyInput = {
    id?: string
    symbol: string
    data: JsonNullValueInput | InputJsonValue
    timestamp?: Date | string
    updated_at?: Date | string
  }

  export type MessariMetricsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    symbol?: StringFieldUpdateOperationsInput | string
    data?: JsonNullValueInput | InputJsonValue
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessariMetricsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    symbol?: StringFieldUpdateOperationsInput | string
    data?: JsonNullValueInput | InputJsonValue
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DefiProtocolDataCreateInput = {
    id?: string
    symbol: string
    data: JsonNullValueInput | InputJsonValue
    timestamp?: Date | string
    updated_at?: Date | string
  }

  export type DefiProtocolDataUncheckedCreateInput = {
    id?: string
    symbol: string
    data: JsonNullValueInput | InputJsonValue
    timestamp?: Date | string
    updated_at?: Date | string
  }

  export type DefiProtocolDataUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    symbol?: StringFieldUpdateOperationsInput | string
    data?: JsonNullValueInput | InputJsonValue
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DefiProtocolDataUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    symbol?: StringFieldUpdateOperationsInput | string
    data?: JsonNullValueInput | InputJsonValue
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DefiProtocolDataCreateManyInput = {
    id?: string
    symbol: string
    data: JsonNullValueInput | InputJsonValue
    timestamp?: Date | string
    updated_at?: Date | string
  }

  export type DefiProtocolDataUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    symbol?: StringFieldUpdateOperationsInput | string
    data?: JsonNullValueInput | InputJsonValue
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DefiProtocolDataUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    symbol?: StringFieldUpdateOperationsInput | string
    data?: JsonNullValueInput | InputJsonValue
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    updated_at?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type PortfolioListRelationFilter = {
    every?: PortfolioWhereInput
    some?: PortfolioWhereInput
    none?: PortfolioWhereInput
  }

  export type WatchlistListRelationFilter = {
    every?: WatchlistWhereInput
    some?: WatchlistWhereInput
    none?: WatchlistWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type PortfolioOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type WatchlistOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type SymbolListRelationFilter = {
    every?: SymbolWhereInput
    some?: SymbolWhereInput
    none?: SymbolWhereInput
  }

  export type SymbolOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type WatchlistCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WatchlistMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WatchlistMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumSymbolTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.SymbolType | EnumSymbolTypeFieldRefInput<$PrismaModel>
    in?: $Enums.SymbolType[] | ListEnumSymbolTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.SymbolType[] | ListEnumSymbolTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumSymbolTypeFilter<$PrismaModel> | $Enums.SymbolType
  }

  export type SymbolCountOrderByAggregateInput = {
    id?: SortOrder
    symbol?: SortOrder
    name?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SymbolMaxOrderByAggregateInput = {
    id?: SortOrder
    symbol?: SortOrder
    name?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SymbolMinOrderByAggregateInput = {
    id?: SortOrder
    symbol?: SortOrder
    name?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumSymbolTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SymbolType | EnumSymbolTypeFieldRefInput<$PrismaModel>
    in?: $Enums.SymbolType[] | ListEnumSymbolTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.SymbolType[] | ListEnumSymbolTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumSymbolTypeWithAggregatesFilter<$PrismaModel> | $Enums.SymbolType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSymbolTypeFilter<$PrismaModel>
    _max?: NestedEnumSymbolTypeFilter<$PrismaModel>
  }

  export type PortfolioCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PortfolioMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PortfolioMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type MarketDataCountOrderByAggregateInput = {
    id?: SortOrder
    symbol?: SortOrder
    name?: SortOrder
    price?: SortOrder
    change?: SortOrder
    volume?: SortOrder
    market_cap?: SortOrder
    timestamp?: SortOrder
    logo_url?: SortOrder
  }

  export type MarketDataAvgOrderByAggregateInput = {
    price?: SortOrder
    change?: SortOrder
    market_cap?: SortOrder
  }

  export type MarketDataMaxOrderByAggregateInput = {
    id?: SortOrder
    symbol?: SortOrder
    name?: SortOrder
    price?: SortOrder
    change?: SortOrder
    volume?: SortOrder
    market_cap?: SortOrder
    timestamp?: SortOrder
    logo_url?: SortOrder
  }

  export type MarketDataMinOrderByAggregateInput = {
    id?: SortOrder
    symbol?: SortOrder
    name?: SortOrder
    price?: SortOrder
    change?: SortOrder
    volume?: SortOrder
    market_cap?: SortOrder
    timestamp?: SortOrder
    logo_url?: SortOrder
  }

  export type MarketDataSumOrderByAggregateInput = {
    price?: SortOrder
    change?: SortOrder
    market_cap?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type apiLimitCountOrderByAggregateInput = {
    id?: SortOrder
    apiName?: SortOrder
    dailyLimit?: SortOrder
    requestCount?: SortOrder
    lastReset?: SortOrder
  }

  export type apiLimitAvgOrderByAggregateInput = {
    dailyLimit?: SortOrder
    requestCount?: SortOrder
  }

  export type apiLimitMaxOrderByAggregateInput = {
    id?: SortOrder
    apiName?: SortOrder
    dailyLimit?: SortOrder
    requestCount?: SortOrder
    lastReset?: SortOrder
  }

  export type apiLimitMinOrderByAggregateInput = {
    id?: SortOrder
    apiName?: SortOrder
    dailyLimit?: SortOrder
    requestCount?: SortOrder
    lastReset?: SortOrder
  }

  export type apiLimitSumOrderByAggregateInput = {
    dailyLimit?: SortOrder
    requestCount?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type ArticleCountOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ArticleMaxOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ArticleMinOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CryptoMarketMetadataCountOrderByAggregateInput = {
    id?: SortOrder
    symbol?: SortOrder
    logo_url?: SortOrder
    description?: SortOrder
    category?: SortOrder
    website_url?: SortOrder
    tech_doc_url?: SortOrder
    source_code_url?: SortOrder
    total_market_cap?: SortOrder
    total_volume_24h?: SortOrder
    btc_dominance?: SortOrder
    eth_dominance?: SortOrder
    active_cryptos?: SortOrder
    active_exchanges?: SortOrder
    timestamp?: SortOrder
    updated_at?: SortOrder
  }

  export type CryptoMarketMetadataAvgOrderByAggregateInput = {
    total_market_cap?: SortOrder
    total_volume_24h?: SortOrder
    btc_dominance?: SortOrder
    eth_dominance?: SortOrder
    active_cryptos?: SortOrder
    active_exchanges?: SortOrder
  }

  export type CryptoMarketMetadataMaxOrderByAggregateInput = {
    id?: SortOrder
    symbol?: SortOrder
    logo_url?: SortOrder
    description?: SortOrder
    category?: SortOrder
    website_url?: SortOrder
    tech_doc_url?: SortOrder
    source_code_url?: SortOrder
    total_market_cap?: SortOrder
    total_volume_24h?: SortOrder
    btc_dominance?: SortOrder
    eth_dominance?: SortOrder
    active_cryptos?: SortOrder
    active_exchanges?: SortOrder
    timestamp?: SortOrder
    updated_at?: SortOrder
  }

  export type CryptoMarketMetadataMinOrderByAggregateInput = {
    id?: SortOrder
    symbol?: SortOrder
    logo_url?: SortOrder
    description?: SortOrder
    category?: SortOrder
    website_url?: SortOrder
    tech_doc_url?: SortOrder
    source_code_url?: SortOrder
    total_market_cap?: SortOrder
    total_volume_24h?: SortOrder
    btc_dominance?: SortOrder
    eth_dominance?: SortOrder
    active_cryptos?: SortOrder
    active_exchanges?: SortOrder
    timestamp?: SortOrder
    updated_at?: SortOrder
  }

  export type CryptoMarketMetadataSumOrderByAggregateInput = {
    total_market_cap?: SortOrder
    total_volume_24h?: SortOrder
    btc_dominance?: SortOrder
    eth_dominance?: SortOrder
    active_cryptos?: SortOrder
    active_exchanges?: SortOrder
  }

  export type CacheCountOrderByAggregateInput = {
    key?: SortOrder
    data?: SortOrder
    timestamp?: SortOrder
  }

  export type CacheMaxOrderByAggregateInput = {
    key?: SortOrder
    data?: SortOrder
    timestamp?: SortOrder
  }

  export type CacheMinOrderByAggregateInput = {
    key?: SortOrder
    data?: SortOrder
    timestamp?: SortOrder
  }
  export type JsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type CryptoDetailsCountOrderByAggregateInput = {
    id?: SortOrder
    symbol?: SortOrder
    data?: SortOrder
    timestamp?: SortOrder
    updated_at?: SortOrder
  }

  export type CryptoDetailsMaxOrderByAggregateInput = {
    id?: SortOrder
    symbol?: SortOrder
    timestamp?: SortOrder
    updated_at?: SortOrder
  }

  export type CryptoDetailsMinOrderByAggregateInput = {
    id?: SortOrder
    symbol?: SortOrder
    timestamp?: SortOrder
    updated_at?: SortOrder
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type ExchangeDataCountOrderByAggregateInput = {
    id?: SortOrder
    symbol?: SortOrder
    tickers?: SortOrder
    timestamp?: SortOrder
  }

  export type ExchangeDataMaxOrderByAggregateInput = {
    id?: SortOrder
    symbol?: SortOrder
    timestamp?: SortOrder
  }

  export type ExchangeDataMinOrderByAggregateInput = {
    id?: SortOrder
    symbol?: SortOrder
    timestamp?: SortOrder
  }
  export type JsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase<$PrismaModel>>, 'path'>>

  export type JsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type OnChainDataCountOrderByAggregateInput = {
    id?: SortOrder
    symbol?: SortOrder
    data?: SortOrder
    timestamp?: SortOrder
    updated_at?: SortOrder
  }

  export type OnChainDataMaxOrderByAggregateInput = {
    id?: SortOrder
    symbol?: SortOrder
    timestamp?: SortOrder
    updated_at?: SortOrder
  }

  export type OnChainDataMinOrderByAggregateInput = {
    id?: SortOrder
    symbol?: SortOrder
    timestamp?: SortOrder
    updated_at?: SortOrder
  }
  export type JsonWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedJsonFilter<$PrismaModel>
    _max?: NestedJsonFilter<$PrismaModel>
  }

  export type MessariMetricsCountOrderByAggregateInput = {
    id?: SortOrder
    symbol?: SortOrder
    data?: SortOrder
    timestamp?: SortOrder
    updated_at?: SortOrder
  }

  export type MessariMetricsMaxOrderByAggregateInput = {
    id?: SortOrder
    symbol?: SortOrder
    timestamp?: SortOrder
    updated_at?: SortOrder
  }

  export type MessariMetricsMinOrderByAggregateInput = {
    id?: SortOrder
    symbol?: SortOrder
    timestamp?: SortOrder
    updated_at?: SortOrder
  }

  export type DefiProtocolDataCountOrderByAggregateInput = {
    id?: SortOrder
    symbol?: SortOrder
    data?: SortOrder
    timestamp?: SortOrder
    updated_at?: SortOrder
  }

  export type DefiProtocolDataMaxOrderByAggregateInput = {
    id?: SortOrder
    symbol?: SortOrder
    timestamp?: SortOrder
    updated_at?: SortOrder
  }

  export type DefiProtocolDataMinOrderByAggregateInput = {
    id?: SortOrder
    symbol?: SortOrder
    timestamp?: SortOrder
    updated_at?: SortOrder
  }

  export type PortfolioCreateNestedManyWithoutUserInput = {
    create?: XOR<PortfolioCreateWithoutUserInput, PortfolioUncheckedCreateWithoutUserInput> | PortfolioCreateWithoutUserInput[] | PortfolioUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PortfolioCreateOrConnectWithoutUserInput | PortfolioCreateOrConnectWithoutUserInput[]
    createMany?: PortfolioCreateManyUserInputEnvelope
    connect?: PortfolioWhereUniqueInput | PortfolioWhereUniqueInput[]
  }

  export type WatchlistCreateNestedManyWithoutUserInput = {
    create?: XOR<WatchlistCreateWithoutUserInput, WatchlistUncheckedCreateWithoutUserInput> | WatchlistCreateWithoutUserInput[] | WatchlistUncheckedCreateWithoutUserInput[]
    connectOrCreate?: WatchlistCreateOrConnectWithoutUserInput | WatchlistCreateOrConnectWithoutUserInput[]
    createMany?: WatchlistCreateManyUserInputEnvelope
    connect?: WatchlistWhereUniqueInput | WatchlistWhereUniqueInput[]
  }

  export type PortfolioUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<PortfolioCreateWithoutUserInput, PortfolioUncheckedCreateWithoutUserInput> | PortfolioCreateWithoutUserInput[] | PortfolioUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PortfolioCreateOrConnectWithoutUserInput | PortfolioCreateOrConnectWithoutUserInput[]
    createMany?: PortfolioCreateManyUserInputEnvelope
    connect?: PortfolioWhereUniqueInput | PortfolioWhereUniqueInput[]
  }

  export type WatchlistUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<WatchlistCreateWithoutUserInput, WatchlistUncheckedCreateWithoutUserInput> | WatchlistCreateWithoutUserInput[] | WatchlistUncheckedCreateWithoutUserInput[]
    connectOrCreate?: WatchlistCreateOrConnectWithoutUserInput | WatchlistCreateOrConnectWithoutUserInput[]
    createMany?: WatchlistCreateManyUserInputEnvelope
    connect?: WatchlistWhereUniqueInput | WatchlistWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type PortfolioUpdateManyWithoutUserNestedInput = {
    create?: XOR<PortfolioCreateWithoutUserInput, PortfolioUncheckedCreateWithoutUserInput> | PortfolioCreateWithoutUserInput[] | PortfolioUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PortfolioCreateOrConnectWithoutUserInput | PortfolioCreateOrConnectWithoutUserInput[]
    upsert?: PortfolioUpsertWithWhereUniqueWithoutUserInput | PortfolioUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PortfolioCreateManyUserInputEnvelope
    set?: PortfolioWhereUniqueInput | PortfolioWhereUniqueInput[]
    disconnect?: PortfolioWhereUniqueInput | PortfolioWhereUniqueInput[]
    delete?: PortfolioWhereUniqueInput | PortfolioWhereUniqueInput[]
    connect?: PortfolioWhereUniqueInput | PortfolioWhereUniqueInput[]
    update?: PortfolioUpdateWithWhereUniqueWithoutUserInput | PortfolioUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PortfolioUpdateManyWithWhereWithoutUserInput | PortfolioUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PortfolioScalarWhereInput | PortfolioScalarWhereInput[]
  }

  export type WatchlistUpdateManyWithoutUserNestedInput = {
    create?: XOR<WatchlistCreateWithoutUserInput, WatchlistUncheckedCreateWithoutUserInput> | WatchlistCreateWithoutUserInput[] | WatchlistUncheckedCreateWithoutUserInput[]
    connectOrCreate?: WatchlistCreateOrConnectWithoutUserInput | WatchlistCreateOrConnectWithoutUserInput[]
    upsert?: WatchlistUpsertWithWhereUniqueWithoutUserInput | WatchlistUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: WatchlistCreateManyUserInputEnvelope
    set?: WatchlistWhereUniqueInput | WatchlistWhereUniqueInput[]
    disconnect?: WatchlistWhereUniqueInput | WatchlistWhereUniqueInput[]
    delete?: WatchlistWhereUniqueInput | WatchlistWhereUniqueInput[]
    connect?: WatchlistWhereUniqueInput | WatchlistWhereUniqueInput[]
    update?: WatchlistUpdateWithWhereUniqueWithoutUserInput | WatchlistUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: WatchlistUpdateManyWithWhereWithoutUserInput | WatchlistUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: WatchlistScalarWhereInput | WatchlistScalarWhereInput[]
  }

  export type PortfolioUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<PortfolioCreateWithoutUserInput, PortfolioUncheckedCreateWithoutUserInput> | PortfolioCreateWithoutUserInput[] | PortfolioUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PortfolioCreateOrConnectWithoutUserInput | PortfolioCreateOrConnectWithoutUserInput[]
    upsert?: PortfolioUpsertWithWhereUniqueWithoutUserInput | PortfolioUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PortfolioCreateManyUserInputEnvelope
    set?: PortfolioWhereUniqueInput | PortfolioWhereUniqueInput[]
    disconnect?: PortfolioWhereUniqueInput | PortfolioWhereUniqueInput[]
    delete?: PortfolioWhereUniqueInput | PortfolioWhereUniqueInput[]
    connect?: PortfolioWhereUniqueInput | PortfolioWhereUniqueInput[]
    update?: PortfolioUpdateWithWhereUniqueWithoutUserInput | PortfolioUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PortfolioUpdateManyWithWhereWithoutUserInput | PortfolioUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PortfolioScalarWhereInput | PortfolioScalarWhereInput[]
  }

  export type WatchlistUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<WatchlistCreateWithoutUserInput, WatchlistUncheckedCreateWithoutUserInput> | WatchlistCreateWithoutUserInput[] | WatchlistUncheckedCreateWithoutUserInput[]
    connectOrCreate?: WatchlistCreateOrConnectWithoutUserInput | WatchlistCreateOrConnectWithoutUserInput[]
    upsert?: WatchlistUpsertWithWhereUniqueWithoutUserInput | WatchlistUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: WatchlistCreateManyUserInputEnvelope
    set?: WatchlistWhereUniqueInput | WatchlistWhereUniqueInput[]
    disconnect?: WatchlistWhereUniqueInput | WatchlistWhereUniqueInput[]
    delete?: WatchlistWhereUniqueInput | WatchlistWhereUniqueInput[]
    connect?: WatchlistWhereUniqueInput | WatchlistWhereUniqueInput[]
    update?: WatchlistUpdateWithWhereUniqueWithoutUserInput | WatchlistUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: WatchlistUpdateManyWithWhereWithoutUserInput | WatchlistUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: WatchlistScalarWhereInput | WatchlistScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutWatchlistsInput = {
    create?: XOR<UserCreateWithoutWatchlistsInput, UserUncheckedCreateWithoutWatchlistsInput>
    connectOrCreate?: UserCreateOrConnectWithoutWatchlistsInput
    connect?: UserWhereUniqueInput
  }

  export type SymbolCreateNestedManyWithoutWatchlistsInput = {
    create?: XOR<SymbolCreateWithoutWatchlistsInput, SymbolUncheckedCreateWithoutWatchlistsInput> | SymbolCreateWithoutWatchlistsInput[] | SymbolUncheckedCreateWithoutWatchlistsInput[]
    connectOrCreate?: SymbolCreateOrConnectWithoutWatchlistsInput | SymbolCreateOrConnectWithoutWatchlistsInput[]
    connect?: SymbolWhereUniqueInput | SymbolWhereUniqueInput[]
  }

  export type SymbolUncheckedCreateNestedManyWithoutWatchlistsInput = {
    create?: XOR<SymbolCreateWithoutWatchlistsInput, SymbolUncheckedCreateWithoutWatchlistsInput> | SymbolCreateWithoutWatchlistsInput[] | SymbolUncheckedCreateWithoutWatchlistsInput[]
    connectOrCreate?: SymbolCreateOrConnectWithoutWatchlistsInput | SymbolCreateOrConnectWithoutWatchlistsInput[]
    connect?: SymbolWhereUniqueInput | SymbolWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutWatchlistsNestedInput = {
    create?: XOR<UserCreateWithoutWatchlistsInput, UserUncheckedCreateWithoutWatchlistsInput>
    connectOrCreate?: UserCreateOrConnectWithoutWatchlistsInput
    upsert?: UserUpsertWithoutWatchlistsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutWatchlistsInput, UserUpdateWithoutWatchlistsInput>, UserUncheckedUpdateWithoutWatchlistsInput>
  }

  export type SymbolUpdateManyWithoutWatchlistsNestedInput = {
    create?: XOR<SymbolCreateWithoutWatchlistsInput, SymbolUncheckedCreateWithoutWatchlistsInput> | SymbolCreateWithoutWatchlistsInput[] | SymbolUncheckedCreateWithoutWatchlistsInput[]
    connectOrCreate?: SymbolCreateOrConnectWithoutWatchlistsInput | SymbolCreateOrConnectWithoutWatchlistsInput[]
    upsert?: SymbolUpsertWithWhereUniqueWithoutWatchlistsInput | SymbolUpsertWithWhereUniqueWithoutWatchlistsInput[]
    set?: SymbolWhereUniqueInput | SymbolWhereUniqueInput[]
    disconnect?: SymbolWhereUniqueInput | SymbolWhereUniqueInput[]
    delete?: SymbolWhereUniqueInput | SymbolWhereUniqueInput[]
    connect?: SymbolWhereUniqueInput | SymbolWhereUniqueInput[]
    update?: SymbolUpdateWithWhereUniqueWithoutWatchlistsInput | SymbolUpdateWithWhereUniqueWithoutWatchlistsInput[]
    updateMany?: SymbolUpdateManyWithWhereWithoutWatchlistsInput | SymbolUpdateManyWithWhereWithoutWatchlistsInput[]
    deleteMany?: SymbolScalarWhereInput | SymbolScalarWhereInput[]
  }

  export type SymbolUncheckedUpdateManyWithoutWatchlistsNestedInput = {
    create?: XOR<SymbolCreateWithoutWatchlistsInput, SymbolUncheckedCreateWithoutWatchlistsInput> | SymbolCreateWithoutWatchlistsInput[] | SymbolUncheckedCreateWithoutWatchlistsInput[]
    connectOrCreate?: SymbolCreateOrConnectWithoutWatchlistsInput | SymbolCreateOrConnectWithoutWatchlistsInput[]
    upsert?: SymbolUpsertWithWhereUniqueWithoutWatchlistsInput | SymbolUpsertWithWhereUniqueWithoutWatchlistsInput[]
    set?: SymbolWhereUniqueInput | SymbolWhereUniqueInput[]
    disconnect?: SymbolWhereUniqueInput | SymbolWhereUniqueInput[]
    delete?: SymbolWhereUniqueInput | SymbolWhereUniqueInput[]
    connect?: SymbolWhereUniqueInput | SymbolWhereUniqueInput[]
    update?: SymbolUpdateWithWhereUniqueWithoutWatchlistsInput | SymbolUpdateWithWhereUniqueWithoutWatchlistsInput[]
    updateMany?: SymbolUpdateManyWithWhereWithoutWatchlistsInput | SymbolUpdateManyWithWhereWithoutWatchlistsInput[]
    deleteMany?: SymbolScalarWhereInput | SymbolScalarWhereInput[]
  }

  export type PortfolioCreateNestedManyWithoutSymbolsInput = {
    create?: XOR<PortfolioCreateWithoutSymbolsInput, PortfolioUncheckedCreateWithoutSymbolsInput> | PortfolioCreateWithoutSymbolsInput[] | PortfolioUncheckedCreateWithoutSymbolsInput[]
    connectOrCreate?: PortfolioCreateOrConnectWithoutSymbolsInput | PortfolioCreateOrConnectWithoutSymbolsInput[]
    connect?: PortfolioWhereUniqueInput | PortfolioWhereUniqueInput[]
  }

  export type WatchlistCreateNestedManyWithoutSymbolsInput = {
    create?: XOR<WatchlistCreateWithoutSymbolsInput, WatchlistUncheckedCreateWithoutSymbolsInput> | WatchlistCreateWithoutSymbolsInput[] | WatchlistUncheckedCreateWithoutSymbolsInput[]
    connectOrCreate?: WatchlistCreateOrConnectWithoutSymbolsInput | WatchlistCreateOrConnectWithoutSymbolsInput[]
    connect?: WatchlistWhereUniqueInput | WatchlistWhereUniqueInput[]
  }

  export type PortfolioUncheckedCreateNestedManyWithoutSymbolsInput = {
    create?: XOR<PortfolioCreateWithoutSymbolsInput, PortfolioUncheckedCreateWithoutSymbolsInput> | PortfolioCreateWithoutSymbolsInput[] | PortfolioUncheckedCreateWithoutSymbolsInput[]
    connectOrCreate?: PortfolioCreateOrConnectWithoutSymbolsInput | PortfolioCreateOrConnectWithoutSymbolsInput[]
    connect?: PortfolioWhereUniqueInput | PortfolioWhereUniqueInput[]
  }

  export type WatchlistUncheckedCreateNestedManyWithoutSymbolsInput = {
    create?: XOR<WatchlistCreateWithoutSymbolsInput, WatchlistUncheckedCreateWithoutSymbolsInput> | WatchlistCreateWithoutSymbolsInput[] | WatchlistUncheckedCreateWithoutSymbolsInput[]
    connectOrCreate?: WatchlistCreateOrConnectWithoutSymbolsInput | WatchlistCreateOrConnectWithoutSymbolsInput[]
    connect?: WatchlistWhereUniqueInput | WatchlistWhereUniqueInput[]
  }

  export type EnumSymbolTypeFieldUpdateOperationsInput = {
    set?: $Enums.SymbolType
  }

  export type PortfolioUpdateManyWithoutSymbolsNestedInput = {
    create?: XOR<PortfolioCreateWithoutSymbolsInput, PortfolioUncheckedCreateWithoutSymbolsInput> | PortfolioCreateWithoutSymbolsInput[] | PortfolioUncheckedCreateWithoutSymbolsInput[]
    connectOrCreate?: PortfolioCreateOrConnectWithoutSymbolsInput | PortfolioCreateOrConnectWithoutSymbolsInput[]
    upsert?: PortfolioUpsertWithWhereUniqueWithoutSymbolsInput | PortfolioUpsertWithWhereUniqueWithoutSymbolsInput[]
    set?: PortfolioWhereUniqueInput | PortfolioWhereUniqueInput[]
    disconnect?: PortfolioWhereUniqueInput | PortfolioWhereUniqueInput[]
    delete?: PortfolioWhereUniqueInput | PortfolioWhereUniqueInput[]
    connect?: PortfolioWhereUniqueInput | PortfolioWhereUniqueInput[]
    update?: PortfolioUpdateWithWhereUniqueWithoutSymbolsInput | PortfolioUpdateWithWhereUniqueWithoutSymbolsInput[]
    updateMany?: PortfolioUpdateManyWithWhereWithoutSymbolsInput | PortfolioUpdateManyWithWhereWithoutSymbolsInput[]
    deleteMany?: PortfolioScalarWhereInput | PortfolioScalarWhereInput[]
  }

  export type WatchlistUpdateManyWithoutSymbolsNestedInput = {
    create?: XOR<WatchlistCreateWithoutSymbolsInput, WatchlistUncheckedCreateWithoutSymbolsInput> | WatchlistCreateWithoutSymbolsInput[] | WatchlistUncheckedCreateWithoutSymbolsInput[]
    connectOrCreate?: WatchlistCreateOrConnectWithoutSymbolsInput | WatchlistCreateOrConnectWithoutSymbolsInput[]
    upsert?: WatchlistUpsertWithWhereUniqueWithoutSymbolsInput | WatchlistUpsertWithWhereUniqueWithoutSymbolsInput[]
    set?: WatchlistWhereUniqueInput | WatchlistWhereUniqueInput[]
    disconnect?: WatchlistWhereUniqueInput | WatchlistWhereUniqueInput[]
    delete?: WatchlistWhereUniqueInput | WatchlistWhereUniqueInput[]
    connect?: WatchlistWhereUniqueInput | WatchlistWhereUniqueInput[]
    update?: WatchlistUpdateWithWhereUniqueWithoutSymbolsInput | WatchlistUpdateWithWhereUniqueWithoutSymbolsInput[]
    updateMany?: WatchlistUpdateManyWithWhereWithoutSymbolsInput | WatchlistUpdateManyWithWhereWithoutSymbolsInput[]
    deleteMany?: WatchlistScalarWhereInput | WatchlistScalarWhereInput[]
  }

  export type PortfolioUncheckedUpdateManyWithoutSymbolsNestedInput = {
    create?: XOR<PortfolioCreateWithoutSymbolsInput, PortfolioUncheckedCreateWithoutSymbolsInput> | PortfolioCreateWithoutSymbolsInput[] | PortfolioUncheckedCreateWithoutSymbolsInput[]
    connectOrCreate?: PortfolioCreateOrConnectWithoutSymbolsInput | PortfolioCreateOrConnectWithoutSymbolsInput[]
    upsert?: PortfolioUpsertWithWhereUniqueWithoutSymbolsInput | PortfolioUpsertWithWhereUniqueWithoutSymbolsInput[]
    set?: PortfolioWhereUniqueInput | PortfolioWhereUniqueInput[]
    disconnect?: PortfolioWhereUniqueInput | PortfolioWhereUniqueInput[]
    delete?: PortfolioWhereUniqueInput | PortfolioWhereUniqueInput[]
    connect?: PortfolioWhereUniqueInput | PortfolioWhereUniqueInput[]
    update?: PortfolioUpdateWithWhereUniqueWithoutSymbolsInput | PortfolioUpdateWithWhereUniqueWithoutSymbolsInput[]
    updateMany?: PortfolioUpdateManyWithWhereWithoutSymbolsInput | PortfolioUpdateManyWithWhereWithoutSymbolsInput[]
    deleteMany?: PortfolioScalarWhereInput | PortfolioScalarWhereInput[]
  }

  export type WatchlistUncheckedUpdateManyWithoutSymbolsNestedInput = {
    create?: XOR<WatchlistCreateWithoutSymbolsInput, WatchlistUncheckedCreateWithoutSymbolsInput> | WatchlistCreateWithoutSymbolsInput[] | WatchlistUncheckedCreateWithoutSymbolsInput[]
    connectOrCreate?: WatchlistCreateOrConnectWithoutSymbolsInput | WatchlistCreateOrConnectWithoutSymbolsInput[]
    upsert?: WatchlistUpsertWithWhereUniqueWithoutSymbolsInput | WatchlistUpsertWithWhereUniqueWithoutSymbolsInput[]
    set?: WatchlistWhereUniqueInput | WatchlistWhereUniqueInput[]
    disconnect?: WatchlistWhereUniqueInput | WatchlistWhereUniqueInput[]
    delete?: WatchlistWhereUniqueInput | WatchlistWhereUniqueInput[]
    connect?: WatchlistWhereUniqueInput | WatchlistWhereUniqueInput[]
    update?: WatchlistUpdateWithWhereUniqueWithoutSymbolsInput | WatchlistUpdateWithWhereUniqueWithoutSymbolsInput[]
    updateMany?: WatchlistUpdateManyWithWhereWithoutSymbolsInput | WatchlistUpdateManyWithWhereWithoutSymbolsInput[]
    deleteMany?: WatchlistScalarWhereInput | WatchlistScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutPortfoliosInput = {
    create?: XOR<UserCreateWithoutPortfoliosInput, UserUncheckedCreateWithoutPortfoliosInput>
    connectOrCreate?: UserCreateOrConnectWithoutPortfoliosInput
    connect?: UserWhereUniqueInput
  }

  export type SymbolCreateNestedManyWithoutPortfoliosInput = {
    create?: XOR<SymbolCreateWithoutPortfoliosInput, SymbolUncheckedCreateWithoutPortfoliosInput> | SymbolCreateWithoutPortfoliosInput[] | SymbolUncheckedCreateWithoutPortfoliosInput[]
    connectOrCreate?: SymbolCreateOrConnectWithoutPortfoliosInput | SymbolCreateOrConnectWithoutPortfoliosInput[]
    connect?: SymbolWhereUniqueInput | SymbolWhereUniqueInput[]
  }

  export type SymbolUncheckedCreateNestedManyWithoutPortfoliosInput = {
    create?: XOR<SymbolCreateWithoutPortfoliosInput, SymbolUncheckedCreateWithoutPortfoliosInput> | SymbolCreateWithoutPortfoliosInput[] | SymbolUncheckedCreateWithoutPortfoliosInput[]
    connectOrCreate?: SymbolCreateOrConnectWithoutPortfoliosInput | SymbolCreateOrConnectWithoutPortfoliosInput[]
    connect?: SymbolWhereUniqueInput | SymbolWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutPortfoliosNestedInput = {
    create?: XOR<UserCreateWithoutPortfoliosInput, UserUncheckedCreateWithoutPortfoliosInput>
    connectOrCreate?: UserCreateOrConnectWithoutPortfoliosInput
    upsert?: UserUpsertWithoutPortfoliosInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPortfoliosInput, UserUpdateWithoutPortfoliosInput>, UserUncheckedUpdateWithoutPortfoliosInput>
  }

  export type SymbolUpdateManyWithoutPortfoliosNestedInput = {
    create?: XOR<SymbolCreateWithoutPortfoliosInput, SymbolUncheckedCreateWithoutPortfoliosInput> | SymbolCreateWithoutPortfoliosInput[] | SymbolUncheckedCreateWithoutPortfoliosInput[]
    connectOrCreate?: SymbolCreateOrConnectWithoutPortfoliosInput | SymbolCreateOrConnectWithoutPortfoliosInput[]
    upsert?: SymbolUpsertWithWhereUniqueWithoutPortfoliosInput | SymbolUpsertWithWhereUniqueWithoutPortfoliosInput[]
    set?: SymbolWhereUniqueInput | SymbolWhereUniqueInput[]
    disconnect?: SymbolWhereUniqueInput | SymbolWhereUniqueInput[]
    delete?: SymbolWhereUniqueInput | SymbolWhereUniqueInput[]
    connect?: SymbolWhereUniqueInput | SymbolWhereUniqueInput[]
    update?: SymbolUpdateWithWhereUniqueWithoutPortfoliosInput | SymbolUpdateWithWhereUniqueWithoutPortfoliosInput[]
    updateMany?: SymbolUpdateManyWithWhereWithoutPortfoliosInput | SymbolUpdateManyWithWhereWithoutPortfoliosInput[]
    deleteMany?: SymbolScalarWhereInput | SymbolScalarWhereInput[]
  }

  export type SymbolUncheckedUpdateManyWithoutPortfoliosNestedInput = {
    create?: XOR<SymbolCreateWithoutPortfoliosInput, SymbolUncheckedCreateWithoutPortfoliosInput> | SymbolCreateWithoutPortfoliosInput[] | SymbolUncheckedCreateWithoutPortfoliosInput[]
    connectOrCreate?: SymbolCreateOrConnectWithoutPortfoliosInput | SymbolCreateOrConnectWithoutPortfoliosInput[]
    upsert?: SymbolUpsertWithWhereUniqueWithoutPortfoliosInput | SymbolUpsertWithWhereUniqueWithoutPortfoliosInput[]
    set?: SymbolWhereUniqueInput | SymbolWhereUniqueInput[]
    disconnect?: SymbolWhereUniqueInput | SymbolWhereUniqueInput[]
    delete?: SymbolWhereUniqueInput | SymbolWhereUniqueInput[]
    connect?: SymbolWhereUniqueInput | SymbolWhereUniqueInput[]
    update?: SymbolUpdateWithWhereUniqueWithoutPortfoliosInput | SymbolUpdateWithWhereUniqueWithoutPortfoliosInput[]
    updateMany?: SymbolUpdateManyWithWhereWithoutPortfoliosInput | SymbolUpdateManyWithWhereWithoutPortfoliosInput[]
    deleteMany?: SymbolScalarWhereInput | SymbolScalarWhereInput[]
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedEnumSymbolTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.SymbolType | EnumSymbolTypeFieldRefInput<$PrismaModel>
    in?: $Enums.SymbolType[] | ListEnumSymbolTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.SymbolType[] | ListEnumSymbolTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumSymbolTypeFilter<$PrismaModel> | $Enums.SymbolType
  }

  export type NestedEnumSymbolTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SymbolType | EnumSymbolTypeFieldRefInput<$PrismaModel>
    in?: $Enums.SymbolType[] | ListEnumSymbolTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.SymbolType[] | ListEnumSymbolTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumSymbolTypeWithAggregatesFilter<$PrismaModel> | $Enums.SymbolType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSymbolTypeFilter<$PrismaModel>
    _max?: NestedEnumSymbolTypeFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }
  export type NestedJsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type PortfolioCreateWithoutUserInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    symbols?: SymbolCreateNestedManyWithoutPortfoliosInput
  }

  export type PortfolioUncheckedCreateWithoutUserInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    symbols?: SymbolUncheckedCreateNestedManyWithoutPortfoliosInput
  }

  export type PortfolioCreateOrConnectWithoutUserInput = {
    where: PortfolioWhereUniqueInput
    create: XOR<PortfolioCreateWithoutUserInput, PortfolioUncheckedCreateWithoutUserInput>
  }

  export type PortfolioCreateManyUserInputEnvelope = {
    data: PortfolioCreateManyUserInput | PortfolioCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type WatchlistCreateWithoutUserInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    symbols?: SymbolCreateNestedManyWithoutWatchlistsInput
  }

  export type WatchlistUncheckedCreateWithoutUserInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    symbols?: SymbolUncheckedCreateNestedManyWithoutWatchlistsInput
  }

  export type WatchlistCreateOrConnectWithoutUserInput = {
    where: WatchlistWhereUniqueInput
    create: XOR<WatchlistCreateWithoutUserInput, WatchlistUncheckedCreateWithoutUserInput>
  }

  export type WatchlistCreateManyUserInputEnvelope = {
    data: WatchlistCreateManyUserInput | WatchlistCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type PortfolioUpsertWithWhereUniqueWithoutUserInput = {
    where: PortfolioWhereUniqueInput
    update: XOR<PortfolioUpdateWithoutUserInput, PortfolioUncheckedUpdateWithoutUserInput>
    create: XOR<PortfolioCreateWithoutUserInput, PortfolioUncheckedCreateWithoutUserInput>
  }

  export type PortfolioUpdateWithWhereUniqueWithoutUserInput = {
    where: PortfolioWhereUniqueInput
    data: XOR<PortfolioUpdateWithoutUserInput, PortfolioUncheckedUpdateWithoutUserInput>
  }

  export type PortfolioUpdateManyWithWhereWithoutUserInput = {
    where: PortfolioScalarWhereInput
    data: XOR<PortfolioUpdateManyMutationInput, PortfolioUncheckedUpdateManyWithoutUserInput>
  }

  export type PortfolioScalarWhereInput = {
    AND?: PortfolioScalarWhereInput | PortfolioScalarWhereInput[]
    OR?: PortfolioScalarWhereInput[]
    NOT?: PortfolioScalarWhereInput | PortfolioScalarWhereInput[]
    id?: StringFilter<"Portfolio"> | string
    name?: StringFilter<"Portfolio"> | string
    userId?: StringFilter<"Portfolio"> | string
    createdAt?: DateTimeFilter<"Portfolio"> | Date | string
    updatedAt?: DateTimeFilter<"Portfolio"> | Date | string
  }

  export type WatchlistUpsertWithWhereUniqueWithoutUserInput = {
    where: WatchlistWhereUniqueInput
    update: XOR<WatchlistUpdateWithoutUserInput, WatchlistUncheckedUpdateWithoutUserInput>
    create: XOR<WatchlistCreateWithoutUserInput, WatchlistUncheckedCreateWithoutUserInput>
  }

  export type WatchlistUpdateWithWhereUniqueWithoutUserInput = {
    where: WatchlistWhereUniqueInput
    data: XOR<WatchlistUpdateWithoutUserInput, WatchlistUncheckedUpdateWithoutUserInput>
  }

  export type WatchlistUpdateManyWithWhereWithoutUserInput = {
    where: WatchlistScalarWhereInput
    data: XOR<WatchlistUpdateManyMutationInput, WatchlistUncheckedUpdateManyWithoutUserInput>
  }

  export type WatchlistScalarWhereInput = {
    AND?: WatchlistScalarWhereInput | WatchlistScalarWhereInput[]
    OR?: WatchlistScalarWhereInput[]
    NOT?: WatchlistScalarWhereInput | WatchlistScalarWhereInput[]
    id?: StringFilter<"Watchlist"> | string
    name?: StringFilter<"Watchlist"> | string
    userId?: StringFilter<"Watchlist"> | string
    createdAt?: DateTimeFilter<"Watchlist"> | Date | string
    updatedAt?: DateTimeFilter<"Watchlist"> | Date | string
  }

  export type UserCreateWithoutWatchlistsInput = {
    id?: string
    email: string
    name?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    portfolios?: PortfolioCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutWatchlistsInput = {
    id?: string
    email: string
    name?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    portfolios?: PortfolioUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutWatchlistsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutWatchlistsInput, UserUncheckedCreateWithoutWatchlistsInput>
  }

  export type SymbolCreateWithoutWatchlistsInput = {
    id?: string
    symbol: string
    name?: string | null
    type: $Enums.SymbolType
    createdAt?: Date | string
    updatedAt?: Date | string
    portfolios?: PortfolioCreateNestedManyWithoutSymbolsInput
  }

  export type SymbolUncheckedCreateWithoutWatchlistsInput = {
    id?: string
    symbol: string
    name?: string | null
    type: $Enums.SymbolType
    createdAt?: Date | string
    updatedAt?: Date | string
    portfolios?: PortfolioUncheckedCreateNestedManyWithoutSymbolsInput
  }

  export type SymbolCreateOrConnectWithoutWatchlistsInput = {
    where: SymbolWhereUniqueInput
    create: XOR<SymbolCreateWithoutWatchlistsInput, SymbolUncheckedCreateWithoutWatchlistsInput>
  }

  export type UserUpsertWithoutWatchlistsInput = {
    update: XOR<UserUpdateWithoutWatchlistsInput, UserUncheckedUpdateWithoutWatchlistsInput>
    create: XOR<UserCreateWithoutWatchlistsInput, UserUncheckedCreateWithoutWatchlistsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutWatchlistsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutWatchlistsInput, UserUncheckedUpdateWithoutWatchlistsInput>
  }

  export type UserUpdateWithoutWatchlistsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    portfolios?: PortfolioUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutWatchlistsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    portfolios?: PortfolioUncheckedUpdateManyWithoutUserNestedInput
  }

  export type SymbolUpsertWithWhereUniqueWithoutWatchlistsInput = {
    where: SymbolWhereUniqueInput
    update: XOR<SymbolUpdateWithoutWatchlistsInput, SymbolUncheckedUpdateWithoutWatchlistsInput>
    create: XOR<SymbolCreateWithoutWatchlistsInput, SymbolUncheckedCreateWithoutWatchlistsInput>
  }

  export type SymbolUpdateWithWhereUniqueWithoutWatchlistsInput = {
    where: SymbolWhereUniqueInput
    data: XOR<SymbolUpdateWithoutWatchlistsInput, SymbolUncheckedUpdateWithoutWatchlistsInput>
  }

  export type SymbolUpdateManyWithWhereWithoutWatchlistsInput = {
    where: SymbolScalarWhereInput
    data: XOR<SymbolUpdateManyMutationInput, SymbolUncheckedUpdateManyWithoutWatchlistsInput>
  }

  export type SymbolScalarWhereInput = {
    AND?: SymbolScalarWhereInput | SymbolScalarWhereInput[]
    OR?: SymbolScalarWhereInput[]
    NOT?: SymbolScalarWhereInput | SymbolScalarWhereInput[]
    id?: StringFilter<"Symbol"> | string
    symbol?: StringFilter<"Symbol"> | string
    name?: StringNullableFilter<"Symbol"> | string | null
    type?: EnumSymbolTypeFilter<"Symbol"> | $Enums.SymbolType
    createdAt?: DateTimeFilter<"Symbol"> | Date | string
    updatedAt?: DateTimeFilter<"Symbol"> | Date | string
  }

  export type PortfolioCreateWithoutSymbolsInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutPortfoliosInput
  }

  export type PortfolioUncheckedCreateWithoutSymbolsInput = {
    id?: string
    name: string
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PortfolioCreateOrConnectWithoutSymbolsInput = {
    where: PortfolioWhereUniqueInput
    create: XOR<PortfolioCreateWithoutSymbolsInput, PortfolioUncheckedCreateWithoutSymbolsInput>
  }

  export type WatchlistCreateWithoutSymbolsInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutWatchlistsInput
  }

  export type WatchlistUncheckedCreateWithoutSymbolsInput = {
    id?: string
    name: string
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WatchlistCreateOrConnectWithoutSymbolsInput = {
    where: WatchlistWhereUniqueInput
    create: XOR<WatchlistCreateWithoutSymbolsInput, WatchlistUncheckedCreateWithoutSymbolsInput>
  }

  export type PortfolioUpsertWithWhereUniqueWithoutSymbolsInput = {
    where: PortfolioWhereUniqueInput
    update: XOR<PortfolioUpdateWithoutSymbolsInput, PortfolioUncheckedUpdateWithoutSymbolsInput>
    create: XOR<PortfolioCreateWithoutSymbolsInput, PortfolioUncheckedCreateWithoutSymbolsInput>
  }

  export type PortfolioUpdateWithWhereUniqueWithoutSymbolsInput = {
    where: PortfolioWhereUniqueInput
    data: XOR<PortfolioUpdateWithoutSymbolsInput, PortfolioUncheckedUpdateWithoutSymbolsInput>
  }

  export type PortfolioUpdateManyWithWhereWithoutSymbolsInput = {
    where: PortfolioScalarWhereInput
    data: XOR<PortfolioUpdateManyMutationInput, PortfolioUncheckedUpdateManyWithoutSymbolsInput>
  }

  export type WatchlistUpsertWithWhereUniqueWithoutSymbolsInput = {
    where: WatchlistWhereUniqueInput
    update: XOR<WatchlistUpdateWithoutSymbolsInput, WatchlistUncheckedUpdateWithoutSymbolsInput>
    create: XOR<WatchlistCreateWithoutSymbolsInput, WatchlistUncheckedCreateWithoutSymbolsInput>
  }

  export type WatchlistUpdateWithWhereUniqueWithoutSymbolsInput = {
    where: WatchlistWhereUniqueInput
    data: XOR<WatchlistUpdateWithoutSymbolsInput, WatchlistUncheckedUpdateWithoutSymbolsInput>
  }

  export type WatchlistUpdateManyWithWhereWithoutSymbolsInput = {
    where: WatchlistScalarWhereInput
    data: XOR<WatchlistUpdateManyMutationInput, WatchlistUncheckedUpdateManyWithoutSymbolsInput>
  }

  export type UserCreateWithoutPortfoliosInput = {
    id?: string
    email: string
    name?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    watchlists?: WatchlistCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutPortfoliosInput = {
    id?: string
    email: string
    name?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    watchlists?: WatchlistUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutPortfoliosInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPortfoliosInput, UserUncheckedCreateWithoutPortfoliosInput>
  }

  export type SymbolCreateWithoutPortfoliosInput = {
    id?: string
    symbol: string
    name?: string | null
    type: $Enums.SymbolType
    createdAt?: Date | string
    updatedAt?: Date | string
    watchlists?: WatchlistCreateNestedManyWithoutSymbolsInput
  }

  export type SymbolUncheckedCreateWithoutPortfoliosInput = {
    id?: string
    symbol: string
    name?: string | null
    type: $Enums.SymbolType
    createdAt?: Date | string
    updatedAt?: Date | string
    watchlists?: WatchlistUncheckedCreateNestedManyWithoutSymbolsInput
  }

  export type SymbolCreateOrConnectWithoutPortfoliosInput = {
    where: SymbolWhereUniqueInput
    create: XOR<SymbolCreateWithoutPortfoliosInput, SymbolUncheckedCreateWithoutPortfoliosInput>
  }

  export type UserUpsertWithoutPortfoliosInput = {
    update: XOR<UserUpdateWithoutPortfoliosInput, UserUncheckedUpdateWithoutPortfoliosInput>
    create: XOR<UserCreateWithoutPortfoliosInput, UserUncheckedCreateWithoutPortfoliosInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPortfoliosInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPortfoliosInput, UserUncheckedUpdateWithoutPortfoliosInput>
  }

  export type UserUpdateWithoutPortfoliosInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    watchlists?: WatchlistUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutPortfoliosInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    watchlists?: WatchlistUncheckedUpdateManyWithoutUserNestedInput
  }

  export type SymbolUpsertWithWhereUniqueWithoutPortfoliosInput = {
    where: SymbolWhereUniqueInput
    update: XOR<SymbolUpdateWithoutPortfoliosInput, SymbolUncheckedUpdateWithoutPortfoliosInput>
    create: XOR<SymbolCreateWithoutPortfoliosInput, SymbolUncheckedCreateWithoutPortfoliosInput>
  }

  export type SymbolUpdateWithWhereUniqueWithoutPortfoliosInput = {
    where: SymbolWhereUniqueInput
    data: XOR<SymbolUpdateWithoutPortfoliosInput, SymbolUncheckedUpdateWithoutPortfoliosInput>
  }

  export type SymbolUpdateManyWithWhereWithoutPortfoliosInput = {
    where: SymbolScalarWhereInput
    data: XOR<SymbolUpdateManyMutationInput, SymbolUncheckedUpdateManyWithoutPortfoliosInput>
  }

  export type PortfolioCreateManyUserInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WatchlistCreateManyUserInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PortfolioUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    symbols?: SymbolUpdateManyWithoutPortfoliosNestedInput
  }

  export type PortfolioUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    symbols?: SymbolUncheckedUpdateManyWithoutPortfoliosNestedInput
  }

  export type PortfolioUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WatchlistUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    symbols?: SymbolUpdateManyWithoutWatchlistsNestedInput
  }

  export type WatchlistUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    symbols?: SymbolUncheckedUpdateManyWithoutWatchlistsNestedInput
  }

  export type WatchlistUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SymbolUpdateWithoutWatchlistsInput = {
    id?: StringFieldUpdateOperationsInput | string
    symbol?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumSymbolTypeFieldUpdateOperationsInput | $Enums.SymbolType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    portfolios?: PortfolioUpdateManyWithoutSymbolsNestedInput
  }

  export type SymbolUncheckedUpdateWithoutWatchlistsInput = {
    id?: StringFieldUpdateOperationsInput | string
    symbol?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumSymbolTypeFieldUpdateOperationsInput | $Enums.SymbolType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    portfolios?: PortfolioUncheckedUpdateManyWithoutSymbolsNestedInput
  }

  export type SymbolUncheckedUpdateManyWithoutWatchlistsInput = {
    id?: StringFieldUpdateOperationsInput | string
    symbol?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumSymbolTypeFieldUpdateOperationsInput | $Enums.SymbolType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PortfolioUpdateWithoutSymbolsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutPortfoliosNestedInput
  }

  export type PortfolioUncheckedUpdateWithoutSymbolsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PortfolioUncheckedUpdateManyWithoutSymbolsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WatchlistUpdateWithoutSymbolsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutWatchlistsNestedInput
  }

  export type WatchlistUncheckedUpdateWithoutSymbolsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WatchlistUncheckedUpdateManyWithoutSymbolsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SymbolUpdateWithoutPortfoliosInput = {
    id?: StringFieldUpdateOperationsInput | string
    symbol?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumSymbolTypeFieldUpdateOperationsInput | $Enums.SymbolType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    watchlists?: WatchlistUpdateManyWithoutSymbolsNestedInput
  }

  export type SymbolUncheckedUpdateWithoutPortfoliosInput = {
    id?: StringFieldUpdateOperationsInput | string
    symbol?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumSymbolTypeFieldUpdateOperationsInput | $Enums.SymbolType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    watchlists?: WatchlistUncheckedUpdateManyWithoutSymbolsNestedInput
  }

  export type SymbolUncheckedUpdateManyWithoutPortfoliosInput = {
    id?: StringFieldUpdateOperationsInput | string
    symbol?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumSymbolTypeFieldUpdateOperationsInput | $Enums.SymbolType
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}